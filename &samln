ASMB,R
      HED <SAM SIZE SUBROUTINE> 
      NAM SAMLN,7   SAM SIZE SUBROUTINE C#870328:18:46# 
* 
*     PROGRAM TO DETERMINE HOW MUCH SAM IS AVAILABLE. 
*      THIS REV GOES THROUGH THE TABLES, RATHER THAN
*     MAKING REPEATED CLASS-I/O REQUESTS.  ITS
*     EFFECT ON THE SYSTEM IS THEREFORE LESS
*     DRASTIC, AND IT CAN BE ABORTED AT ANY TIME WITHOUT SCREWING 
*     UP THE SYSTEM.
* 
*     CONVERTED TO A SUBROUTINE BY BRUCE R. SCHUPLER - 2 JULY 1980
* 
*      FORTRAN CALLING SEQUENCE - CALL SAMLN(MAXBL,NWORD) 
*      MAXBL = MAXIMUM BLOCK OF SAM THAT IS LEFT
*      NWORD = TOTAL NUMBER OF WORDS OF SAM THAT ARE LEFT 
* 
*      WORKS WITH THE FOLLOWING RTE'S - M3,II,III,IVA,IVB,6VM 
* 
      ENT SAMLN 
      EXT $OPSY 
      EXT .ENTR 
      EXT $ALC
AVMEM DEF $ALC      DEFINE ADDRESS OF SAM FREE LIST.
PRAM  BSS 2 
SAMLN NOP 
      JSB .ENTR 
      DEF PRAM
      LDA $OPSY     CONFIGURE CROSS-MAP INSTR 
*                   AS LDA INSTR IN NON-MAPPED RTE
      CPA OSII      MAPPED-MEMORY RTE?
      JMP NOMAP     NOT MAPPED
      JMP S0        MAPPED
NOMAP EQU * 
      CLA 
      STA X0
      STA X1
      STA X2
S0    EQU * 
      LDA $OPSY     GET RTE TYPE AGAIN
      CPA OSM3      RTE-M3? 
      LDB =B221     YES, IT'S M3
      CPA OSIII     RTE-III?
      LDB =B211     YES, USE OFFSET FOR RTE-III 
      CPA OSII      RTE-II? 
      LDB =B211     YES, USE OFFSET FOR RTE-II
      CPA OSIVA     RTE-IVA?
      LDB =B174     YES, USE OFFSET FOR RTE-IVA 
      CPA OSIVB     RTE-IVB?
      LDB =B174     YES, USE OFFSET FOR RTE-IVB 
      CPA OS6VM     RTE-6VM?
      LDB =B174       Yes.
      STB OFSET 
START EQU * 
      LDB AVMEM     INITIALIZE FREE-MEMORY
      SSB,RSS       INDIRECT? 
      JMP L2
      ELB,CLE,ERB   STRIP OFF SIGN BIT
      LDB B,I 
      JMP *-4 
L2    EQU * 
      ADB OFSET     ADD OFFSET TO POINTER 
      STB PNTR
X0    JMP XX0       NOP IN NON-MAPPED MEMORY RTES 
      LDB PNTR,I    GET FIRST ENTRY IN LIST 
      JMP XX
XX0   EQU * 
      XLB PNTR,I    GET FIRST ENTRY IN LIST 
XX    EQU * 
      STB PNTR
      CLA 
      STA NWORD 
      CCA 
      STA MAXBL     CLEAR MAXIMUM BLOCK 
LOOP1 EQU * 
X1    JMP MX1       NOP FOR NON-MAPPED-MEMORY RTES
      LDA PNTR,I    GET POINTER 
      JMP XX1 
MX1   EQU * 
*                   MAPPED-MEMORY RTES
      XLA PNTR,I    GET NEXT BLOCK SIZE 
XX1   EQU * 
      STA B         SAVE BLOCK SIZE 
      ADA NWORD     INCLUDE BLOCK SIZE IN TOTAL 
      STA NWORD 
      ISZ PNTR      ADVANCE TO POINTER OF NEXT BLOCK
      LDA B         GET NEGATIVE BLOCK SIZE 
      ADB MAXBL       LARGEST BLOCK 
      CMA,INA 
      SSB,RSS           YET?
      STA MAXBL     YES, SAVE NEGATIVE SIZE 
X2    JMP MX2       NOP FOR NON-MAPPED-MEMORY RTES
      LDA PNTR,I    GET NEXT BLOCK SIZE 
      JMP XX2 
MX2   EQU * 
      XLA PNTR,I    GET ADDRESS OF NEXT BLOCK 
XX2   EQU * 
      CPA TERMT     TERMINATOR? 
      JMP PRINV     YES, END OF LIST FOUND. 
      STA PNTR
      JMP LOOP1     NO, CONTINUE LOOKING
*     HERE WHEN ALL FREE MEMORY BLOCKS HAVE BEEN TOTALLED.
PRINV EQU * 
      LDA MAXBL     MAKE MAXIMUM BLOCK SIZE POSITIVE
      CMA,INA 
      STA MAXBL 
* 
*     PUT MAXBL AND NWORD INTO THE OUTPUT PARAMETERS
* 
      LDA MAXBL 
      STA PRAM,I
      LDA NWORD 
      STA PRAM+1,I
* 
      JMP SAMLN,I   RETURN
* 
OSM3  DEC -5
OSII  DEC -7
OSIII DEC -8
OSIVA DEC -9
OS6VM DEC -17 
OSIVB DEC -9
NWORD NOP 
OFSET NOP           OFFSET FROM $ALC TO FREE-SAM PNTR STORED HERE 
TERMT OCT 77777     TERMINATOR FOR FREE LIST
PNTR  NOP 
MAXBL NOP           STORAGE FOR MAXIMUM BLOCK SIZE
B     EQU 1 
      END SAMLN 
