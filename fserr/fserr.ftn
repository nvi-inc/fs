FTN77,I,Y  
$CDS ON
      PROGRAM FSERR(3)     !  Look up error messages from code numbers
c
c  Programmer:  LEE FOSTER  (who left absolutely no comments)
c  Comments added by Lloyd Rawley in April 1988 while modifying the program
c  to use the error message file "STERR in addition to "FSERR.
c                                                        <910328.1523>
c
      CHARACTER*18 CTLST,INDEXST
      CHARACTER*21 CTLFS,INDEXFS
      PARAMETER (CTLFS='/FS/CONTROL/FSERR.CTL')
      PARAMETER (CTLST='/CONTROL/STERR.CTL')
      PARAMETER (INDEXFS='/FS/CONTROL/FSERR.NDX')
      PARAMETER (INDEXST='/CONTROL/STERR.NDX')
      PARAMETER (LOCLIM=1229)
      PARAMETER (IBUFSZ=5136, JBUFSZ=1040)     !  Must be 16+128n
      INTEGER IDCBFS(IBUFSZ),IDCBST(JBUFSZ)    !  Data control blocks
c
c  Calls DIREC, Lee Foster's character routines, and FMGR file routines.
c
      INTEGER IBUFR(40), INBUF(40)
      INTEGER IBUFRFS(40)
      CHARACTER*80 IBC
      EQUIVALENCE (IBUFR,IBC)
      EQUIVALENCE (IBIRB,IBUFR(5)),(IBIOFF,IBUFR(6))
      INTEGER HEADERFS(6)
      EQUIVALENCE (NENTSFS,HEADERFS(1))
      INTEGER HEADERST(6)
      EQUIVALENCE (NENTSST,HEADERST(1))
      INTEGER*2 FmpOpen,FmpPosition,FmpReadString,FmpSetPosition
      INTEGER*2 FmpRead
      INTEGER TDCBST(784)
      INTEGER TDCBFS(784)
      INTEGER*4 IREC,IOFF
      LOGICAL STFILE, FLAG
      INTEGER DIREC
      INTEGER*4 ITIME1,ITIME2,ITIME3,ITIME4
C
C  1. Read calling parameters and set up LU for any error messages.
C
      CALL RMPAR(IBUFR)
C call to retrieve parameter string.
      CALL EXEC(14,1,INBUF,-80)
C call to off program
      IF (IBUFR(2).EQ.-1) CALL EXEC(6,0,3)
      LU =IBUFR(1)
      IF (LU.LT.1 .OR. LU.GT.63)   LU = LOGLU(ISES)
C call to check on device (LU) status
      CALL EXEC(13,LU,ISTA1,ISTA2,ISTA3)
      IF (IAND(ISTA1,37400B).EQ.5000B)   LU = IOR(LU,200B)
C
C  2. Read message files FSERR.CTL and STERR.CTL and index file FSERR.NDX.
C
      IERR = FmpUpdateTime(CTLST,ITIME1)
      IERR = FmpUpdateTime(INDEXST,ITIME2)
      IERR = FmpUpdateTime(CTLFS,ITIME3)
      IERR = FmpUpdateTime(INDEXFS,ITIME4)
C  If index file is older than control file, purge index file.
      IF ((ITIME1.GT.ITIME2).AND.(ITIME2.NE.0)) THEN
        IERR = FmpPurge(INDEXST)
        IF (IERR.NE.0) THEN
          CALL REIO(2,LU,22HCan't purge STERR.NDX!,-22)
          GOTO 9000
        ENDIF
      ENDIF
      IF ((ITIME3.GT.ITIME4).AND.(ITIME4.NE.0)) THEN
        IERR = FmpPurge(INDEXFS)
        IF (IERR.NE.0) THEN
          CALL REIO(2,LU,22HCan't purge FSERR.NDX!,-22)
          GOTO 9000
        ENDIF
      ENDIF
C  Open the control files.
      IF (FmpOpen(IDCBFS,IERR,CTLFS,'ros',(IBUFSZ-16)/128).LT.0) THEN
        CALL REIO(2,LU,23HCan't access FSERR.CTL!,-23)
        GOTO 9000
      ENDIF
      STFILE=(FmpOpen(IDCBST,IERR,CTLST,'ros',(JBUFSZ-16)/128).GE.0)
C  Open the index files
      IF (FmpOpen(TDCBFS,IERR,INDEXFS,'ros',6).LT.0) THEN
        IF(FmpOpen(TDCBFS,IERR,INDEXFS//':::2:58:6','rwcs',6)
     .     .LT.0) GOTO 9000
        DO I=1,LOCLIM+1
          IF (FmpWrite(TDCBFS,IERR,ZERO,12).LT.0) GOTO 9000
        ENDDO
      ENDIF
      IF (STFILE) THEN
        IF (FmpOpen(TDCBST,IERR,INDEXST,'ros',6).LT.0) THEN
          IF(FmpOpen(TDCBST,IERR,INDEXST//':::2:58:6','rwcs',6)
     .       .LT.0) GOTO 9000
          DO I=1,LOCLIM+1
            IF (FmpWrite(TDCBST,IERR,ZERO,12).LT.0) GOTO 9000
          ENDDO
        ENDIF
      ENDIF
C  A DIREC call with first parameter 1 is to set position in file to 1.
      IF (DIREC(1,HEADERFS,IERR,TDCBFS).LT.0) THEN
        CALL REIO(2,LU,23HCan't access FSERR.NDX!,-23)
        GOTO 9000
      ENDIF
      IF (STFILE) THEN
        IF (DIREC(1,HEADERST,IERR,TDCBST).LT.0) THEN
          CALL REIO(2,LU,23HCan't access FSERR.NDX!,-23)
          GOTO 9000
        ENDIF
      ENDIF
C
C  3. If the index file is empty, re-create it.
C
C  NENTS is equivalenced to HEADER(1).
  
      IF (NENTSFS.EQ.0) THEN
        FLAG = .FALSE.
C
C  3.1 Tabulate entries from FSERR.CTL.
C
        DO WHILE (FmpPosition(IDCBFS,IERR,IREC,IOFF).GE.0)
          CALL IFILL(IBUFR,1,80,40B)
          ILEN = FmpReadString(IDCBFS,IERR,IBC)
          ILEN = IFLCH(IBUFR,80)/2
          IF ((IERR.LT.0).OR.(ILEN.EQ.0)) GOTO 30013
          IF (IBUFR.EQ.2H"") THEN
            IF (FLAG) GOTO 30013
            FLAG = .TRUE.
            NENTSFS = NENTSFS+1
          ELSE IF (FLAG) THEN
            FLAG = .FALSE.
            IBIRB = IREC
            IBIOFF = IOFF
C the 3 will have DIREC call the FIND subroutine which does the hashing
            IF (DIREC(3,IBUFR,IERR,TDCBFS).LT.0) GOTO 9000
          END IF
        END DO
30013   FLAG = .FALSE.
C The 2 will have DIREC setposition to 1, write, and post.
        IF (DIREC(2,HEADERFS,IERR,TDCBFS).LT.0) THEN
          WRITE(LU,'(A)') 'Can''t post FSERR.CTL'
          GOTO 9000
        ENDIF
      END IF
C
C  3.2 Now do the same thing for STERR.CTL (if it exists).
C
      IF (STFILE) THEN
        IF (NENTSST.EQ.0) THEN
          FLAG = .FALSE.
          DO WHILE (FmpPosition(IDCBST,IER,IREC,IOFF).GE.0)
            ILEN = FmpReadString(IDCBST,IERR,IBC)
            IF ((IERR.LT.0).OR.(ILEN.EQ.0)) GOTO 30023
            ILEN = IFLCH(IBUFR,80)/2
            IF (IBUFR.EQ.2H"") THEN
              IF (FLAG) GOTO 30023
              FLAG = .TRUE.
              NENTSST = NENTSST +1
            ELSE IF (FLAG) THEN
              FLAG = .FALSE.
              IBIRB = IREC
              IBIOFF = IOFF
C the 3 will have DIREC call the FIND subroutine which does the hashing
              IF (DIREC(3,IBUFR,IERR,TDCBST).LT.0) GOTO 9000
            ENDIF
          ENDDO
30023     CONTINUE
C The 2 will have DIREC setposition to 1, write, and post.
          IF(NENTSST.NE.0) THEN
            IF (DIREC(2,HEADERST,IERR,TDCBST).LT.0) THEN
              WRITE(LU,'(A)') 'Can''t post STERR.CTL'
              GOTO 9000
            END IF
          ENDIF
        ENDIF
      ENDIF
C
C  4. Main REPEAT-UNTIL loop, executed once for each error message reported.
C
4000  CONTINUE
        CALL ICHMV(INBUF,24,2H  ,1,1)
        IF (INBUF.EQ.2H##) THEN
          CALL SMOVE(20HNumber of entries = ,1,20,IBUFR,1)
          CALL CNUMD(NENTSFS,IBUFR(11))      !  Binary-to-ASCII conversion
          CALL REIO(2,LU,IBUFR,-26)
          CALL SMOVE(20HNumber of entries = ,1,20,IBUFR,1)
          CALL CNUMD(NENTSST,IBUFR(11))      !  Binary-to-ASCII conversion
          CALL REIO(2,LU,IBUFR,-26)
          GOTO 9000
        ENDIF
        CALL SMOVE(INBUF,1,7,IBUFR,1)
        CALL SMOVE(2H  ,1,1,IBUFR,8)
C
C 4.2 Make a copy of the buffer first.  The DIREC call returns information
C     in the buffer.  If DIREC does not make a find, it places a 0 in
C     position one of the buffer.  Search the STERR index first and
C     if no find, search the FSERR index.
C
        DO I=1,40
          IBUFRFS(I)=IBUFR(I)
        END DO
        IF (STFILE) THEN
C The 4 will have DIREC have the FIND call search the index file.
          IRET = DIREC(4,IBUFR,IERR,TDCBST)
          IF ((IRET.GE.0).AND.(IBUFR(1).NE.0)) THEN
            IREC = IBIRB
            IF (FmpSetPosition(IDCBST,IERR,IREC,-IREC).GE.0) THEN
              ILEN = FmpRead(IDCBST,IERR,INBUF,80)
              ILEN = FmpRead(IDCBST,IERR,INBUF,80)
              IF ((IERR.GE.0).AND.(INBUF.NE.2H"").AND.(INBUF.NE.2H  ))
     .          CALL EXEC(14,2,INBUF,-ILEN)
                goto 9000
            ENDIF
          ENDIF
        ELSE
          IBUFR(1)=0
        ENDIF
C  Search FSERR index if not found in STERR index.
        IF (IBUFR(1).EQ.0) THEN
          IRET = DIREC(4,IBUFRFS,IERR,TDCBFS)
          IF ((IRET.GE.0).and.(IBUFRFS(1).NE.0)) THEN
            IREC = IBUFRFS(5)
            IF (FmpSetPosition(IDCBFS,IERR,IREC,-IREC).GE.0) THEN
              ILEN = FmpRead(IDCBFS,IERR,INBUF,80)
              ILEN = FmpRead(IDCBFS,IERR,INBUF,80)
              IF ((IERR.GE.0).AND.(INBUF.NE.2H"").AND.(INBUF.NE.2H  ))
     .            CALL EXEC(14,2,INBUF,-ILEN)
            ENDIF
          END IF
        END IF
        IF ((IBUFR(1).EQ.0).AND.(IBUFRFS(1).EQ.0)) THEN
          CALL EXEC(14,2,4HNONO,-4)
        ENDIF
C
C 4.3 Suspend until another program needs an error message.
C
9000    CONTINUE
        CALL EXEC(6,0,1)
        CALL RMPAR(IBUFR)
        CALL EXEC(14,1,INBUF,-80)
      IF (IBUFR(2).NE.-1) GOTO 4000
      WRITE(1,'("FSERR ABORTED")')
C
C  5. Close files and exit.
C
      CALL FmpClose(IDCBST,IERR)
      CALL FmpClose(IDCBFS,IERR)
C this call to DIREC closes the index file.
      IDUMMY = DIREC(9999)
C     CALL IDOFF(6HFSERR )
      CALL EXEC(6,0,3)
      END
