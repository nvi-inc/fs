File: /usr2/fs/misc/fs91119up.txt        Version: 7.1  Date: 170129

		       FS 9.11.19 Update Notice


I. Introduction

This document is divided into four sections:

  I.   Introduction
  II.  Installation
  III. Changes Since Version 9.11.8
  IV.  Reference Appendix for Installation

This update is intended for all stations.  The main change is a fix
for a benign, but annoying, error in the Mark IV formatter and CDP
receiver support.  This version includes two new scripts to help with
fetching/DRUDGing IVS schedules and pushing IVS logs to the data
centers and some documentation improvements.

We encourage all stations to upgrade now even if they do not need the
new features and bugs fixes because doing so will make future upgrades
easier.  Upgrading from 9.11.8 is fairly easy.  A few additional steps
are required for stations with DBBCs and FiLa10Gs.  Upgrading from
9.11.17 and 9.11.18 is very easy.

The most significant changes in version 9.11.17 were:

   (i) Support for the DBBC PFB personality.  With a Mark 5B recorder,
       this supports recording for up to 2 Gbps with one VSI port.
       With a Mark 5C or FlexBuff recorder, up to 4 Gbps is supported
       with use of a FiLa10G.  Nominally, v16 or later of the PFB
       personality is required (please note that 2 Gbps can also be
       recorded with a particular version of the DDC personality).
       However, the FS also provides support for v15, which can be
       used if it is considered suitable.  Except for the FS being
       able to handle the new DBBC 'power=N' command output format in
       v16, all other new features of v16, including continuous
       calibration for PFB, are not supported at this time.

       The rack types in equip.ctl for PFB use are 'dbbc_pfb' and
       'dbbc_pfb/fila10g'.  Please note that the old 'dbbc' and
       'dbbc/fila10g' rack types are now 'dbbc_ddc' and
       'dbbc_ddc/fila10g' respectively.

  (ii) Unification of the station procedures for DBBCs for both DDC
       versus PFB personalities and continuous versus non-continuous
       calibration modes.  This is accomplished primarily by use of
       the new 'if' command, which is discussed next.  A consequence
       of this change is that the DBBC 'bread' and 'iread' procedures
       will not work correctly until the DBBC has been set-up *and*
       the recording bit-mask set (these conditions were already
       required for the Tsys procedures).

 (iii) New 'if' command that allows conditional execution of SNAP
       statements.  A limited number of test conditions are available.
       Virtually all of them are provided for support of the
       unification of station procedures for DBBCs independent of the
       DBBC personality and calibration method, and to make procedures
       such as 'bread' and 'ifagc' to be independent of the observing
       mode.

  (iv) The FMSET program can now offer a set of choices of
       configuration commands to send to the FiLa10G before it is
       synced when 's' is selected.  This option should be used in
       place of a 'fila10g_cfg' SNAP procedure.  Its use should help
       reduce the chances of forgetting to send the configuration
       before syncing and make it easier to select the right
       configuration.

   (v) The 'scan_check' command will only issue a warning, not an
       error, if there are missing bytes for the 5C or FlexBuff
       recorders.  Apparently for some of these systems it is not
       possible for get zero missing bytes.  This feature is likely to
       change in a future release.

  (vi) Improvements to the HOLOG program and a set of MATLAB scripts
       to assist with using HOLOG output for making horizon masks.
       Please see /usr2/fs/holog/MASK/mask-HOWTO.txt for details.

Changes in 9.11.18 include:

 (vii) The update notice (this document) has been reorganized to
       streamline the installation process for users who are already
       familiar with installing FS upgrades.  Additionally explanatory
       material was retained for users with less experience and moved
       to an appendix.

(viii) The ddbc_equip script for helping re-write the equip.ctl
       control file for the new format now works and has been
       enhanced.

  (ix) A bug is the internal program scheduling utilities that caused
       the local program 'sterp' to fail when given a error message
       longer than 256 characters was fixed.

   (x) A bug in DRUDG that caused it to lose the IF configuration when
       the schedule specified an unrecognized rack type, even when the
       rack type was later set correctly by the user.
 
  (xi) An enhancement was added to DRUDG for backward compatibility
       with schedule files.  It now recognizes the obsolete DBBC and
       DBBC/FILA10G rack types in schedule files and maps them to
       DBBC_DBBC and DBBC_DDC/FILA10G rack types respectively.

 (xii) An issue with DRUDG that caused it to rarely not treat the
       equipment type as case insensitive was fixed.

Changes in 9.11.19 include:

(xiii) Some bugs that caused annoying, but benign, incorrect ERROR
       warning messages for Mark IV formatters and CDP receivers was
       fixed.

 (xiv) fesh and plog scripts for fetching/DRUDG-ing schedules from IVS
       and pushing logs to IVS servers, respectively were added.
       Please note these are preliminary versions, we would appreciate
       any feedback.

  (xv) s_client was patched to be Python 2.5 (woody) compatible.

 (xvi) Fixes bugs affecting .skd schedule files with sample rates for
       a mode that did not agree with Nyquist sampling rate of the
       channel BWs.

More details and a full list of changes since 9.11.8 is given in the
'Changes Since Version 9.11.8' section below.

As always, we are deeply indebted to Jonathan Quick (HartRAO) for his
many significant contributions that go far beyond what is explicitly
mentioned below.


II. Installation

Detailed instructions are provided below for installing 9.11.19 as an
upgrade to 9.11.8, the previous stable release.  A list of abbreviated
steps for upgrading from 9.11.17 and 9.11.18 are also provided.  If
you have an older version than 9.11.8, please refer to the appendix,
which is described next, for more information.

An 'Reference Appendix for Installation' is provided at the end of
this document.  It includes seven sub-sections:

 1. Upgrading from FS versions before the previous stable
 2. Example standard procedures
 3. Cut-and-paste installation tips
 4. Making a back-up before installing
 5. Disk space requirements
 6. Set operations file permissions
 7. Fix .prc file 'define' lines

If you haven't upgraded or installed the FS before, you may want to
review the appendix.  It is STRONGLY recommended that you back-up your
operational system before upgrading.

The installation steps for upgrading from 9.11.8 are listed below.  If
you are upgrading from 9.11.17 or 9.11.18, only steps 1-4, 6, 7, and
10 should be necessary, but please consider whether steps 8.B and/or
12.B (both of which were omitted in the 9.11.17 notes) and/or 8.C (new
in 9.11.19) are needed.  If they are needed, you will also need step
9.  Also please note if you upgrading from 9.11.17 or 9.11.18 and have
a DBBC, please make sure you have updated MIDOB as described in step
13.B.

 (0) Back-up your operational system.  Having a back-up to return to
    will allow you to continue operations in case something goes wrong
    with the installation.

 (1) Place a copy of the fs-9.11.19 archive in your FS machine's
     '/tmp' directory.  For example, you might do the following:

       a. navigate to URL http://lupus.gsfc.nasa.gov/fs
       b. enter your FS account name and password at the prompt
       c. click on the 'dist' link
       d. download fs-9.11.19.tgz
       e. scp transfer fs-9.11.19.tgz to your FS machine, placing it
          in '/tmp' directory

     Another FS server is available at: http://www.metsahovi.fi/fs/.

 (2) Log-in as root.

 (3) Extract the source from the archive:

       cd /
       tar xzpf /tmp/fs-9.11.19.tgz

 (4) Set the link for the new FS version:

       cd /usr2
       ln -sfn fs-9.11.19 fs

 (5) Having the wrong ownership and/or permissions on the operational
     files can cause errors during FS operations.  If this needs to be
     fixed, please refer to sub-section: '6. Set operations file
     permissions' of section 'IV. Reference Appendix for Installation'
     to make sure they are all set to the defaults.

 (6) ** VERY IMPORTANT **  Log-out as root, and log-in as prog.

 (7) Make the FS:

       cd /usr2/fs
       make 

 (8) Modify your local programs, if necessary.  The are three
     modifications that may be needed.  The first (A.) is only needed
     if you have local version of the 'sterp' or 'erchk' programs.
     The second (B.) is only needed if you have local FORTRAN programs
     that use fmpsee library.  The third (C.) is only if have local
     MAT device commands.

     A. Skip this step if do not have a local copy (in /usr2/st) of
        the 'sterp' or 'erchk' programs.

        If you do have a local version, please note that the method
        for passing the error information to these programs has
        changed.  If your local version uses the previous get_err()
        routine to retrieve the error information, you will probably
        be able to just copy the new version of this routine from

          /usr2/fs/st.default/st-0.0.0/sterp/get_err.c

        or

          /usr2/fs/st.default/erchk/get_err.c

        (they are identical) into your source directory and recompile.
        If this doesn't work for you, any other changes needed should
        be fairly simple.

        Please note also that it is critical that all versions of
        'sterp' and 'erchk', local or not, must not use the class-I/O
        system, particularly the logit*() family of calls to report
        internal errors to the log.  These programs should have their
        own separate reporting mechanism for internal errors.  If your
        local version of either of these programs is using the
        class-I/O system in any way, this must be corrected.

     B. Skip this step if you do not have local FORTRAN programs that
        use the fmpsee library.

        Local FORTRAN programs that use the fmpsee library,
        particularly the fmpopen() routine, should be modified to call
        fmperror_standalone_set() at the start of the main program.
        The routine should be called with an argument of '0' if the
        program is part of the normal execution of the FS and should
        report errors via the logging system, e.g.,:

          call fmperror_standalone_set(0)
 
        If the program is a standalone utility run by the user, it
        should call the routine with an argument of '1', so that
        errors are reported interactively on the terminal. e.g.,:

         call fmperror_standalone_set(1)

        You may need to rearrange the libraries used in the Makefile.
        In particular, poclb.a needs to listed after fmpsee.a.  In
        addition, clib.a needs to be listed after poclb.a.  Other
        libraries may need to be rearranged or added depending on the
        details of your program and Makefile.

     C. Skip this step if you do not have local commands for MAT
        devices.
   
        If you do have local commands for MAT devices, there is a
        chance that they may have a bug that will cause them to
        generate benign, but annoying, incorrect ERROR warning
        messages.  This issue was originally identifed in the
        logmatmsg. logmatmsgfm.c, and rxdmo.f routines in the FS
        sources.  The problem was that these routines did not clear
        value of third IP parameter returned by MATCN.  There are no
        specific insructions for how to detect or fix this problem.
        If you have local routines that were cloned from the FS source
        files with this problem, you may be able to see what needs to
        be changed by comparing the 9.11.18 and 9.11.19 versions of
        those routines.  If you have routines that come from a
        different code base, look to see how the return IP parameters
        and whether they are reset appropirately before returning to
        the caller.  You can, as always, contact Ed for advice if you
        like.
 
     Please contact Ed (Ed.Himwich@nasa.gov) if you have any
     questions.

 (9) Make your local software that accesses FS shared memory.  If you
     /usr2/st/Makeifle is set-up in the standard way, you can do this
     with:

       cd /usr2/st   
       make rmdoto rmexe all

(10) ** VERY IMPORTANT ** Reboot the computer.  This is important for
     re-initializing shared memory with the new version.

(11) Log in as oper
     
(12) Four updates to the local control files are needed.  The first
     (A.) is to equip.ctl is required for all stations.  The second
     (B.)  is required for stations that have DBBCs and use the
     'equipment' keyword in skedf.ctl.  The third (C.) is only
     required for stations with a FiLa10G.  The fourth (D.) is only
     required for stations that want to use 'vsi_align=0/1' for the
     DBBC PFB mode.

     A. All stations need to update their equip.ctl file to change the
        contents of non-comment line 21.  Previously this line
        contained one field for the number for DBBC Conditioning
        modules.  Now it contains up to four fields that specify the
        number of Core boards for each Conditioning module.  The
        script 'dbbc_equip' can fix this, but the correct values must
        be supplied on the command line.  The first command line
        argument for the script is a string (within quotes) with up to
        four whitespace separated values, call them 'a', 'b', 'c', and
        'd' in order.  Each specifies the number of Core boards
        attached to the corresponding Conditioning module.  Drop
        trailing values when you don't have four Conditioning Modules.
        Three examples follow.

          If you have one Core board on each of four Conditioning
          modules, use:
    
            cd /usr2/control
            /usr2/fs/misc/dbbc_equip '1 1 1 1' equip.ctl

          If you have three Conditioning modules and one Core board on
          the first two modules and 2 on the third, use:

            cd /usr2/control
            /usr2/fs/misc/dbbc_equip '1 1 2' equip.ctl

          If you have two Conditioning modules and two Core boards on
          each, use:

            cd /usr2/control
            /usr2/fs/misc/dbbc_equip '2 2' equip.ctl

          If you don't have a DBBC, you can use:

            cd /usr2/control
            /usr2/fs/misc/dbbc_equip '1 1 1 1' equip.ctl

        Please note that the number of DBBC IF power conversion
        factors, which are in the next non-comment line (22) in the
        file, must agree with the number of fields (and therefore
        number of Conditioning modules that they imply) on the new
        non-comment line 21.  This probably is already correct if
        either (i) you have a DBBC or (ii) you don't have a DBBC, but
        used the default example for this line in our equip.ctl and
        you used the example for the no DBBC case above.  The script
        will warn about (but not change) the IF power conversion
        factors if they don't agree in number with the supplied number
        of Conditioning modules.

        Please also note that although this script adds comments
        explaining the new line 21, it does not delete any comments
        about the old one (unless they exactly match the previous
        default comment).  It is recommended that you delete any old
        comments by hand.

        If the current specified rack type in equip.ctl is 'dbbc' or
        'dbbc/fila10g', this script will change them to 'dbbc_ddc' or
        'dbbc_ddc/fila10g' respectively.  Please note that it will not
        change any alternative rack types in comments.  If you have
        any of those, they will need to be changed by hand.

     B. This update is only required for stations that use DBBCs and
        set their default equipment for DRUDG in the skedf.ctl file.
        If the DBBC or DBBC/FILA10G values are used in the 'equipment'
        keyword in the file, they must be changed to DBBC_DDC or
        DBBC_DDC/FILA10G, respectively, to retain the same
        functionality.

     C. This update is only needed if you have a FiLa10G.  Fila10G
        configuration initialization is now integrated into FMSET.
        This is intended to make this easier to manage and to reduce
        the chances of forgetting to send the initialization before
        syncing.  This is supported with the
        '/usr2/control/fila10g_cfg.ctl' control file.  An example file
        can be found in

          /usr2/fs/st.default/control/fila10g_cfg.ctl

        which basically implements the (uncustomized) contents of the
        old example 'fila10g_cfg' procedure (which is no longer
        included).  You should set up your own version with the
        configurations you want, customized for your station.  The
        syntax of the file is described more fully in the example
        file, but the basic features are:

          -up to 21 different configurations can be defined
          -each configuration definition starts with a '$config name'
           line
          -'name' is a unique string of up to 16 non-whitespace
           characters to identify the configuration
          -after the '$config name' line there can be an arbitrary
           number of commands for the set-up of that configuration
          -the commands are "raw" fila10g commands, i.e., no leading
           'fila10g=', maximum command length is 128 characters
          -embedded white-space is allowed in the commands, but trailing
           white space is trimmed
          -all lines starting with asterisks ('*') are comments, which can
           appear anywhere
          -no blank lines or lines that start with whitespace are allowed
          -an empty file and configurations with no commands are allowed
           (but not of any clear value)

        It is recommended that the names used to identify the
        configurations be easy to distinguish so that when this
        feature is used it is easy to pick the appropriate one.

        Once the file is set-up, in FMSET you can select 's' and after
        confirming that you do want to sync and whether you want to
        also sync the DBBC, you will be offered a list of the
        available configurations.  You can select the configuration by
        entered its displayed number, or enter '0' or just hit <Enter>
        for none.

     D. This update is only required for stations that use the DBBC
        PFB personality and want to use 'vsi_align=...' commands in
        the DRUDG generated set-up.  Apparently what value to use in
        the command may be system dependent.  Please contact Gino
        Tuccari (g.tuccari@ira.inaf.it) if you have questions.

        This is supported using a new keyword available in the $misc
        section of skedf.ctl: 'vsi_align'. It controls whether (and
        the contents) for DBBC_PFB and DDC_PFB/FILA10G systems DRUDG
        inserts a dbbc=vsi_align=... command, after 'form=flex' in
        each setup procedure.  The keyword supports values:

          none   - do not insert a dbbc=vsi_align=... command
          0      - insert dbbc=vsi_align=0 command
          1      - insert dbbc=vsi_align=1 command
          ask    - prompt for each schedule whether to use 'none', '1',
                   or '2'

        If the keyword is no present, the effect is the same as
        'none'.

        An example can be found in:

          /usr2/fs/st.default/control/skedf.ctl

        Please add the 'vsi_align' keyword with appropriate value to
        your skedf.ctl if it is needed.

(13) Update your procedure files.  The first update (A.) is for all
     stations.  It finds and fixes a certain structural error in .prc
     files.  The second one (B.) is only for stations with DBBCs.

     A. Sometimes due to errors (possibly caused during manual
        editing, instead of using PFMED), the 'define' statements in
        .prc files can be damaged.  This can lead to other problems
        including causing the contents of procedures being logged
        every time they are executed.  This version of the FS includes
        a script to help fix such errors.  If the fix is needed,
        please refer to sub-section '7. Fix .prc file 'define' lines'
        in section 'IV. Reference Appendix for Installation'.

     B. This update is only for stations with DBBCs.  It is not
        required, but strongly recommended, especially if you do use
        different DBBC personalities (DDC or PFB) or a different
        calibration mode (continuous or non-continuous).  At the very
        least making this change will 'future proof' your system for
        changes in how it is used.  More generally, it will greatly
        simplify the management of your station procedures by unifying
        them for both personality types and both calibration modes.

        The specific standard procedures that have changed are:

          ifman
          ifagc
          preob
          caltsys
          midob
          iread
          bread

        Examples of the new versions of these procedures can be found in

          /usr2/fs/st.default/proc/dstation.prc

        You can 'diff' this file against the version for 9.11.8 to see
        the changes.  Please use PFMED to edit the necessary changes
        into your station procedure library.

(14) If you want to use fesh and/or plog scripts to fetch/DRUDG IVS
     schedules and push IVS logs to the servers, you will need to set
     them up.  Please note these are preliminary versions, we would
     appreciate any feedback.

     The setup requires setting the environment variable STATION,
     which should contain just your station's two letter code (lower
     case).  If you want to use a data center other than CDDIS as the
     default, set the DATA_CENTERS environment variable.  The
     DATA_CENTERS variable would contain the data centers (upper case)
     you want to upload to by default, space separated.  Normally, you
     should just one IVS data center: BKG, CDDIS, or OPAR.  However,
     if you are a VGOS station, you may be requested to add HAYSTACK.
     The choice of data centers for plog is also settable on the
     command line.  The environment variables should be set in oper's
     .login (tcsh) or .profile (bash) file.

     You will also need to set up the ~oper/.netrc file if you will
     use for CDDIS and OPAR.  If you use Haystack, scp is used to copy
     the files.  This means you need to have the oper SSH key on
     evlbi1.haystack.mit.edu and the private key must either be
     un-encrypted (i.e. password-less) or added to oper's sessions
     ssh-agent by using ssh-add.

     Please see "fesh -h" and "plog -h" for more details.

(15) Test the FS as 'oper'.  Generally speaking a fairly thorough test
     is to run a test experiment: start with DRUDG-ing a schedule,
     making listings, and any other pre-experiment preparation you
     normally do, then execute part of schedule, and perform any
     normal post-experiment plotting and clean-up that you do.  The
     idea here is to verify that everything works as you expect for
     normal operations.  In particular for this upgrade you should
     test that Mark 5 operations work as expected.

(16) If you are using Linux distributions FSL7, FSL8, or FSL9, you
     should ask your system administrator to update any system
     'refresh*' scripts that you are using.  The details of what
     changed are included in the #28 of the list of FS changes in this
     document.

(17) Consider when to update your back-ups.  You certainly should not
     update them until you have performed the tests described above.
     It would be prudent to wait until you have successfully run an
     experiment or two and preferably received word that the
     experiment(s) produced good data.  The chances of needing to use
     your back-up should be small.  If something does happen, you can
     copy the back-up to the (now assumed bad) updated disk.  You can
     then either use the restored disk or apply the FS update again.
     Managing this is a lot safer if you have a third disk.


III. Changes Since Version 9.11.8

This section is divided into three sub-sections: A. Changes in the FS,
B. Changes in DRUDG, and C. Known FS Bugs.  Each sub-section starts
with a summary of the items covered followed by a more detailed
description.

			 A. Changes in the FS

The following is a summary of FS changes since 9.11.8.  Items 1 to 28
were new with 9.11.17.  Items numbered 29 to 33 were added in
9.11.18. Items number 34-38 were added in 9.11.19.

 1. Support for DBBC PFB firmware versions v15 and v16.
 2. Unification of DBBC station procedures for both DDC/PFB and
    continuous/non-continuous calibration.
 3. New 'if' command for conditional execution of commands.
 4. The FMSET program can now configure a FiLa10G.
 5. The 'scan_check' command will issue a warning, not an error, if
    there are missing bytes for the 5C or FlexBuff recorders.
 6. The HOLOG program has been updated to make it more useful.
 7. The Tsys display program, monit3, will not display Tsys values for
    DBBC channels and IFs that are not being recorded.
 8. TNX command now better supports 'variable' message error messages
    defined internally in the FS code and UNIX system errors.
 9. Positive error numbers (warnings) no longer generate a bell on the
    operator display.
10. Parentheses were added to all calculated quantities in the FS
    source include file dpi.h.
11. In FMSET a benign command is sent after every 'pps_sync' for the
    DBBC when a Mark 5B recorder is selected.
12. The number of DBBC Cores in line 21 of 'equip.ctl' is now replaced
    with up to four numbers which are the Cores for each CoMo.
13. The 'mk5b_mode', 'bit_streams', and 'mk5c_mode' commands now
    support a 64-bit bit-mask.
14. The 'fila10g_mode' command now supports two 32-bit bit-masks for
    two VSI-H inputs.
15. Periodic DBBC version and personality checking.
16. New commands 'dbbcclose' and dbbcrelink' added.
17. The 'scan_check' command issues a warning and is a no-op if it is
    executed in a schedule before the second 'scan_name=...' command
    since the schedule was started.
18. Bug fixes and improvements in FSERR.
19. New script 'fix_define' to fix errors in 'define' lines in .prc
    files.
20. Bug in value of ONOFF cut-off angle fixed.
21. New external program 's_client' for socket communication added.
22. A sample file transfer script, 'cddis' for the _new_ cddis is
    included.
23. Class-I/O deadlock is no longer possible.
24. The FS tolerates DOS line terminations in .prc and .snp files and
    operator input.
25. Errors in file opening from FORTRAN programs are now reported by
    standard log errors within the FS. 
26. Old FMGR/FMP file errors replaced with UNIX errors.
27. DDOUT now syncs the log to disk at most once per second.
28. The example 'refresh*' scripts for Linux distributions FSL7, FSL8,
    and FSL9 were updated.
29. Update note (this document) reorganized.
30. dbbc_equip script fixed.
31. Bug in scheduling utilities (skd_util.c) fixed.
32. The example 'cddis' transfer script updated to use the new
    operational server.
33. The 'fix_perm' script can now handle directory symbolic links for
    top level directories.
34. Bugs in the Mark IV "form" command and the CDP reciever "rx"
    command were fixed.
35. The "fesh" and "plog" scripts to fetch/DRUDG IVS schedules and
    push IVS log files, respectively, were added.
36. The "s_client" script was patched to allow it to execute correctly
    for Python 2.5 (woody).
37. Several small omissions in the example files provided in 9.11.18
    were fixed.
38. The Mark IV "form" command help file was updated to point out that
    the 16 Mbps track rate is problematic for use with Mark 5A
    recorders.

A more detailed discussion of these changes follows.

 1. Support for DBBC PFB firmware versions v15 and v16.  The rack
    types in equip.ctl for PFB use are 'dbbc_pfb' and
    'dbbc_pfb/fila10g'.  (Please note that the old 'dbbc' and
    dbbc/fila10g' rack types are now 'dbbc_ddc' and 'dbbc_ddc/fila10g'
    respectively.)

    PFB channels for recording are selected with the new 'vsi1=...'
    and 'vsi2=...' commands.  The format code 'flex' ('form=flex')
    must be used for PFB recording.

    The PFB power data from the Core boards, returned by DBBC
    'power=N' commands can be logged via the new 'pfbN' commands, when
    'N' is the number of the Core board (1...4).  The output shows the
    raw results for each board, which is in different formats for v15
    and v16.

    Channel and detector device names for PFB use the form 'xn', where
    'x' is one of 'a', 'b', 'c' or 'd' for the IF the Core board is
    connected to, and 'n' is 0-15 for the channels on the first Core
    board on that IF, 16-31 for the ones on the second (if more than
    one), etc.  Note that there are no detectors '0', '16', etc. and
    these channels are not generally useful for recording.  The
    'formif' and 'formbbc' detector names are supported (with the
    "BBCs" being the PFB channels being recorded).  The 'tpicd'
    background TPI count recording daemon supports recording the PFB
    (non-continuous) power data.  ONOFF and FIVPT support the
    (non-continuous) PFB detectors.  The gnplt program (and gndat)
    supports the longer device names that are used.

 2. Unification of DBBC station procedures for both DDC/PFB and
    continuous/non-continuous calibration.  This allows one set of
    stations procedures to be used with all combinations of firmware
    personalities and calibration.  This is accomplished primarily by
    the use of the new 'if' command, which is discussed next.  The
    new, unified, example standard DBBC station procedure file is
    /usr2/fs/st.default/proc/dstation.prc.  A consequence of this
    change is that the DBBC 'bread' and 'iread' procedures will not
    work correctly until the DBBC has been set-up *and* the recording
    bit-mask set (this was already true for the Tsys procedures).

 3. New 'if' command for conditional execution of commands.  This
    command accepts up to three arguments.  The first is a condition
    to test on.  A limited number of conditions (virtually all related
    to DBBC configuration) are available.  More conditions can be
    added in the future as needed and/or requested.  The second is the
    command to execute if the condition tests 'true'; the third is the
    command for 'false'.  So that commas (and at signs, '@') can
    included in the second and third arguments, they can be 'quoted'
    with a backslash character. Please use 'help=if' for a detailed
    discussion of the command and examples of quoting commas.  Thanks
    to Jonathan Quick (HartRAO) for suggesting this command.

 4. The FMSET program can now configure a FiLa10G.  It will prompt the
    operator to select from a set of choices of configuration commands
    to send to the FiLa10G before it is synced when 's' is selected.
    The choices and commands are defined locally in
    /usr2/control/fila10g_cfg.ctl.  An example file that includes
    comments that explain the format can be found in
    /usr2/fs/st.default/control/fila10g_cfg.ctl.  The operator can
    skip sending the configuration step by just pressing <Enter> at
    the prompt.

 5. The 'scan_check' command will issue a warning, not an error, if
    there are missing bytes for the 5C or FlexBuff recorders.
    Apparently for some these systems it is not possible for get zero
    missing bytes.  This feature is likely to change in a future
    release.

 6. The HOLOG program has been updated to make it more useful.  It now
    can be used to make a single cut in either azimuth or elevation,
    the furrows can be selected to be along elevation instead of
    azimuth, and the 1/cos(el) correct for azimuth offsets can be
    disabled.  The latter is particularly useful for taking data for
    developing horizon masks.

    There is also a set of scripts to assist in making horizon masks
    from HOLOG data with MATLAB in /usr2/fs/holog/MASK.  Currently,
    this set-up is for use with RDBEs only.  However, other rack types
    can be used if appropriate 'maski' (initialization) and 'maskp'
    (measurement) procedures are provided.  A script corresponding to
    'holog_rdbe' for the used detector type must be developed to
    extract the data from the log into a column oriented flat
    file. Making a modified version of 'holog_rdbe' might be the
    easiest way to do that.  The rest of the tools are rack
    independent. Please see /usr2/fs/holog/MASK/mask-HOWTO.txt for
    full details.

 7. The Tsys display program, monit3, will not display Tsys values for
    DBBC channels and IFs that are not being recorded.  This should
    clean-up the display when the mode changes and make clearer which
    channels are worth monitoring.  This change means that no Tsys
    data will displayed until the DBBC has been set-up *and* the
    recording bit-mask is set.

 8. TNX command now better supports 'variable' message error messages
    defined internally in the FS code and UNIX system errors.  Please
    see 'help=tnx' for details.

 9. Positive error numbers (warnings) no longer generate a bell on the
    operator display.  This feature of the FS had been broken sometime
    in the past.  It has now been restored.

10. Parentheses were added to all calculated quantities in the FS
    source include file dpi.h.  This is to prevent potential errors
    when the quantities are used in further calculations.

11. In FMSET a benign command is sent after every 'pps_sync' for the
    DBBC when a Mark 5B recorder is selected.  The last command in the
    DBBC's buffer may get re-executed and an extraneous 'pps_sync'
    could have negative consequences.  The command 'dbbcifa', which is
    benign and should be available in every DBBC, is used.  This is
    not needed when a FiLa10G is in use.  Additional commands are sent
    in that case anyway.

12. The number of DBBC Cores in line 21 of 'equip.ctl' is now replaced
    with up to four numbers which are the Cores for each CoMo.  A
    script, 'dbbc_equip' is provided to simplify making this update as
    well correcting DBBC equipment type for the new format.

13. The 'mk5b_mode', 'bit_streams', and 'mk5c_mode' commands now
    support a 64-bit bit-mask.  For Mark 5B recorders only the least
    32 bits are useful.

14. The 'fila10g_mode' command now supports two 32-bit bit-masks for
    two VSI-H inputs.  The new version is not backward compatible with
    previous usage, but is parallel to the device's operation.
    Existing .prc files that use the syntax of the previous version of
    this command will not work properly.  Additionally, an error will
    be reported if the most significant 32 bit-mask (bits 32-63) is
    commanded with only one VSI-H input selected in 'equip.ctl'.

15. Additional and periodic DBBC version and personality checking.
    The version checking in the 'form=...' command has been expanded
    to report personality mismatches between equip.ctl file and the
    DBBC.  In addition, CHEKR now checks the firmware and personality
    every 20 seconds.  This is intended to make a mismatch more
    visible, since the error might be overlooked if it occurs only
    during (possible infrequent) scan set-ups.  Thanks to Jonathan
    Quick (HartRAO) for suggesting the use of CHEKR.

16. New commands 'dbbcclose' and dbbcrelink' added.  These parallel
    operation of the existing 'mk5close' and 'mk5relink' commands for
    Mark 5 communications to provide a capability to close and reopen
    the DBBC link without terminating and restarting the FS.  Thanks
    to Jonathan Quick (HartRAO) for pointing out that this
    functionality was missing.

17. The 'scan_check' command issues a warning and is a no-op if it is
    executed in a schedule before the second 'scan_name=...' command
    since the schedule was started.  This is intended to remove a
    spurious error if a schedule is joined after the first
    observation.  This behavior can be overridden with a 'force'
    parameter.  A 'scan_check' is always executed normally when a
    schedule is not running.  See 'help=scan_check' for details.

18. Bug fixes and improvements in FSERR.  A bug was fixed that caused
    an old error to be reported a second time if the decode of a new
    error mnemonic/number failed.  This condition could only occur due
    to a programming error and was very rare, if it even ever
    occurred.  The error reporting on initialization was improved to
    make it easier to locate format errors in the fserr.ctl and the
    sterr.ctl control files on start-up,

19. New script 'fix_define' to fix errors in 'define' lines in .prc
    files.  This script can be used to correct errors in the format of
    the 'define' lines in .prc files.  Such errors can come about due
    to manual editing of .prc files.  A consequence can be that the
    corresponding procedure is logged every time it is used instead of
    only the first time it is used after the log file is changed or
    after the procedure has been changed.  The script will by default
    make minimal changes, but a flag can be used to put all the
    'defines' in canonical form.  This script should not be run on
    .prc file the FS has open and will not execute if the FS is active
    unless a override flag is set.  The script includes a flag to run
    in 'test' mode which will not make any changes but will display
    all changes it would make. Please execute:

      /usr2/fs/misc/fix_define -h

    for more information.

20. Bug in value of ONOFF cut-off angle fixed.  The setting, display,
    and use of the cut-off angle was not correct, but was largely
    benign.  It has been fixed.  Thanks to Giuseppe Maccaferri for
    reporting this.

21. New external program 's_client' for socket communication added.
    If python 2.7 is available, this program can be used in 'sy=...'
    commands for simple ASCII transactions with devices over Ethernet
    sockets.  Please see 'help=sy' for more information.

22. A sample file transfer script, 'cddis' for the _new_ cddis is
    included.  Please note that is not for the existing cddisin
    incoming server.  As of October 10, 2016, the new cddis system is
    only available for testing.  There will be announcement when it
    becomes operational.

23. Class-I/O deadlock is no longer possible.  Changes were made to
    class-I/O emulation services and in DDOUT, FSERR, ERCHK, and STERP
    to prevent class-I/O deadlock from occurring.  Also an error will
    not occur if the class-I/O system is full when a write occurs,
    instead the system will wait until there is room.  Such errors
    occurred only rarely in high rate date logging situations.  This
    change requires two modifications be made to any local STERP or
    ERCHK programs:

    (1) The method for retrieving the error report needs to be changed
        to use the new version of get_err.c in the example program
        source in /usr2/fs/st.default/st-0.0.0/sterp or /usr2/fs/erchk
        (they are identical).

    (2) The program must not use the class-I/O system.  Particularly,
        it must not use any of the logit*() family of routines to
        report any errors internal to the program.  It must use its
        own separate reporting system for internal errors.

24. The FS tolerates DOS line terminations in .prc and .snp files and
    operator input.  Previously, it only tolerated DOS line
    terminations in .skd and .vex files, which, via DRUDG, are
    considered the only supported input to the FS.  However, to assist
    stations that are using special purpose files created on
    MS-Windows computers, this has been extended to .snp and .prc
    files.  Both BOSS and PFMED will handle these files, but PFMED
    will replace any DOS line terminations with UNIX line terminations
    whenever a .prc file is updated.  Thanks to Alexander Neidhardt
    for suggesting this.

25. Errors in file opening from FS FORTRAN programs are now reported
    by standard log errors within the FS.  Since moving to UNIX, more
    than two decades ago, such errors in BOSS, INCOM, and AQUIR had
    been reported via terminal output.  These errors have been
    re-integrated into the FS log system, making them visible in the
    logs.  Stand-alone programs such as LOGEX, XTRAC, ERROR, RESID,
    SIGMA, and PCALR (in stand-alone mode), still report file open
    errors with terminal output.  Other non-opening I/O errors in
    FORTRAN programs with the FS are still reported via the terminal.
    Those errors are more rare, but will to be integrated into the log
    system eventually.

    Local FORTRAN programs that use the fmpsee library, particularly
    the fmpopen() routine should be modified to call
    fmperror_standalone_set() at the start of the main program.  The
    routine should be called with an argument of '0' if the program is
    part of the normal execution of the FS and should report errors
    via the logging system, e.g.,:

      call fmperror_standalone_set(0)
 
    If the program is a standalone utility run by the user, it should
    call the routine with an argument of '1', so that errors are
    reported on the terminal. e.g.,:

      call fmperror_standalone_set(1)
 
26. Old FMGR/FMP file errors replaced with UNIX errors. Since the FS
    was moved to UNIX, more than two decades ago, these file errors
    were not reported as clearly as before.  This change re-integrates
    the logging of these errors with the higher level error message
    about the cause for improved clarity.  In the future, other system
    errors, such as in Mark 5 and DBBC communication, will be
    integrated into this approach.

27. DDOUT now syncs the log to disk at most once per second.  The old
    approach, which was to sync after every log line was written, can
    cause the system to become slow and unresponsive if log entries
    are being written at a high rate, such as over 100 per second
    continuously.  The new approach alleviates that problem with
    relatively minor risk of losing log data in the event of a FS or
    system crash.  With a one second sync interval there was no
    apparent slow down compared to not syncing at all.

28. The example 'refresh*' scripts for Linux distributions FSL7, FSL8,
    and FSL9 were updated.  All of the scripts now include 'set -e' to
    cause them to stop if an error is encountered.  The FSL9
    'refresh_secondary(.sd)*' scripts were updated to include the
    '--recheck' option for 'grub-install' to update
    /boot/grub/device.map. 

    The FSL9 'refresh_spare_usr2(.9)' script was updated to properly
    initialize the re-created /usr2 partition.  The older version did
    not work for FSL9.  The new version will also now abort if '/usr2'
    is not already mounted to avoid placing the data incorrectly on
    the root partition, possibly filling it.

    If you use FSL7, FSL8, or FSL9, you should identify which versions
    of these scripts you use and update them appropriately.

29. Update note (this document) reorganized.  The result is more
    streamlined for users who are already familiar with installing FS
    upgrades, while maintaining additional information for new users.

30. dbbc_equip script fixed.  The script, which can be used to
    re-write the equip.ctl control file for changes made in version
    9.11.17, now works.  Additionally, it has been enhanced to warn if
    there is mismatch between the number of CoMos and the number of IF
    power conversion factors.

31. Bug in scheduling utilities (skd_util.c) fixed.  A bug is the
    internal program scheduling utilities that caused the local
    program 'sterp' to fail when given a error message longer than 256
    characters was fixed.

32. The example 'cddis' transfer script updated to use the new
    operational server.  The script can be found in /usr2/fs/misc.  It
    may be helpful as an example for uploading logs and other files.

33. The 'fix_perm' script can now handle directory symbolic links for
    top level directories.  The script can be found in /usr2/fs/misc.
    It may be helpful for fix the ownership and permissions of
    operational files to avoid file access errors during operations.

34. Bugs in the Mark IV "form" command and the CDP receiver "rx"
    command were fixed.  These bugs caused annoying but benign
    incorrect ERROR warning messages to be printed.  Thanks to
    Alexander Neidhardt, Christian Plotz, and Gerhard Kornschnabl at
    Wettzell for reporting this.

35. The "fesh" and "plog" scripts to fetch/DRUDG IVS schedules and
    push IVS log files, respectively, were added.  The scripts are
    intended to simplify getting schedules and DRUDG-ing them and
    upload logs.  They both use environment variables, which can be
    set in the oper .login file.  For upload, it is usually necessary
    to set-up the .netrc file for the destination.  The scripts have
    several options so that they can be used for several tasks.
    Please use "fesh -h" and "plog -h" for more details on their use.
    Please note these are preliminary versions, we would appreciate
    any feedback.

36. The "s_client" script was patched to allow it to execute correctly
    for Python 2.5 (woody).  There was an issue in message for an
    error condition that was fixed.

37. Several small omissions in the example files provided in 9.11.18
    were fixed.  The fixes include: fs9119up.txt was added, DDBC
    equipment examples in /usr2/fs/st.default/skedf.ctl were updated,
    MIDOB in /usr2/fs/st.default/proc/dstation.prc was updated for the
    unified DBBC procedures, and added link for source archives for
    "critical" updates in the update notice.

38. The Mark IV "form" command help file was updated to point out that
    the 16 Mbps track rate is problematic for use with Mark 5A
    recorders.  The cables that carry the signals from the formatter
    are not designed for such a high rate and may be very sensitive to
    routing.

A history of the various changes and the routines they affect is in
/usr2/fs/misc/changes.txt.

			 B. Changes in DRUDG
				   
DRUDG opening message date is 2016Nov29.

The following is a summary of DRUDG changes since 9.11.8.  Items
numbered 1 to 5 were new in 9.11.17.  Items numbered 6 to 8 were added
in 9.11.18.  The item numbered 9 was added in 9.11.19.

 1. Support for four DBBC racks types.
 2. First recorder unrecognized bug fix.
 3. New skedf.ctl keyword vsi_align.
 4. VSNs for non-bank mode Mark5C recording.
 5. Several internal changes.
 6. Fixed unrecognized racks causing IF configuration to be lost.
 7. Accept racks types DBBC and DBBC/FILA10G for backward
    compatibility.
 8. The equipment type is now handled as case insensitive in all
    situations.
 9. Fixed bugs affecting .skd schedule files with sample rates for a
    mode that did not agree with Nyquist sampling rate of the channel
    BWs.

A more detailed discussion of these changes follows.

 1. Support for four DBBC racks types.  The previous DBBC rack types
    are replaced by DBBC_DDC and DBBC_DDC/Fila10g.  In addition a new
    PFB personality was introduced which is indicated by rack types
    DBBC_PFB, and DBBC_PFB/FiLa10g.  The commands emitted for DDC and
    PFB differ.  For PFB DRUDG will not emit BBC commands, but will
    emit 'vsiX=...' commands.  For PFB, the recording order of the
    channels is determined by sorting the IFs alphabetically and then
    by sorting (increasing) by BBC number within each IF.  BBC numbers
    can be reused, and typically are, for different IFs.

 2. First recorder unrecognized bug fix.  Previously if DRUDG did not
    recognize the first recorder it would assume, due to convoluted
    logic, that the schedule used the second recorder.  This lead to
    DRUDG producing incorrect .prc files.  Now DRUDG always assumes
    that the schedule starts with recorder one, even if it does not
    know what recorder this is.

 3. New skedf.ctl keyword 'vsi_align'.  This keyword affects the
    output only for the DBBC PFB personality.  It takes one of
    following values: '0', '1', 'none', or 'ask'.  If the keyword is
    missing in skedf.ctl, the result is the same as 'none'.  If the
    value is 'ask' DRUDG will prompt the user at run time for the
    value for each mode. If the value specified is '0', then DRUDG
    will emit the command 'dbbc=vsi_align=0' (and similarly for '1').

 4. VSNs for non-bank mode Mark5C recording.  DRUDG assumes that for a
    Mark 5C non-bank mode is used if the recording rate is greater
    than 2 Gbps.  Since non-bank mode is not fully supported yet by
    the FS and jive5ab and in order to record the VSNs of the modules
    and the disk serial numbers, DRUDG will emit the commands:
    'jive5ab=vsn?'  and 'jive5ab=disk_serial?'.  The resulting
    information will be recorded redundantly every scan even if they
    haven't changed since previous scan.  Although this results in
    unnecessary output, it is the expedient way to record this
    necessary information and recording rates greater than 2 Gbps is a
    relatively uncommon situation.  This expediency will be removed
    when non-bank is fully supported.

 5. Several internal changes.  There were numerous internal changes
    that should be transparent to the user, but were required because
    of the above changes.  These include: a) increasing the size of
    the name for the racks from 12 characters to 20 character; b)
    increasing an array that holds the maximum number of tracks to 64
    to accommodate two bit recording of 32 PFB channels, which uses
    the same 'track' (channel) for sign and magnitude in the VEX file
    but are internally different tracks in DRUDG, and c) increasing
    the maximum number of BBCs to 32.

 6. Fixed unrecognized racks causing IF configuration to be lost.  A
    bug in DRUDG that caused it to lose the IF configuration when the
    scheduled specified an unrecognized rack type, even when the rack
    type was later set correctly by the user.  This has been fixed.

 7. Accept racks types DBBC and DBBC/FILA10G for backward
    compatibility.  An enhancement was added to DRUDG for backward
    compatibility with schedule files.  It now recognizes the obsolete
    DBBC and DBBC/FILA10G rack types in schedule files and maps them
    to DBBC_DBBC and DBBC_DDC/FILA10G rack types respectively.

 8. The equipment type is now handled as case insensitive in all
    situations.  Previously, there was a bug that could prevent DRUDG
    from handling the equipment type as case insensitive.  It is not
    believed that this error occurred commonly.

 9. Fixed bugs affecting .skd schedule files with sample rates for a
    mode that did not agree with Nyquist sampling rate of the channel
    BWs.  Only one sample rate is allowed per mode in .skd schedule
    files.  However, different stations (and even different channels
    at a station) can have different BWs within a mode.  These bugs
    effectively prevented the "R" record in $CODES for the mode from
    controlling the sample rate.  Instead the Nyquist sample rate of
    the first BW encountered for the mode in the $CODES section
    controlled the sample rate.  It seems unlikely that this bug was
    ever encountered in normal operations, at least recently.  DRUDG
    support for VEX schedule files was unaffected.  DRUDG continues to
    supported different sample rates at different stations in the same
    mode for VEX schedule files.

A history of the various changes and the routines they affect is in
/usr2/fs/drudg/change_log.txt.

			   C. Known FS Bugs

(The only change in this section since the previous version is the
addition of items #13 and #14.)

The following is a summary list of known bugs. They are described in more
detail after the list.

 1. Do not run 'fmset' for extended periods.
 2. 'odd' and 'even' head types not supported for Mark IV & VLBA4.
 3. 'odd'/'even' head types not supported for VLBA style tapeforms.
 4. CHEKR does not check the status of the Mark IV formatter or Mark 5
    recorder.
 5. Extraneous errors when tape is stopped by low tape sensor.
 6. 'Comm=' command in logex extracts only the first command.
 7. S2 error scheme clumsy.
 8. No extra spaces allowed in 'ibad.ctl' file.
 9. ONOFF and FIVPT programs hang.
10. FS SNAP command pages don't list tape drive suffix numbers.
11. LBA rack TPI detector is not usable.
12. mk5b_mode and bit_stream commands only report the expected sample
    rate.
13. Some fmpsee routines do not report file I/O error through the log
    system.
14. Some systems calls, particularly in mk5cn and dbbcn, use separate
    UN errors to elaborate on errors in system calls.

A more detailed discussion of these bugs follows.

 1. Do not run 'fmset' for extended periods.  For stations that have
    formatter that can be set with 'fmset', the program should not be
    run for extended periods of time.  The 'fmset' program should be
    used only to set or briefly verify that the formatter time is
    correct.  Do not leave 'fmset' running after completing either of
    these tasks, especially during an experiment.

    The 'fmset' program dominates the Field System when it is running
    and this is likely to interfere with the running of an experiment
    or other activities.  The only way to detect the time from the
    VLBA formatter with greater precision than one second it to wait
    for the seconds response from the formatter to change.  This
    requires the FS to communicate with the formatter almost
    continuously.  A similar problem exists for the S2 recorder.  This
    problem is less severe for other formatters, but extended use of
    'fmset' in this case should be avoided as well.  A reminder about
    this is included in the 'fmset' menu.

 2. 'odd'/'even' head types not supported for Mark IV & VLBA4.  The
    Mark IV and VLBA4 rack version of the 'form' command and the Mark
    IV and VLBA4 recorder versions of the 'repro' and 'parity'
    commands do not support the 'odd' and 'even' parameters for the
    read and write head types and reproduce electronics in the
    'head.ctl' control file.  This means that automatic substitution
    of odd or even head in passes that use only even or odd heads
    respectively does not occur.  The only correct settings for the
    read and write head parameters and reproduce electronics is 'all'.
    This will be fixed in a future revision.  Please let Ed know if
    you are missing some tracks and need to work around this
    limitation.

 3. 'odd'/'even' head types not supported for VLBA style tapeforms.
    For any mode recorded with VLBA style tapeform (14 index
    positions), the only correct setting of the read and write head
    types on the 'head.ctl' is 'all'.  This will be fixed in a future
    revision.  Please let Ed know if you are missing some tracks and
    need to work around this limitation.

 4. CHEKR does not check the status of the Mark IV formatter or Mark 5
    recorder.  Now that most communication problems with the Mark IV
    formatter have been solved, this will be possible and will be done
    in the future.  CHEKR support will be implemented for Mark 5
    despite communication problems, they will have to be ignored
    unless they extend beyond a certain amount of time.

 5. Extraneous errors when tape is stopped by low tape sensor.  When a
    tape drive has been commanded to move the tape and then stops
    because it hit the low tape sensor (or when S2 recorders hit the
    BOT or EOT), 'CHEKR' will complain periodically that the tape
    drive is not in the correct state.  In principle the FS should be
    smarter about this.  However, if the tape is managed correctly by
    the schedule this error message should never occur.  If it does,
    then it it an indication that there is either a problem with: (1)
    the schedule, (2) the check procedures, (3) the recorder, or (4)
    the tape is too short.  If any of these cases apply they should be
    corrected.  It is more likely that this error message will occur
    when the tape is being controlled manually.  In this case, issuing
    an 'ET' command will convince the FS that the tape drive should be
    stopped and the error message will cease.

 6. 'Comm=' command in logex extracts only the first command.  The
    'Comm=' command in 'logex' extracts only the first command
    commanded and displayed.  This problem was noted by Giuseppe
    Maccaferri (Medicina).

 7. S2 error scheme clumsy.  The error and status response number
    reporting scheme for S2 recorders is clumsy.  FS errors that have
    mnemonic 'rl' are mostly error responses from the recorder or the
    RCL interface library that is used to communicate with the
    recorder.  If the numeric part of an 'rl' error is greater than
    -130, then it is the error code returned by the recorder.  If the
    numeric part is less than -130, but greater than -300, then add
    130 to the value, the absolute value of the result is the error
    response code from the RCL library.  For values less than or equal
    to -300, a FS error has been detected.  Status response codes are
    all reported with mnemonic 'rz' and the numeric value is the
    negative of the status response code.  In all cases an appropriate
    error or status message is displayed.  These messages are retained
    in the log.

 8. No extra spaces allowed in 'ibad.ctl' file.  The format of the
    'ibad.ctl' must not contain any leading or embedded spaces.  In
    systems that use the LLP AT-GPIB driver (pre-FS Linux 4), if
    either the option 'no_untalk/unlisten_after' is misspelled or an
    incorrect device name is supplied, the driver will cause a
    segmentation violation when it is initialized and the FS will
    terminate.  Unfortunately there is no way to prevent this problem
    in a general way; it reflects a limitation in the driver.

 9. ONOFF and FIVPT programs hang.  The ONOFF and FIVPT programs have
    been known to 'hang' mysteriously.  This seems to be caused by
    some problem with the 'go' mechanism that is used to restart the
    program when it pauses to allow a SNAP procedure, such as CALON or
    CALOFF to execute.  The 'go' that is used to restart the program
    fails for some reason.  This has been exceedingly difficult to
    debug because it is intermittent and fairly rare.  There is
    however a good work around for it.  The CALON and CALOFF
    procedures are called by procedures CALONFP and CALOFFFP for FIVPT
    and CALONNF and CALOFFNF for ONOFF.  FIVPT or ONOFF may hang
    during (or actually just after) the execution of one these
    procedures that FIVPT and ONOFF will typically hang.  If this
    happens, you will have to terminate the FS to recover.  You can
    prevent it from happening again (for this procedure) by adding the
    lines:

      !+1s
      sy=go fivpt &

    to the end of CALONFP or CALOFFFP.  For CALONNF and CALOFFNF,
    please add:

      !+1s
      sy=go onoff &

    If you see other situations where FIVPT or ONOFF hang, please let
    Ed know.

10. FS SNAP command pages don't list tape drive suffix numbers.  The
    FS SNAP manual pages and the help pages available through the
    'help=' command do not reflect when multiple versions are
    available with different suffixes depending on the number of drive
    specified in the control files.  For example, there is only a
    'tape' page, no 'tape1' or 'tape2' page.  However, the help
    facility will display the version of the command with no suffix
    when an available command with a suffix is used.  For example, if
    two drives are defined, then 'help=tape1' and 'help=tape2' will
    work, but 'help=tape' will not and vice-versa if only one drive is
    defined.

11. LBA rack TPI detector is not usable.  The Australian LBA Data
    Acquisition System currently lacks a functional total power
    detector though support has been included.  To allow approximate
    system temperature calibration, all the setup commands and the TPI
    detectors of the modules of a co-existing Mark IV rack are
    currently also available when the rack type is specified to be
    LBA4.

12. mk5b_mode and bit_streams_commands only report the expected sample
    rate.  The value of the actual clock rate is not read back from
    the recorder in order to calculate the actual effective sample
    rate.  Consequently, the query log output includes parenthesis
    around the sample rate as indication that it is not read, but
    expected.  The mk5c_mode command does report the actual sample
    sample rate.

13. Some fmpsee routines do not generally report file I/O error
    through the log system for programs within the FS, specifically
    BOSS, INCOM, and AQUIR.  The fmpopen() routine does use the log
    system to report errors.  Those are the most common errors.
    However other routines report errors with terminal output.  These
    other routines should eventually use the log system.

14. Some systems calls, particularly in MK5CN and DBBCN, use separate
    UN errors to elaborate on errors in system calls.  These should
    eventually be integrated into the main error message, but whether
    this makes the errors messages too long (maximum 120 characters)
    should be considered.


IV. Reference Appendix for Installation

This appendix collects several topics that are useful for installation
in general, but are usually not needed for routine updates.

       1. Upgrading from FS versions before the previous stable

If you are installing FS9 for the first time with this version, please
follow the installation instructions in Section 4.5 of the FS9
'Computer Reference' manual.  In this case you should also get a copy
of the current FS9 'Control Files and Field System Initialization'
manual.

For reference, the list of the most recent "critical updates" is given
below.  These are updates that must be applied sequentially.  Please
start with the next update with a later version number than what you
have and apply it and the following listed versions before upgrading
to 9.11.19.  You can find the latest versions of installation notes
for these FS versions in the '/usr2/fs/misc' directory.  The list of
critical updates is:

  9.4.0
  9.5.3
  9.5.12
  9.6.9
  9.7.7
  9.9.2
  9.10.4
  9.11.6
  9.11.8

Strictly speaking you do not need to actually use the source archives
(.tgz files) of the previous versions.  You can just follow the steps
in the upgrade notices for the corresponding FS versions.  However, it
can be very helpful to actually install each version to help make sure
that all of the upgrade steps have been completed and that the FS will
run *and* to test it as described.  This can be particularly helpful
when the upgrade requires some modifications to your local programs.
So it probably best to actually install *and* test each version along
the way.  This is especially true if you have to upgrade through more
than one previous version.  Otherwise if a step was overlooked, it
might be hard to identify for which version the error was made.

You can find the archives for old versions at:

  http://lupus.gsfc.nasa.gov/fs/dist/old/

or

  http://www.metsahovi.fi/fs/dist/old/

If you have a version older than 9.3.13, please contact Ed
(Ed.Himwich@nasa.gov).

		    2. Example standard procedures

For reference purposes the naming convention for the default station
libraries for different equipment configurations is listed here.  The
files are found in /usr2/fs/st.default/proc.  They can be referred to
and compared to what you have in '/usr2/proc/station.prc'.

**ONLY** for new installations (or complete re-installs), you can copy
the default version for your equipment to '/usr2/proc' renaming it to
'station.prc' in the process, e.g.:

  cd /usr2/proc
  cp -i /usr2/fs/st.default/proc/3station.prc station.prc
  chmod a+rw station.prc

The '-i' option will prompt before overwriting an existing
'station.prc' to give you a chance to recover if you did not realize
you already had a station.prc file.  The table of correspondence
between equipment types and default library names is given next.

      Equipment        Prefix letters  Station Library
      Rack/Drive1/Drive2

      K42/K42              k42         k42station.prc
      K42K3/VLBA           k42k3v      k42k3vstation.prc
      K42MK4/VLBA          k42mk4v     k42mk4vstation.prc
      K42MK4/VLBAB/VLBAB   k42mk4vb    k42mk4vstation2.prc
      K42/K5               k42k5       k42k5station.prc
      LBA/S2               ls2         ls2station.prc
      LBA4/S2              l4s2        l4s2station.prc
      Mk3/Mk3A             3           3station.prc
      Mk4/Mk4              4           4station.prc
      Mk4/Mk5A             45          45station.prc
      Mk4/VLBA4            4v4         4v4station.prc
      Mk5/Mk5B             5           5station.prc
      NONE/S2              s2          s2station.prc
      VLBA/S2              vs2         vs2station.prc
      VLBA/VLBA            v           vstation.prc
      VLBA/VLBA2           v2          v2station.prc
      VLBA/VLBA/VLBA       v           vstation2.prc
      VLBA4/VLBA4          v4          v4station.prc
      VLBA4/MK5A           v45         v45station.prc
      VLBA4/VLBA42         v42         v42station.prc
      VLBA5/Mk5B           v5          v5station.prc
      DBBC/Mk5B            d           dstation.prc

If an example for your equipment type is listed, please let Ed
(Ed.Himwich@nasa.gov) know so that it can be added.

		  3. Cut-and-paste installation tips

You can use cut-and-paste to reduce the amount of typing involved in
the installation.  This reduces the chances of missing required spaces
and other easily missed characters (like '.') in the commands.  The
basic idea is to have two different terminals open, EITHER (preferred)
two different xterm terminals either on the local X display or
remotely logged in OR (more cumbersome) two different VT text
terminals (Control-Alt-F*, where * is 1-6) on the FS computer you are
upgrading.  You can then switch back and forth between the terminals,
reading the instructions as you scroll through them (with 'more' or
'less') on one terminal and entering commands on the other.  You can
cut-and-paste complicated commands from the terminal with the
instructions to the terminal where you are entering commands as
needed.  You can use 'ssh' or 'su' to "switch" to users as needed on
the terminal where you are entering commands. For example, you can
change to being 'prog' by executing:

 ssh -X prog@localhost

or

 su - prog

Please don't forget to log back out when you need to change users
again or you may develop a series of "nested" logins.  Any steps that
require rebooting will of course completely log out all of your
terminals; you will need to re-login again from scratch to continue.
At the end of the update, it is recommended that you login as 'oper'
on the local X display for the final testing.  Please also note that
in order to paste into the X display login shell window for 'oper' and
'prog', you typically must use Shift-Insert.  If you have any
questions about how to cut-and-paste please contact Ed
(Ed.Himwich@nasa.gov).

		4. Making a back-up before installing

Before you begin the upgrade make sure you have a current back-up of
your system in case something goes wrong.  If you are use FS Linux 5
(FSL5), we recommend you use the tar based back-up that is part of the
rotating disk back-up scheme.  A draft document that describes this
method is available in the 'docs' sub-directory on the FS file servers
as 'backups2.pdf'.  If you have an older FS Linux distribution, please
use the disk-to-disk back scheme described in Section 5.8 of the FS9
'Computer Reference' manual.  If you have an FSL6 (sarge), FSL7 (etch)
FSL8 (lenny) or FSL9 (wheezy) system configured to run a RAID, please
see /usr2/fs/misc/RAID.pdf (for FSL9, see /usr2/fs/misc/FSL9_RAID.pdf)
section APPLYING AN UPDATE for directions for applying an update.  If
you are running one of the FSL distributions and do not have
documentation on how to make a back-up, please contact Ed.  If you
have SCSI disks, Section 5.7 of the FS9 'Computer Reference' manual
has a discussion of drive ID numbers if you are unsure about these.

Normally you should choose to install the update on your primary disk
after having made and verified your back-up.  Once the installation is
complete, has been tested, and used for a little while, you can copy
over your back-up with the upgraded primary.  If the upgrade fails,
you should restore the back-up to the primary for operations.  You can
then try to upgrade again when it is convenient.  In a desperate
situation, you can use the back-up for operations.  You may choose to
install the FS on your back-up disk for testing and then later copy
the back-up onto the primary once you are satisfied with the new
version.  In any event, please be sure to make a fresh back-up (and
put it safely away) before continuing with the installation.

		      5. Disk space requirements

Please be sure that you have at least 50 MB of free space (use the
'df' UNIX command to check free space) on your '/usr2' partition
before starting the upgrade.  This would probably only be an issue for
stations with 200 MB disks.  If you are tight on space, you may want
to delete old log files and old versions of the FS (except your most
recent one if you can avoid it of course).  Since you should have
backed-up your system, you can even delete the '*.[oas]' and
executable files of your old versions with no risk.  You might want to
keep the source of the previous versions around for reference if you
have room.  You can eliminate the non-source files by 'cd'-ing to each
of the old FS directories in turn as 'prog' and doing a 'make rmdoto
rmexe'.  If you have any questions about how to do this, please
contact Ed.

		  6. Set operations file permissions

It is recommended that your local files for operations (control, proc,
log, and sched directories and their contents) have the default
ownership ('oper.rtx') and permissions ('rw-rw-rw', for directories
'rwxrwxrwx').  To force this, please execute the script (as 'root'):

  /usr2/fs/misc/fix_perm

Answer 'y' to the prompt if you wish to proceed.  It is good idea to
do this, unless you have purposely changed the ownership and
permissions to some other values.  If you don't want to restore the
defaults, answer 'n' (this is the last chance to abort the execution
of the script).

		   7. Fix .prc file 'define' lines

Sometimes due to errors (possibly caused during manual editing,
instead of using PFMED), the 'define' statements in .prc files can be
damaged.  This can lead to other problems including causing the
contents of procedures being logged every time they are executed
rather than just the first time they are used in a given logfile.  You
can use the new utility, /usr2/fs/misc/fix_define to fix this. You can
run it when the FS is *not active* (as 'oper'):

  cd /usr2/proc
  /usr2/fs/misc/fix_define -t *.prc

in 'test' mode to see if there any 'define' statements that need to be
fixed.  If there are, they will displayed.  If you choose to fix them,
you can re-run the second command above without the '-t' flag to fix
them.  An original of each .prc file that is changed is retained with
an added .bak extension.
