#!/usr/bin/perl
# Usage: dbbc_equip 'coresA [coresB [coresC [coresD]]]' files

require "getopts.pl";

&Getopts("f");

print "$#ARGV\n";

if ($#ARGV < 0) {
    print "\n  Usage: dbbc_equip 'coresA [coresB [coresC [coresD]]]' files\n\n";
    print "    Fixes equip.ctl files to use dbbc_ddc and dbbc_ddc/filag10 in place\n";
    print "      of equipment types dbbc and dbbc/fila10g, respectively. Also,\n";
    print "      re-writes non-comment line 21 to list the number of cores per\n";
    print "      conditioning module in order of A, B, C and D. The cores must be\n";
    print "      specified as one argument, e.g., within quotes '....',\n";
    print "      seperated by whitespace, with values 0-4, with only values for\n";
    print "      conditioning modules that are present, since the number of\n";
    print "      entries implicitly specifies the number of condtionong modules.\n";
    print "      The number of conditioning modules must be in the range 1-4.\n";
    print "      The total number of cores must be in the range 1-4.\n\n";
    print "    The script will remove the comment that preceeded non-comment\n";
    print "      line 21 in the previous equip.ctl, if there is an exact match.\n";
    print "      In any event it adds new comments describing the new line\n";
    print "      format\n\n";
    print "    The original files are preserved with a '.bak' extension.\n\n";
    exit -1;
}

if(!($ARGV[1] =~ /^\s*(\S+)\s*(\S*)\s*(\S*)\s*(\S)\s*(\S*)/)) {
    die "First argument must have at least one non-whitespace field, enter 'dbbc_equip' for help\n";
}

$a=$1;
$b=$2;
$c=$3;
$d=$4;
$e=$5;

if($e eq "") {
    die "First argument must have less than five non-whitespace fields, enter 'dbbc_equip' for help\n";
}

if ($a < 0 || $a > 4) {
    die "coresA is not 0-4\n";
} 
if ($#ARGV > 1 && ($b < 0 || $b > 4)) {
    die "coresB is not 0-4\n";
} 
if ($#ARGV > 2 && ($c < 0 || $c > 4)) {
    die "coresC is not 0-4\n";
} 
if ($#ARGV > 3 && ($d < 0 || $d > 4)) {
    die "coresD is not 0-4\n";
} 
FILE: foreach $name (@ARGV) {

    $bak = $name . ".bak";
    $out = $name;
    if (!-e $name) {
	die "Can't find $name Quitting.\n";
    }

# rename the original if we can and open the files

    if (-e $bak) {
	die "Backup-file $bak already exists, giving up.\n";
    }

    rename ($out,$bak) ||die "renaming $out to $bak failed: $!, giving up.\n";
 
    if(!open(BAK,$bak)) {
	print "Failed to open $bak: $!\n";
	if(!rename($bak,$out)) {
	    print "Unable to rename $bak to $out: $!\n";
	    die "Please fix whatever the problem is and rename it yourself.\n";
	} else {
	    die "I renamed $bak to $out for you.\n";
	}
    }
    
    if(!open(OUT,">" . $out)) {
	print "Failed to open $out: $!\n";
	if((!close(BAK)) || (!rename($bak,$out))) { 
	    print "Unable to rename $bak to $out: $!\n";
	    die "Please fix whatever the problem is and rename it yourself.\n";
	} else {
	    die "I renamed $bak to $out for you.\n";
	}
    }


#process

    $line=0;
    $uncommented=0;
    $change=0;
    while(<BAK>) {
	$line++;
        if(/^\*DBBC number of conditioning modules/) {
	    $change=1;
	    next;
	}
	if(/^\*/) {
	    print OUT;
	    next;
	}
	$uncommented++;
	if(/dbbc\/fila10g/i) {
	    print "dbbc_ddc/filag10\n";
	    $change=1;
	    next;
	}
	if(/dbbc/i) {
	    print "dbbc_ddc\n";
	    next;
	}
	if($uncommenetd == 21) {
	    print OUT "*Cores per CoMo in order A-D, values are 0-4, must total < 5\n";
	    print OUT "* Number of entries implies number of CoMos, must be 1 to 4\n";
	    print OUT " $a $b $c %d\n";
	    $change=1;
	    next;
	}
	print OUT;
	next;
    }

    $rename=0;
    if(!close(OUT)) {
	$rename=1;
	print "Warning: Unable to close to $out: $!\n";
    }
    if(!close(BAK)) {
	$rename=1;
	print "Warning: Unable to close to $bak: $!\n";
    }

    if($rename || $change == 0) {
	if(!rename($bak,$out)) { 
	    print "Warning: Unable to rename '$bak' to '$out': $!\n";
	    if($rename) {
		print "Warning: Please fix whatever the problem is and rename it yourself,\n";
		print "Warning: probably using 'mv $bak $out'\n";
	    } else {
		print "Warning: It appears that $out did not need any changes,\n";
		print "Warning: but to be safe you should probably \"";
		print "Warning: use 'mv $bak $out'\n";
	    }
	} elsif($rename) {
	    print "Warning: I renamed '$bak' to '$out' for you.\n";

	}
    }
}
