#!/usr/bin/perl
# Usage: rxgfix2 file

if ($#ARGV < 0) {
    print "Usage: cmdctlfix4 files\n";
    print "\n";
    print "Fixes an rxg file with only one Trec to have two.\n";
    print "\n";
    print "files are the files to be fixed\n";
    print "\n";
    print "the original files are renamed with a '.bak' extension\n";

    exit -1;
}

if  ($#ARGV < 0 || $#ARGV >0) {
    print "incorrect number of arguments\n";
    print "Try 'rxgfix2' for more information.\n";
    exit -1;
}


FILE: foreach $name (@ARGV) {

    $bak = $name . ".bak";
    $out = $name;
    if (!-e $name) {
	die "Can't find $name Quitting.\n";
    }

# rename the original if we can and open the files

    if (-e $bak) {
	die "Backup-file $bak already exists, giving up.\n";
}

    rename ($out,$bak) ||die "renaming $out to $bak failed: $!, giving up.\n";
 
    if(!open(BAK,$bak)) {
	print "Failed to open $bak: $!\n";
	if(!rename($bak,$out)) {
	    print "Unable to rename $bak to $out: $!\n";
	    die "Please fix whatever the problem is and rename it yourself.\n";
	} else {
	    die "I renamed $bak to $out for you.\n";
	}
    }

    if(!open(OUT,">" . $out)) {
	print "Failed to open $out: $!\n";
	if((!close(BAK)) || (!rename($bak,$out))) { 
	    print "Unable to rename $bak to $out: $!\n";
	    die "Please fix whatever the problem is and rename it yourself.\n";
	} else {
	    die "I renamed $bak to $out for you.\n";
	}
    }


#process

    while(<BAK>) {
    if (/^\*/) {
	print OUT;
	next;
    } elsif(/^[ ]*$/) {
	print OUT;
	next;
    } elsif(/[ ]*end_tcal_table/) {
        $found=TRUE;
	next;
    } elsif(/\([ ]*\)

    $rack=substr($_,25,3);
    $drive1=substr($_,28,3);
    $drive2=substr($_,31,3);

    $not = $not || $rack  !~ /[123456789ABCDEF]/;
    $not = $not || $drive1 !~ /[123456789ABCDEF]/;
    $not = $not || $drive2 !~ /[123456789ABCDEF]/;

    substr($_,25,1)='0';
    if (substr($rack,2,1) eq 'F' && substr($rack,1,1) eq 'F' && 
	substr($rack,0,1) eq '3' ) {
	substr($_,25,1)='F';
    }
    substr($_,26,2)=substr($rack,1,2);

    substr($_,28,1)='0';
    if (substr($drive1,2,1) eq 'F' && substr($drive1,1,1) eq 'F' &&
	substr($drive1,0,1) eq '3') {
	substr($_,28,1)='F';
    }
    substr($_,29,2)=substr($drive1,1,2);

    substr($_,31,1)='0';
    if (substr($drive2,2,1) eq 'F' && substr($drive2,1,1) eq 'F' &&
	substr($drive2,0,1) eq '3') {
	substr($_,31,1)='F';
    }
    substr($_,32,2)=substr($drive2,1,2);

    substr($_,34,1)="\n";
    print OUT;
}

if ($not) {
    print "Warning: Some non-comments lines had rack or drive designators outside 0-F.\n";
    print "There is probably something wrong, like $out wasn't a command list file\n";
    print "or $out had already been fixed.\n";
    print "In order to recover you will probably want to rename $bak to $out,\n";
    print "using: \"mv $bak $out\"\n";
}
