FTN77,I,Y  
$CDS ON
      INTEGER FUNCTION GETDP(LSORNA,RA,DEC,EPOCH,IYR,IDOY,IHR,IM,IS,
     + LANT,SLON,SLAT,ADIAM,LSAXIS,IMODEL,FPVER,FSVER,
     + LAXIS,NREP,NPTS,STEP,INTP,LDEV,CAL,FREQ,
     + HAOFF,DECOFF,AZOFF,ELOFF,XOFF,YOFF,
     + TSAZ,TSEL,TSYS,
     + IAYR,IADOY,IAHR,IAM,IAS,IATS,ANLON,ANLAT,ERLON,ERLAT,
     + PRLON,PRLAT,PRAZ,PREL,
     + LTOFF,LTWID,LTPK,LTBAS,LTSLP,LTFC,
     + LTSOFF,LTSWID,LTSPK,LTSBAS,LTSSLP,LTRCHI,
     + LNOFF,LNWID,LNPK,LNBAS,LNSLP,LNFC,
     + LNSOFF,LNSWID,LNSPK,LNSBAS,LNSSLP,LNRCHI,
     + LONCOR,LATCOR,LONOFF,LATOFF,IQLON,IQLAT,
     + NUMLIN,LINTIM,LINPOS,LINTMP,NLIN,IERLIN,NDLIN,
     + NUMLAT,LATTIM,LATPOS,LATTMP,NLAT,IERLAT,NDLAT,
     + NUMLON,LONTIM,LONPOS,LONTMP,NLON,IERLON,NDLON,
     + LUT,IDCB,IDCBZ,JBUF,IL,IRREC,NREC,IERR,LEN,JERR)
C
C GETDP - GET Data Point from FIVPT's output
C
C This routine returns the data from upto one complete scan, with the
C the following restrictions:
C
C   1. An out of order record ends this scan, but will be used in the
C      next call.
C
C   2. The output lines from FIVPT and ANTCN are given record numbers
C      as follows:
C 
C      TYPE        ID                WRITER 
C 
C         1        SOURCE            FIVPT
C         2        SITE              FIVPT
C         3        FIVEPT            FIVPT
C         4        ORIGIN            FIVPT
C         5        TSYS              FIVPT
C         6        TR                ANTCN
C         7        PR                ANTCN
C         8        LATFIT            FIVPT
C         9        LATERR            FIVPT
C        10        LONFIT            FIVPT
C        11        LONERR            FIVPT
C        12        OFFSET            FIVPT
C                  LIN               FIVPT
C                  LAT               FIVPT
C                  LON               FIVPT
C 
C      The array IRREC is returned with the element corresponding to
C      each type set according to what was found: 
C      0 for not found before end of scan or first out of order record
C      1 for     found "                                             "
C     -n for an  found, but there was at least one error, the first was in
C                       field n 
C 
C      LIN, LAT, and LON types status is returned in IERLIN, IERLAT, AND
C      IERLON variables respectively, as the number of records with errors
C      NLIN, NLAT, and NLON hold the number of each type found with no error
C 
      INTEGER LSORNA,IYR,IDOY,IHR,IM,IS 
      INTEGER LAXIS,NREP,NPTS,INTP,LDEV 
      INTEGER LANT,LSAXIS,IMODEL
      INTEGER IAYR,IADOY,IAHR,IAM,IAS,IATS
      INTEGER LTFC
      INTEGER LNFC
      INTEGER IQLAT,IQLON 
      INTEGER NUMLIN,NLIN,IERLIN,NDLIN
      INTEGER NUMLAT,NLAT,IERLAT,NDLAT
      INTEGER NUMLON,NLON,IERLON,NDLON
      INTEGER LUT,IDCB,IDCBZ,JBUF,IL,IRREC,NREC,IERR,LEN,JERR 
C 
      REAL RA,DEC,EPOCH 
      REAL STEP,CAL,FREQ
      REAL SLON,SLAT,ADIAM,FPVER,FSVER
      REAL HAOFF,DECOFF,AZOFF,ELOFF,XOFF,YOFF 
      REAL TSAZ,TSEL,TSYS 
      REAL ANLON,ANLAT,ERLON,ERLAT
      REAL PRLON,PRLAT,PRAZ,PREL
      REAL LTOFF,LTWID,LTPK,LTBAS,LTSLP 
      REAL LTSOFF,LTSWID,LTSPK,LTSBAS,LTSSLP,LTRCHI 
      REAL LNOFF,LNWID,LNPK,LNBAS,LNSLP 
      REAL LNSOFF,LNSWID,LNSPK,LNSBAS,LNSSLP,LNRCHI 
      REAL LONCOR,LATCOR,LONOFF,LATOFF
      REAL LINTIM,LINPOS,LINTMP 
      REAL LATTIM,LATPOS,LATTMP 
      REAL LONTIM,LONPOS,LONTMP 
C 
      DIMENSION LSORNA(5) 
      DIMENSION LAXIS(2)
      DIMENSION LANT(4),LSAXIS(2) 
      DIMENSION NUMLIN(NDLIN),LINTIM(NDLIN),LINPOS(NDLIN),LINTMP(NDLIN) 
      DIMENSION NUMLAT(NDLAT),LATTIM(NDLAT),LATPOS(NDLAT),LATTMP(NDLAT) 
      DIMENSION NUMLON(NDLON),LONTIM(NDLON),LONPOS(NDLON),LONTMP(NDLON) 
      DIMENSION IDCB(IDCBZ),JBUF(IL),IRREC(NREC)
C
      DOUBLE PRECISION DAS2B
      LOGICAL KRET
      SAVE IFC,ILC
C
C  RECORD IDENTIFIERS, MUST INCLUDE 1 SPACE AT END TO GUARANTEE CORRECT MATCH
C
      INTEGER   LSORCE(  5 )
      INTEGER   LSITE (  4 )
      INTEGER   LFIVPT(  5 )
      INTEGER   LORIGN(  5 )
      INTEGER   LTSYS (  4 )
      INTEGER   LTRAC (  3 )
      INTEGER   LPRED (  3 )
      INTEGER   LLTFIT(  5 )
      INTEGER   LLTERR(  5 )
      INTEGER   LLNFIT(  5 )
      INTEGER   LLNERR(  5 )
      INTEGER   LOFSET(  5 )
      INTEGER   LLIN  (  3 )
      INTEGER   LLAT  (  3 )
      INTEGER   LLON  (  3 )
C 
      DATA LSORCE /   7,2HSO,2HUR,2HCE,2H  /                            
      DATA LSITE  /   5,2HSI,2HTE,2H  /                                 
      DATA LFIVPT /   7,2HFI,2HVE,2HPT,2H  /                            
      DATA LORIGN /   7,2HOR,2HIG,2HIN,2H  /                            
      DATA LTSYS  /   5,2HTS,2HYS,2H  /                                 
      DATA LTRAC  /   3,2HTR,2H  /                                      
      DATA LPRED  /   3,2HPR,2H  /                                      
      DATA LLTFIT /   7,2HLA,2HTF,2HIT,2H  /                            
      DATA LLTERR /   7,2HLA,2HTE,2HRR,2H  /                            
      DATA LLNFIT /   7,2HLO,2HNF,2HIT,2H  /                            
      DATA LLNERR /   7,2HLO,2HNE,2HRR,2H  /                            
      DATA LOFSET /   7,2HOF,2HFS,2HET,2H  /                            
      DATA LLIN   /   4,2HLI,2HN /                                      
      DATA LLAT   /   4,2HLA,2HT /                                      
      DATA LLON   /   4,2HLO,2HN /                                      
      DATA INM/0/,IR/0/ 
C 
      GETDP=0 
      JERR=0
      NLAT=0
      NLON=0
      NLIN=0
      IERLIN=0
      IERLAT=0
      IERLON=0
C 
      DO 10 I=1,NREC
           IRREC(I)=0 
10         CONTINUE 
C 
      IF(IR.GT.0) GO TO 110 
C 
100   CONTINUE
      CALL GNEXT(LUT,IDCB,IERR,JBUF,IL,LEN,IFC,ILC) 
      IF(IERR.NE.0.OR.LEN.LT.0) RETURN
C 
C  TEST CODE FOR OLD MOJAVE FORMAT FILES
C 
C      CALL GTFLD(JBUF,IFC,ILC,IC1,IC2) 
C      LONCOR=SNGL(DAS2B(JBUF,IC1,IC2-IC1+1,JERR))
C      CALL GTFLD(JBUF,IFC,ILC,IC1,IC2) 
C      LATCOR=SNGL(DAS2B(JBUF,IC1,IC2-IC1+1,JERR))
C      CALL GTFLD(JBUF,IFC,ILC,IC1,IC2) 
C      LONOFF=SNGL(DAS2B(JBUF,IC1,IC2-IC1+1,JERR))
C      CALL GTFLD(JBUF,IFC,ILC,IC1,IC2) 
C      LATOFF=SNGL(DAS2B(JBUF,IC1,IC2-IC1+1,JERR))
C      RETURN 
C 
110   CONTINUE
      IR=0
      IF(ICHCM(JBUF,IFC,LSORCE,3,LSORCE(1)).EQ.0) IR= 1 
      IF(ICHCM(JBUF,IFC,LSITE ,3,LSITE(1) ).EQ.0) IR= 2 
      IF(ICHCM(JBUF,IFC,LFIVPT,3,LFIVPT(1)).EQ.0) IR= 3 
      IF(ICHCM(JBUF,IFC,LORIGN,3,LORIGN(1)).EQ.0) IR= 4 
      IF(ICHCM(JBUF,IFC,LTSYS ,3,LTSYS(1) ).EQ.0) IR= 5 
      IF(ICHCM(JBUF,IFC,LTRAC ,3,LTRAC(1) ).EQ.0) IR= 6 
      IF(ICHCM(JBUF,IFC,LPRED ,3,LPRED(1) ).EQ.0) IR= 7 
      IF(ICHCM(JBUF,IFC,LLTFIT,3,LLTFIT(1)).EQ.0) IR= 8 
      IF(ICHCM(JBUF,IFC,LLTERR,3,LLTERR(1)).EQ.0) IR= 9 
      IF(ICHCM(JBUF,IFC,LLNFIT,3,LLNFIT(1)).EQ.0) IR= 10
      IF(ICHCM(JBUF,IFC,LLNERR,3,LLNERR(1)).EQ.0) IR= 11
      IF(ICHCM(JBUF,IFC,LOFSET,3,LOFSET(1)).EQ.0) IR= 12
      IF(ICHCM(JBUF,IFC,LLIN  ,3,LLIN(1)  ).EQ.0) IR= 30
      IF(ICHCM(JBUF,IFC,LLAT  ,3,LLAT(1)  ).EQ.0) IR= 31
      IF(ICHCM(JBUF,IFC,LLON  ,3,LLON(1)  ).EQ.0) IR= 32
C 
C NOT A KNOWN RECORD TYPE, GET ANOTHER
C 
      IF(IR.EQ.0) GO TO 100 
C 
C  SAVE PREVIOUS RECORD NUMBER
C 
       IPR=INM
       INM=0
C 
C CHECK FOR CORRECT RECORD ORDER, LOGIC IS: 
C 
C   IF   THE PREVIOUS RECORD WAS X AND THIS RECORD TYPE IS NOT ALLOWED TO 
C        FOLLOW RECORD X
C   THEN RETURN 
C 
C         PREVIOUS        CURRENT 
C 
      KRET= 
     +   (IPR.EQ. 1 .AND. IR.NE. 2                              ) .OR.
     +   (IPR.EQ. 2 .AND. IR.NE. 3                              ) .OR.
     +   (IPR.EQ. 3 .AND. IR.NE. 4                              ) .OR.
     +   (IPR.EQ. 4 .AND. IR.NE. 5                              ) .OR.
     +   (IPR.EQ. 5 .AND.(IR.NE. 6 .AND. IR.NE.30 .AND. IR.NE.31)).OR.
     +   (IPR.EQ. 6 .AND. IR.NE. 7                              ) .OR.
     +   (IPR.EQ. 7 .AND.(IR.NE. 8 .AND. IR.NE.30 .AND. IR.NE.31)).OR.
     +   (IPR.EQ. 8 .AND. IR.NE. 9                              ) .OR.
     +   (IPR.EQ. 9 .AND.(IR.NE.10 .AND. IR.NE.30 .AND. IR.NE.32)).OR.
     +   (IPR.EQ.10 .AND. IR.NE.11                              ) .OR.
     +   (IPR.EQ.11 .AND. IR.NE.12                              ) .OR.
     +   (IPR.EQ.30 .AND.(IR.NE.31 .AND. IR.NE.32 .AND. IR.NE. 8
     +              .AND. IR.NE.10)                             ) .OR.
     +   (IPR.EQ.31 .AND.(IR.NE.30 .AND. IR.NE.31 .AND. IR.NE. 8)).OR.
     +   (IPR.EQ.32 .AND.(IR.NE.30 .AND. IR.NE.32 .AND. IR.NE.10))
      IF(IR.EQ.6.OR.IR.EQ.7.AND.KRET) GO TO 100 
      IF(KRET) RETURN 
C 
      INM=IR
      GETDP=1 
C 
      IF(IR.LT.30) GO TO (1000,2000,3000,4000,5000,6000,7000,8000,9000, 
     +   10000,11000,12000),IR
      IF(IR.GE.30) GO TO (30000,31000,32000),IR-29
C 
C  SHOULD BE IMPOSSIBLE 
C 
      JERR=1000 
      RETURN
C 
C  SOURCE RECORD
C 
1000  CONTINUE
      IFC=IFC+LSORCE(1) 
      CALL DESOR(JBUF,IFC,ILC,LSORNA,RA,DEC,EPOCH,IYR,IDOY,IHR,IM,IS, 
     +           IRREC(1))
      GO TO 100 
C 
C SITE   RECORD 
C 
2000  CONTINUE
      IFC=IFC+LSITE(1)
      CALL DESIT(JBUF,IFC,ILC,LANT,SLON,SLAT,ADIAM,LSAXIS,IMODEL,FPVER, 
     +           FSVER,IRREC(2))
      GO TO 100 
C 
C FIVEPT RECORD 
C 
3000  CONTINUE
      IFC=IFC+LFIVPT(1) 
      CALL DEFIV(JBUF,IFC,ILC,LAXIS,NREP,NPTS,STEP,INTP,LDEV,CAL,FREQ,
     +           IRREC(3))
      GO TO 100 
C 
C  ORIGIN RECORD
C 
4000  CONTINUE
      IFC=IFC+LORIGN(1) 
      CALL DEORG(JBUF,IFC,ILC,HAOFF,DECOFF,AZOFF,ELOFF,XOFF,YOFF, 
     +           IRREC(4))
      GO TO 100 
C 
C  TSYS   RECORD
C 
5000  CONTINUE
      IFC=IFC+LTSYS(1)
      CALL DETSY(JBUF,IFC,ILC,TSAZ,TSEL,TSYS,IRREC(5))
      GO TO 100 
C 
C  ANTCN  TR RECORD 
C 
6000  CONTINUE
      IFC=IFC+LTRAC(1)
      CALL DETR(JBUF,IFC,ILC,IAYR,IADOY,IAHR,IAM,IAS,IATS,
     +           ANLON,ANLAT,ERLON,ERLAT,IRREC(6))
      GO TO 100 
C 
C  ANTCN  PR RECORD 
C 
7000  CONTINUE
      IFC=IFC+LPRED(1)
      CALL DEPR(JBUF,IFC,ILC,PRLON,PRLAT,PRAZ,PREL,IRREC(7))
      GO TO 100 
C 
C   LATFIT RECORD 
C 
8000  CONTINUE
      IFC=IFC+LLTFIT(1) 
      CALL DEFIT(JBUF,IFC,ILC,LTOFF,LTWID,LTPK,LTBAS,LTSLP,LTFC,
     +           IRREC(8))
      GO TO 100 
C 
C   LATERR RECORD 
C 
9000  CONTINUE
      IFC=IFC+LLTERR(1) 
      CALL DEERR(JBUF,IFC,ILC,LTSOFF,LTSWID,LTSPK,LTSBAS,LTSSLP,LTRCHI, 
     +           IRREC(9))
      GO TO 100 
C 
C   LONFIT RECORD 
C 
10000 CONTINUE
      IFC=IFC+LLNFIT(1) 
      CALL DEFIT(JBUF,IFC,ILC,LNOFF,LNWID,LNPK,LNBAS,LNSLP,LNFC,
     +           IRREC(10)) 
      GO TO 100 
C 
C   LONERR RECORD 
C 
11000 CONTINUE
      IFC=IFC+LLNERR(1) 
      CALL DEERR(JBUF,IFC,ILC,LNSOFF,LNSWID,LNSPK,LNSBAS,LNSSLP,LNRCHI, 
     +           IRREC(11)) 
      GO TO 100 
C 
C   OFFSET RECORD 
C 
12000 CONTINUE
      IFC=IFC+LOFSET(1) 
      CALL DEOFF(JBUF,IFC,ILC,LONCOR,LATCOR,LONOFF,LATOFF,IQLON,IQLAT,
     +           IRREC(12)) 
      INM=0 
      IR=0
      RETURN
C 
C   LIN    RECORD 
C 
30000 CONTINUE
      IFC=IFC+LLIN(1) 
      CALL DEPNT(JBUF,IFC,ILC,NUMLIN,LINTIM,LINPOS,LINTMP,NLIN,IERLIN,
     +           NDLIN) 
      GO TO 100 
C 
C   LAT    RECORD 
C 
31000 CONTINUE
      IFC=IFC+LLAT(1) 
      CALL DEPNT(JBUF,IFC,ILC,NUMLAT,LATTIM,LATPOS,LATTMP,NLAT,IERLAT,
     +           NDLAT) 
      GO TO 100 
C 
C   LON    RECORD 
C 
32000 CONTINUE
      IFC=IFC+LLON(1) 
      CALL DEPNT(JBUF,IFC,ILC,NUMLON,LONTIM,LONPOS,LONTMP,NLON,IERLON,
     +           NDLON) 
      GO TO 100 
C 
      END 
