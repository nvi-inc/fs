FTN77,I,Y
$CDS ON
$ALIAS /FSCOM/ , NOALLOCATE
      subroutine tconn                      !  last update LAR <890627.0504>
c
c   Test video converter connections and single-band delays.
c
c   Called subroutines:  copin,logit,susp,exec(2),dump,confg,LFNCH routines
c
      include /fs/include/fscom.ftni
c  Common contents used:
c       lusa       logical unit for spectrum analyzer or signal averager
c       lfreqv     3x14 ASCII array of video converter frequencies
c       ifp2vc     array of patch codes for video converters
c       phjmax     maximum acceptable jitter in phase transfer function
c       cpkmin     minimum acceptable coherence amplitude at 10 kHz
c       intpha     integration time, in seconds
c
      dimension lvcon(3,14),lvcoff(3,14),lmess(27),ibuf(10)
c       lvcon      video converter "on" frequencies, from lfreqv
c       lvcoff     video converter "off" frequencies, from TVCOFF
c       lmess      message for logit containing test results
c       ibuf       returned message from signal averager
c       lvchex     numbers of "on" video converters, in hex
c
      DIMENSION ICHOLD(14)
      dimension datarr(256),phase(128),coher(128)
      equivalence (datarr,phase),(datarr(129),coher),(peak,coher(51))
c       phase      values of phase transfer function at various frequencies
c       coher      values of coherence amplitude at the same frequencies
c       datarr     concatenation, convenient for call to dump
c
c       ivc        video converter currently being tested
c       newgrp     lowest-numbered VC with same LO and sideband as ivc
c       next       video converter against which ivc is being tested
c       peak       coherence at 10 kHz, equivalent to coher(51)
c       sum,sumsq  sum and sum of squares of phases or off-peak coherences
c       avgpha,avgcoh   average phase and off-peak coherence
c       stdpha,stdcoh   formal standard errors of above quantities
c
c
c  1. Save the standard video converter frequencies now in memory; send an
c     error message if any are not set.  Then set the video converters to
c     unusual, mutually incompatible frequencies.  Set up SA.
c
      call ichmv(lvcon,1,lfreqv,1,84)
      do ivc=1,14
        if (ichcm(lvcon(1,ivc),1,6h000.00,1,6).eq.0) then
          call logit(0,0,0,0,-9,2hTE)
          return
        endif
      enddo
      DO I=1,14
        ICHOLD(I) = ICHECK(I)
        ICHECK(I) = -1
      ENDDO
      do ivc=1,14
        call ir2as(ivc*1.03,lvcoff,6*ivc-5,-6,-2)
        call confg(2hVC,ivc,lvcoff(1,ivc))
      enddo
      if (modsa.eq.3582) then
        call exec(2,lusa,36hPRS,AA0,IM2,AV2,NU3,CH1,PX1,MN1,MP50,-36)
      else
        call exec(2,lusa,13hTRAC1:RES COH,-13)
        call exec(2,lusa,13hTRAC2:RES COH,-13)
        call exec(2,lusa,15hFREQ:SPAN 20kHz,-15)
        call exec(2,lusa,15hDISP1:AXIS LINM,-15)
        call exec(2,lusa,16hDISP2:AXIS PHASE,-16)
        call exec(2,lusa,21hDISP2:SCAL:UNIT "DEG",-21)
        call exec(2,lusa,19hDISP:HEAD:AFOR FP32,-19)
        call exec(2,lusa,11hMARK1 10kHz,-11)
      endif
c
c  2. Check each video converter against another one patched to the same LO
c     and same sideband.
c
      newgrp = 1
      do ivc=1,14
        if (ivc.ne.1) then
          call confg(2hVC,ivc-1,lvcoff(1,ivc-1))
          if (ivc.eq.newgrp) call confg(2hVC,next,lvcoff(1,next))
        endif
        if (ivc.eq.14 .or. ifp2vc(ivc).ne.ifp2vc(ivc+1)) then
          next = newgrp
          newgrp = ivc+1
        else
          next = ivc+1
        endif
        call confg(2hVC,ivc,lvcon(1,ivc))
        call confg(2hVC,next,lvcon(1,ivc))
        call confg(2hRE,ivc,next)
        call susp(2,5)                !  wait 5 secs for VCs to settle
c
c  3. Read the coherence amplitude and phase from the SA.
c
        if (modsa.eq.3582) then
          call exec(2,lusa,6hRE,CH0,-6)
          call susp(2,intpha)
          call exec(2,lusa,3hCH1,-3)
          call dump(2hDS,datarr)
        else
          call exec(2,lusa,14hINIT:STAT STAR,-14)
          call susp(2,intpha)
          call exec(2,lusa,14hINIT:STAT PAUS,-14)
          call exec(2,lusa,11hMARK1:AMPL?,-11)
          call exec(1,lusa,ibuf,-20)
          peak = das2b(ibuf,1,iscnc(ibuf,1,20,10)-1,ierr)
          call exec(2,lusa,11hDISP1:DATA?,-11)
        endif
c
c  4. Find the mean relative phase and the standard deviation about it.
c
        sum = 0.
        sumsq = 0.
        do j=10,128
          if (abs(phase(j)-phase(51)).gt.180.) then
            if (phase(j).gt.phase(51)) then
              phase(j) = phase(j)-360.
            else
              phase(j) = phase(j)+360.
            endif
          endif
          sum = sum + phase(j)
          sumsq = sumsq + phase(j)*phase(j)
        enddo
        avgpha = sum/119.
        stdpha = sqrt((sumsq-avgpha*sum)/118.)
c
c  5. Compute the same statistics for coherence, treating peak separately.
c
        sum = -peak
        sumsq = -peak*peak
        do j=1,128
          sum = sum + coher(j)
          sumsq = sumsq + coher(j)*coher(j)
        enddo
        avgcoh = sum/127.
        stdcoh = sqrt((sumsq-sum*avgcoh)/126.)
c
c  6. Compare results to thresholds and format messages for logit.
c
        call ichmv(lmess,1,22hPhase between channels,1,22)
        call ib2as(ivc,lmess,23,3)
        call ichmv(lmess,26,4h and,1,4)
        call ib2as(next,lmess,30,3)
        call ichmv(lmess,33,2h: ,1,1)
        call ir2as(avgpha,lmess,34,-5,0)
        call ichmv(lmess,38,4h +/-,1,4)
        call ir2as(stdpha,lmess,42,-5,0)
        call ichmv(lmess,46,9h degrees.,1,9)
        call logit(lmess,54)
        call ichmv(lmess,1,10hCoherence:,1,10)
        call ir2as(peak,lmess,11,-6,3)
        call ichmv(lmess,17,11h at 10 kHz,,1,11)
        call ir2as(avgcoh,lmess,28,-6,3)
        call ichmv(lmess,34,4h +/-,1,4)
        call ir2as(stdcoh,lmess,38,-6,3)
        call ichmv(lmess,44,11h elsewhere.,1,11)
        call logit(lmess,54)
        lvchex = ih22a(16*ivc+next)
        if (stdpha.ge.phjmax) call logit(0,0,0,0,-26,2hTE,lvchex)
        if (peak.lt.cpkmin) call logit(0,0,0,0,-25,2hTE,lvchex)
      enddo
c
c  7. Set video converters back to their standard frequencies.
c
      call copin(4hVCSX,-4)
      DO I=1,14
        ICHECK(I) = ICHOLD(I)
      ENDDO
      return
      end
