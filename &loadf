FTN4
      STRUCTURED 1
C 
C 
C***********************************************************************
C 
C     PROGRAM 'LOADF' IS USED TO GET AROUND THE FACT THAT WITH THE
C     CURRENT FILE MANAGER PACKAGE (AS OF MARCH 1981) IT IS NOT POSSIBE 
C     TO PUT GLOBAL PARAMETERS IN A LOADR COMMAND FILE. 
C 
C     THIS PROGRAM PROVIDES AS SCHEME FOR RESOLVING GLOBALS IN A
C     LOADR COMMAND FILE AND FOR CREATING A TEMPORARY RESOLVED FILE.
C 
C     TO USE PROCEED AS FOLLOWS:
C 
C     CREATE A LOADR COMMAND FILE WITH GLOBALS PARMETERS ('0G' THROUGH
C     '9G') IN THE SECURITY CODE AND CARTRIDGE REFERENCE FIELDS.
C 
C     THEN IN THE TRANSFER FILE WHICH IS GOING TO LOAD A PROGRAM
C     USING THAT COMMAND FILE AND JUST PRIOR TO THE TRANSFER TO THE 
C     LOADER INSET: 
C 
C     :RU,LOADF,CNAMR,ISCR,X0G,X1G,X2G,X3G,X4G,X5G,X6G,X7G,X8G,X9G
C 
C     WHERE,
C 
C     1) CNAMR IS THE COMPLETE NAMR OF THE LOADR COMMAND FILE 
C 
C     2) ISCR IS THE NUMBER OF A SCRATCH LU WHERE A TEMPORARY VERSION 
C     OF THE COMMAND FILE CAN BE STORED.  THIS TEMPORARY VERSION WILL 
C     HAVE THE GLOBALS RESOLVED. NOTE. ISCR MAY BE ONE OR TWO ASCII 
C     CHARACTERS, BUT NOT MORE. 
C 
C     (CNAMR MAY CONTAIN AND ISCR BE MAY FILE MANAGER GLOBAL PARAMETERS.
C     THE SCRATCH LU CAN NOT BE THE SAME AS THE LU OF THE ORIGINAL
C     FILE.)
C 
C     3) X0G THROGH X9G ARE 9 STRINGS (IN GENEREAL FILE MANAGER 
C     GLOBAL PARAMETERS 0G THROGH 9G). IT IS NOT NECCESSARY TO
C     SPECIFY ALL, BUT FOR INSTANCE IF X6G IS SPECIFIED THEN X0G
C     THROUGH X5G MUST BE SPECIFIED - NONE MAY BE DEFAULTED. THEY 
C     MAY OF COURSE BE DUMMY STRINGS. 
C 
C     'LOADF' THEN CREATES A TEMPORARY VERSION OF THE COMMAND FILE. 
C     IN DOING THIS ALL OCCURANCES OF THE STRINGS ':0G' THROUGH 
C     ':9G' IN THE ORIGINAL FILE ARE REPLACES WITH ':X0G' THROUGH 
C     ':X9G'. 
C 
C     FOR EXAMPLE SUPPOSED THE ORIGINAL FILE WAS CALLED ^XX::55 AND 
C     CONTAINED THE LINES:
C 
C     RE,%QQ:1G:2G
C     RE,%%SUB:1G:3G
C     RE,%%UP:4G:3G 
C 
C     AND THE USER RAN
C 
C     :RU,LOADF,^XX::55,59,0,CK,22,55,-2
C 
C     THEN THE FILE ^XX::59 WOULD BE GENERATED AND IT WOULD CONTAIN:
C 
C     RE,%QQ:CK:22
C     RE,%%SUB:CK:55
C     RE,%%UP:-2:55 
C 
C     THE USER THEN RUNS THE LOADR AGAINST THE TEMPORARY COMMAND FILE 
C     AND PURGES IT WHEN THE LOADER HAS COMPLETED.
C 
C***********************************************************************
C 
C     JIM RYAN  -  MARCH 9, 1981
C 
C     JIM RYAN  -  MODIFIED MARCH 30, 1980
C     JIM RYAN  -  MODIFIED SEPTEMBER 10, 1981 TO SUPPORT CHARACTER 
C                  SCRATCH LU.
C 
C***********************************************************************
C 
C 
      PROGRAM LOADF 
      IMPLICIT INTEGER (Q)
      DIMENSION QBUF(100),IREG(2),IMPAR(5),Q(3,10),QST(100),QWORK(100), 
     * QIN(5,10),QJUNK(100),QLNAM(20),IBUF(10),LNAM(3),IDI(144),
     * IDO(144),KBUF(100),LLNAM(3)
      EQUIVALENCE (REG,IREG),(IBUF,LNAM),(IBUF(5),ISEC),
     . (IBUF(6),ILU)
      QDATA QCOLON /:/
      DATA IBUF /10*2H  / 
      DATA Q /3,2H:0,2HG ,3,2H:1,2HG ,3,2H:2,2HG ,3,2H:3,2HG ,
     .        3,2H:4,2HG ,3,2H:5,2HG ,3,2H:6,2HG ,3,2H:7,2HG ,
     .        3,2H:8,2HG ,3,2H:9,2HG /
C 
C     0. GET THE LU FOR ERROR MESSAGES
C 
      LU = LOGLU(LDUM)
C 
C     1. GET THE RUN STRING.
C 
      REG = EXEC(14,1,QBUF(2),-98)
      QBUF(1) = IREG(2) 
C 
C     2. PARSE THE RUN STRING 
C 
C     SKIP PAST "RU,LOADF"
C 
      ISTART = 1
      KK = IPRSQ(QBUF,QJUNK,10,ISTART,1,2H ,) 
      KK = IPRSQ(QBUF,QJUNK,10,ISTART,1,2H ,) 
C 
C     NOW GET AND PARSE THE NAMR OF THE LOADR COMMAND FILE. 
C 
      KK = IPRSQ(QBUF,QLNAM,20,ISTART,1,2H ,) 
C 
      ISTRC = 1 
      CALL NAMR(IBUF,QLNAM(2),QLNAM(1),ISTRC) 
C 
C     3. OPEN THE LOADR COMMAND FILE
C 
      CALL OPEN(IDI,IERR,LNAM,0,ISEC,ILU) 
C 
      IF$ (IERR.LT.0) 
        THEN BEGIN couldn't open the command file 
          WRITE(LU,1500) LNAM,ISEC,ILU,IERR 
          WRITE( 1,1500) LNAM,ISEC,ILU,IERR 
 1500     FORMAT(" PROGRAM 'LOADF' COULDN'T OPEN COMMAND FILE.",
     1    ,/," NAMR = ",3A2,":",I3,":",I6," IERR = ",I6)
          CALL EXEC(6)
          ENDT couldn't open the command file 
C 
C     4. GET THE SCRATCH LU 
C     DO SPECIAL HANDLING FOR CHARACTERS. 
C 
      QJUNK(2) = 2H   
      KK = IPRSQ(QBUF,QJUNK,10,ISTART,1,2H ,) 
      ISTRN = 1 
      ISCR = KVALQ(QJUNK,IERR,ISTRN)
      IF(IERR.NE.0) ISCR = QJUNK(2) 
C 
C     5. CREATE THE SCRATCH COMMAND FILE
C 
      LLNAM(1) = 2H^^ 
      LLNAM(2) = LNAM(2)
      LLNAM(3) = LNAM(3)
      CALL CREAT(IDO,IERR,LLNAM,50,3,0,ISCR)  
      IF$ (IERR.LT.0) 
        THEN BEGIN couldn't create the scratch file 
          WRITE(LU,1501) LLNAM,ISCR,IERR  
          WRITE( 1,1501) LLNAM,ISCR,IERR  
 1501     FORMAT(" PROGRAM 'LOADF' COULDN'T CREATE A SCRATCH ", 
     1    "COMMAND FILE.",/," NAMR = ",3A2,"::",I6," IERR = ",I5) 
          CALL EXEC(6)
          ENDT couldn't create the scratch file 
C 
C     6. GET THE UP TO TEN GLOBAL PARAMETERS FROM THE RUN STRING. 
C 
      IQ = 1
      ICOUNT = 1
      WHILE (IQ.NE.0 .AND. ICOUNT .LE. 10)
        DO BEGIN get globals
          IQ = IPRSQ(QBUF,QIN(1,ICOUNT),6,ISTART,1,2H ,)
C 
          IF$ (IQ.NE.0) 
            THEN BEGIN another global found 
C 
C            'AND' IN A ':' AT THE FRONT OF THE NEW GLOBAL STRING 
C 
              CALL ANDQ(QCOLON,QIN(1,ICOUNT),QIN(1,ICOUNT)) 
              ICOUNT = ICOUNT +1
              ENDT another global found 
          ENDW get globals
          ICOUNT=ICOUNT-1 
C 
C     7. LOOP OVER READING A STRING FROM THE INPUT FILE 
C 
      IERR = 0
      WHILE (IERR.EQ.0) 
        DO BEGIN looping over input file
C 
          CALL RDFQ(IDI,KBUF,200,IERR)
          IF$ (IERR.EQ.0) 
            THEN BEGIN good record read 
C 
C             DO THE EXCHANGES
C 
              FOR$ I=1,ICOUNT 
                DO BEGIN exchanges
                  CALL IXQ(KBUF,Q(1,I),QIN(1,I),0)
                  ENDF exchanges
              CALL WRFQ(IDO,KBUF,IERR)
              ENDT good record read 
          ENDW looping over input file
C 
       CALL CLOSE(IDI,IERR) 
       CALL CLOSE(IDO,IERR) 
C 
      END 
