FTN77,I,Y
$ALIAS /FSCOM/ , NOALLOCATE
$CDS ON
C@MONIT 
C 
        PROGRAM MONIT(3,70),C#870115:05:43  FS MONITOR V=2 #
C 
C     MONIT 
C 
C 1.  NAME PROGRAM SPECIFICATION
C 
C 1.1.   MONIT
C               AT THE REQUEST OF THE MANAGING PROGRAM THE STATUS OF
C       THE SYSTEM IS DISPLAY IN A LOCKED AREA AT THE TOP OF THE SCREEN 
C       AND THE REST OF THE DISPLAY IS LEFT UNCHANGED INCLUDING THE LINES 
C       THAT HAVE ROLLED OFF THE SCREEN PRIOR TO THE BEGINNING OF THIS
C       PROGRAM OR HAVE ROLLED ABOVE THE LOCK LINE AFTER THE DISPLAY
C       WAS ESTABLISHED.
C 
C 
C 1.2.   RESTRICTIONS - limits on use of routine
C 
C 1.3.   REFERENCES - document cited
C 
C 2.  NAME INTERFACE
C 
C 2.1.   CALLING SEQUENCE: RU,MONIT,LU,ITYPE
C 
C     INPUT VARIABLES:
C 
C       GLOBAL DEFS REFERENCED: "name'(local name if different)' ...
C 
C       LU      - THE LOGICAL UNIT ON WHICH THE MONITOR IS TO BE RUN
C 
C       ITYPE   - THE DISPLAY TYPE VARIABLE TO BE PASSED TO MONDS 
C                 TO DETERMINE WHICH DISPLAY IS TO BE PRESENTED 
C 
C     OUTPUT VARIABLES: 
C 
C       GLOBAL DEFS REFERENCED: "name'(local name if different)' ...
C 
C 2.2.   COMMON BLOCKS USED 
C 
      INCLUDE /FS/INCLUDE/FSCOM.FTNI
C 
C 2.3.   DATA BASE ACCESSES 
C 
C 2.4.   EXTERNAL INPUT/OUTPUT
C 
C 2.5.   SUBROUTINE INTERFACE:
C 
C     CALLING SUBROUTINES: SUB1, SUB2, ... (not required for utilities) 
C 
C     CALLED SUBROUTINES: SUB1, SUB2, ... (includes segments scheduled) 
C 
C 3.  LOCAL VARIABLES 
C 
C       GLOBAL DEFS REFERENCED: "name'(local name if different)' ...
C 
        DIMENSION IP(5),INP(5),MNAM(3),MSEG(4)
C 
C       IP      - INPUT PARAMETER ARRAY 
C 
C       INP     - NEW INPUT ARRAY IF GIVEN
C 
C       IRGA    - CONTENTS OF A REG WHERE REG WAS RETURNED FROM FUNCTION
C                 CALL TO A ROUTINE 
C 
C       IRGB    - CONTENTS OF B-REG WHERE REG WAS RETURNED FROM FUNCTION
C                 CALL TO A ROUTINE 
C 
C       MNAM    - SEGMENT NAME CONTAINING DRIVE TYPE AND DISPLAY INFO 
C 
C       MSEG    - SEGMENT MAPPING ARRAY 
C 
        LOGICAL KLIN,IF40 
C 
        DIMENSION IREG(2) 
C 
C       IREG    - DUMMY REGISTER RETREIVAL AID
C 
        EQUIVALENCE (REG,IREG(1),IRGA),(IREG(2),IRGB),(IP(2),ITYPE) 
C 
C 4.  CONSTANTS USED
C 
        DATA MSEG/2,2,2,3/
C 5.  INITIALIZED VARIABLES 
C 
C 6.  PROGRAMMER: LEE N. FOSTER 
C     LAST MODIFIED:  880205 LAR    Read nonzero INP parameters into IP
C# LAST COMPC'ED  870115:05:43urrent date) #
C 
C     PROGRAM STRUCTURE 
C 
C               6.1  INITIALIZE VARIABLES 
C 
        CALL RMPAR(IP)
        IF(IP(2).EQ.10) GOTO 95000
      CALL LIBER(LU)
      MQUIT = 0
C 
C            SET IMONDS FOR INITIAL CALL
C 
        IMONDS=-1 
C 
C 
C               IF TIME SPECIFIED PUT US ON TIME LIST 
C 
        IF(IP(3) .NE. 0)CALL ISCHD(6HMONIT ,IP(3),2)
C 
1000    CONTINUE
C               GET THE LOGICAL UNIT
C 
        LUM=IAND(IP(1),77B) 
C 
C               CHECK FOR TERMINATION CALL
C 
        IF(LUM .EQ. 0)GO TO 95000 
C 
C               GET DRIVER TYPE FOR THIS CALL 
C 
        IDTP=IDTYP(LUM)
C 
C               ISOLATE DRIVER TYPE 
C 
        IDTP=IAND(IDTP,37400B)/256
C 
C               INSERT DRIVER TYPE INTO SEG NAME
C 
        IDUMMY = IB2AS(IDTP,MNAM,2,41002B) 
C 
C               SKIP ON FOR TV DISPLAY OR DUMB DISPLAY
C 
        IF(IDTP .EQ. 13B .OR. IP(4) .NE. 0)GO TO 25000 
C 
C               ISOLATE GRAPHICS LU 
C 
        ISDLU=LUM 
C 
C               GET TYPE AND STATUS OF DEVICE 
C 
        CALL DSTYP(ISDLU) 
C 
C               ASSUME 2640 NOT PRESENT 
C 
        IF40=.FALSE.
C 
C               RESET IF 2640 IS PRESENT
C 
  
        IF(IAND(ISDLU,1700B) .NE. 100B)GO TO 25000
C 
C               NOTE 2640 PRESENT 
C 
        IF40=.TRUE. 
C 
C               SET FOR LONG PUTCR VERSION
C 
        IXP=12
C 
25000   CONTINUE
C 
C               NOW LOCK LU TO KEEP OUT OTHERS DURING MANIPULATIONS 
C 
        CALL LURQ(40001B,LUM,1) 
C 
C               ERROR RETURN
C 
         GO TO 80000
C 
1001     CONTINUE 
C 
C               IF TV MONIT OR DUMB TERMINAL SKIP CURSOR MESS 
C 
        IF(IDTP .EQ. 13B .OR. IP(4) .NE. 0)GO TO 43000 
C 
C               GET AN LU FOR NO CR(LF) TO TERMINAL 
C 
        IBLU=2200B+LUM
C 
C               LOCK THE KEYBOARD TO KEEP THE USER FROM MESSING AROUND
C 
        CALL LKB(LUM) 
C 
C               GET THE CURRENT CURSOR POSITION 
C 
        REG=GETCR(IX,IY,ISDLU)
C 
C               SAVE RELATIVE COORDS UNLESS 2640
C 
        IF(IF40)GO TO 30000 
C 
C               SAVE RELATIVE COORDINATES 
C 
        IRX=IRGA
        IRY=IRGB
C 
C               SET PUTCR FOR SHORT VERSION 
C 
        IXP=4 
C 
30000   CONTINUE
C 
C               TURN OFF THE MEMORY LOCK SO PUTCR WILL WORK 
C 
        CALL EXEC(2,IBLU,15555B,-2) 
C 
C               PUT THE CURSOR AT THE TOP OF THE DISPLAY SCREEN 
C 
        REG=PUTCR(0,0,ISDLU,IXP)
C 
C               SKIP RELATIVE DEFINITION IF NOT 2640
C 
        IF(.NOT.IF40)GO TO 43000
C 
C               SAVE FOR SCREEN POSITION CALCULATION FOR ALL TERMS
C 
        IDRY=IRGB 
        IRY=MOD(IY-IDRY+256,128)
C 
43000   CONTINUE
C 
C               RESET KLIN
C 
        KLIN=.FALSE.
C 
C               IF TYPE CHANGE UPDDATE OLD INFO 
C 
        IF(ITYPE .EQ. IMONDS)GO TO 44000
C 
C               NOTE PRE CLEAR NEEDED 
C 
        KLIN=.TRUE. 
C 
C               SAVE NEW TYPE 
C 
        IMONDS=ITYPE
C 
44000  CONTINUE 
C 
C               UPDATE THE COMMON PARAMETERS
C 
        CALL UPDAT
C 
C               SKIP TO TV SEGMENTS FOR TV MONITOR
C 
        IF(IDTP .EQ. 13B)GO TO 63000 
C 
C               IF DUMB TERMINAL NOT REQUESTED SKIP ON
C 
        IF(IP(4) .NE. 2HDU)GO TO 50000
C 
C               CALL FOR DUMB DISPLAY 
C 
        IF(IP(2) .LE. 2)
     .CALL mdum0(LUM,IP(2),NLIN,KLIN)
C 
        IF(IP(2) .EQ. 3)
     .CALL mdum3(LUM,IP(2),NLIN,KLIN)
C 
C               GO TO UNLOCK
C 
        GO TO 84000 
C 
50000   CONTINUE
C 
C               IF NOT RCA TERMINAL SKIP ON 
C 
        IF(IP(4) .NE. 2HRC)GO TO 60000
C 
C               DO RCA DISPLAY AS CALLED FOR
C 
        IF(IP(2) .LE. 2)
     .CALL mr000(LUM,IP(2),NLIN,KLIN)
        IF(IP(2) .EQ. 3)
     .CALL mr003(LUM,IP(2),NLIN,KLIN)
C 
C               CONTINUE ON 
C 
        GO TO 84000 
C 
60000   CONTINUE
C 
C               CALL THE 264X ROUTINES TO DISPLAY HIS INFORMATION 
C 
        IF(IP(2) .LE. 2)
     .CALL mf000(LUM,IP(2),NLIN,KLIN)
        IF(IP(2) .EQ. 3)
     .CALL mf003(LUM,IP(2),NLIN,KLIN)
C 
        GO TO 79999 
C 
63000   CONTINUE
C 
C               CALL TV SEGMENTS
C 
        IF(IP(2) .LE. 2)
     .CALL mv130(LUM,IP(2),NLIN,KLIN)
        IF(IP(2) .EQ. 3)
     .CALL mv133(LUM,IP(2),NLIN,KLIN)
C 
C               GO DO THE UNLOCK ACT
C 
        GO TO 84000 
C 
79999   CONTINUE
C 
8000    CONTINUE
C 
C               TURN MEMORY LOCK ON TO KEEP DISPLAY ON SCREEN 
C 
        CALL EXEC(2,IBLU,15554B,-2) 
C 
9000    CONTINUE
C 
C               NOW REPOSITION CURSOR TO OLD POSITION 
C 
        DO 10000 I=NLIN,IRY-1 
C 
C               MOVE CURSOR DOWN ONE LINE AT A TIME 
C 
        CALL EXEC(2,IBLU,15502B,-2) 
C 
10000   CONTINUE
C 
C               VERIFY CURSOR POSITION
C 
        REG=GETCR(INX,INY,ISDLU)
C 
C               COMPUTE SCREEN RELATIVE CO-ORDINATES FOR DUMB TERMINALS 
C 
        IF(IF40)NLIN=INY-IDRY 
C 
C               GET RELATIVE COORDS FOR SMART TERMS 
C 
        IF(.NOT.IF40)NLIN=IRGB
C 
C               VERIFY IN CORRECT POSITION LOOP BACK TO CORRECT 
C 
        IF(NLIN .LT. IRY)GO TO 9000 
C 
C               MOVE TO ORIGINAL COLUMN IF NOT IN ZERO ORIGINALLY 
C 
        IF(IRX .NE. 0)IDUMMY = PUTCR(IRX,0,ISDLU,3) 
C 
C               NOW UNLOCK KEYBOARD 
C 
        CALL ULKB(LUM)
C 
84000   CONTINUE
C 
C               NOW UNLOCK TH LU FOR THE REST OF THE WORLD
C 
        CALL LURQ(40000B,LUM,1) 
C 
C                ERROR RETURN 
C 
          GO TO 80000 
C 
C               IF NOT TIME SCHEDULED EXIT NOW
C 
85000   CONTINUE
C     WRITE(1,9002) IP(3)
C9002  FORMAT("IP(3) IN MONIT  = ",I5)
        IF(IP(3) .EQ. 0)GO TO 99000 
C 
C               CLEAR REGS FOR SUSPEND
C 
        REG=0.
C 
C     WRITE(1,9003)
C9003  FORMAT("MONIT SUSPENDING")
C               SUSPEND FOR TIME SCHEDULE 
C 
        REG=EXEC(6,0,1) 
C 
C               GET NEW PARAMETERS
C 
        CALL RMPAR(INP) 
C 
C               IF NO PARMS LOOP BACK NOW 
C 
C       IF(IRGB .EQ. 0)GO TO 25000
C 
C               CHECK FOR TERMINATION CALL
C 
        IF(INP(2) .EQ. 10.OR.MQUIT.EQ.2HQU) GOTO 95000
C 
C               MOVE NEW PARMS TO OLD AND START FROM TOP
C 
        DO JK=2,5
          IF (INP(JK).NE.0) IP(JK)=INP(JK)
        ENDDO
C 
        GO TO 1000
C 
C                NORMAL EXIT
C 
89999      GO TO 99000
C 
80000   CONTINUE 
C 
C                ERROR EXIT TELL AND CONTINUE 
C 
        CALL EXEC(2,LUM,21H ** LU LOCK ERROR ***,-21) 
C 
95000   CONTINUE
        CALL EXEC(2,IBLU,15555B,-2)       !  Release screen memory lock
        MQUIT = 2HQU
C 
C               REMOVE THE SEGMENT
C 
C       CALL RPLNK(0,0.0D0) 
C 
C               REMOVE MONIT FROM TIME LIST TO AVOID PROBLEMS 
C 
        CALL EXEC(6,0,2)
C 
99000   CONTINUE
C 
        END 
        END$
