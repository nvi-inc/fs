FTN77,I,Y  
$ALIAS /FSCOM/ , NOALLOCATE
$CDS ON
      SUBROUTINE PASS(IP)  !   TAPE HEAD CONTROL by pass number
C
C  PASS controls the position of the tape recorder head blocks
C
C  INPUT VARIABLES:
C
      DIMENSION IP(1),IP2(1)
C        IP(1) - class # of input parameter buffer
C
C  OUTPUT VARIABLES:
C
C        IP(1) - class #
C        IP(2) - # of records
C        IP(3) - error return
C        IP(4) - who we are
C
      INCLUDE /FS/INCLUDE/FSCOM.FTNI
C
      REAL*4 PNOW(2),POFF(2),MICRONS(2)
      LOGICAL KPAS(2)
      DIMENSION IPARM(2),IREG(2),IBUF(40),IBUF2(40),IPAS(2)
      EQUIVALENCE (REG,IREG(1)),(PARM,IPARM(1))
C
      DATA ILEN /40/
C
C  HISTORY:
C
C  DATE  WHO  WHAT
C 841226 MWH  CREATED
C 850714 WEH  MOVE CAL TO ANOTHER COMMAND, OTHER MINOR THINGS
C 880228 LAR  ADD HEAD OFFSET TO TAPE AUXILIARY FIELD
C 900222 weh  completely rewritten
C
C  1. Get class buffer and decide whether we have to move the heads,
C      or just monitor their position.
C
      ICHOLD = -99
      IOCLAS = 0
      NOREC = 0
C
      ICLCM = IP(1)
      IP(3) = 0
      IF (ICLCM.EQ.0) THEN                     ! ZERO CLASS NUMBER
        IP(3) = -1
        GOTO 990
      ENDIF
      REG = EXEC(21,ICLCM,IBUF,-ILEN)
      NCHAR = MIN0(IREG(2),ILEN)
      IEQ = ISCNC(IBUF,1,NCHAR,75B)
      IF (IEQ.EQ.0) THEN
        GOTO 500
      ELSE IF (JCHAR(IBUF,IEQ+1).EQ.77B) THEN
        GOTO 600
      ELSE IF (ICHCM(IBUF,IEQ+1,LALRM,1,ILENAL).EQ.0) THEN
        IBUF2(1) = 7
        GOTO 700
      ELSE IF (ICHCM(IBUF,IEQ+1,LTSRS,1,ILENTS).EQ.0) THEN
        IBUF2(1) = 6
        GOTO 700
      ENDIF
C
C  2. Step through buffer, getting each parameter and decoding it.
C
C
C  2.2 Get requested head position index.
C
      ICH = IEQ+1
      CALL GTPRM(IBUF,ICH,NCHAR,0,PARM)
      IF (JCHAR(PARM,1).EQ.54B) THEN
        KPAS(1)=.FALSE.
      ELSE IF(JCHAR(PARM,1).EQ.52B) THEN
        IPAS(1)=IPASHD(1)
        KPAS(1)=.TRUE.
      ELSE
        NC = IFLCH(PARM,4)
        IPAS(1) = IAS2B(PARM,1,NC)
        KPAS(1)=.TRUE.
        IF (IPAS(1).LE.0.OR.IPAS(1).GT.100) THEN
          IP(3) = -201
          GOTO 990
        ENDIF
      ENDIF
      IF (KPAS(1)) THEN
      IF (ITAPOF(IPAS(1)).LT.-4000) THEN
        IP(3) = -301
        GOTO 990
      ENDIF
      ENDIF
C
      ICHS=ICH
      CALL GTPRM(IBUF,ICH,NCHAR,0,PARM)
      IF (JCHAR(PARM,1).EQ.54B) THEN
        KPAS(2)=.FALSE.
      ELSE IF(ICHCM(IBUF,ICHS,4HSAME,1,4).EQ.0.AND.KPAS(1)) THEN
        KPAS(2)=.TRUE.
        IPAS(2)=IPAS(1)
      ELSE IF(JCHAR(PARM,1).EQ.52B) THEN
        IPAS(2)=IPASHD(2)
        KPAS(2)=.TRUE.
      ELSE
        NC = IFLCH(PARM,4)
        IPAS(2) = IAS2B(PARM,1,NC)
        KPAS(2)=.TRUE.
        IF (IPAS(2).LE.0.OR.IPAS(2).GT.100) THEN
          IP(3) = -202
          GOTO 990
        ENDIF
      ENDIF
      IF(KPAS(2)) THEN
      IF (ITAPOF(IPAS(2)).LT.-4000) THEN
        IP(3) = -302
        GOTO 990
      ENDIF
      ENDIF
C
      IHD=0
      IF(KPAS(1)) IHD=IHD+1
      IF(KPAS(2)) IHD=IHD+2
      IF(IHD.EQ.0) THEN
        IP(3)=-303
        GOTO 990
      ENDIF
C
C  3. Now handle head positioning
C
      ICHOLD = ICHK20
      ICHK20 = 0
C
      CALL LVDONN('LOCK',IP)
      IF(IP(3).NE.0) GOTO 800
C
      CALL SET_PASS(IHD,IPAS ,MICRONS,IP,0.40)
C
C  save the results in common
C
      DO I=1,2
        IF(KPAS(I)) THEN
          POSNHD(I)=MICRONS(I)
          IPASHD(I)=IPAS(I)
          KPOSHD_FS(I)=.TRUE.
        ENDIF
      ENDDO
C
      IF(IP(3).NE.0) GO TO 800
C
C  4. Put micron pos. into AUX data Field, IF WE SET UP THE WRITE HEAD
C
      IF(IHD.EQ.2) GO TO 500
      CALL FRMAUX(LAUXFM,NINT(POSNHD(1)),IPASHD(1))
C
      NREC=0
      ICLASS=0
C
      IBUF2(1) = 0
      IBUF2(2) = 2HFM
      IDUMM1 = ICHMV(IBUF2,5,LAUXFM,1,8)
      NCH = 12
      CALL ADD_CLASS(IBUF2,-NCH,ICLASS,NREC)
C                   Send out the first 8 chars ...
      IBUF2(1) = 5
      IBUF2(2) = 2H!
      NCH = 3
      CALL ADD_CLASS(IBUF2,-NCH,ICLASS,NREC)
C                   ... as ! type data
      IBUF2(1) = 0
      IBUF2(2) = 2HFM
      IDUMM1 = ICHMV(IBUF2,5,LAUXFM,9,4)
      IDUMM1 = ICHMV(IBUF2,9,4H0000,1,4)
      NCH = 12
      CALL ADD_CLASS(IBUF2,-NCH,ICLASS,NREC)
C                   Send out the last 4 chars and zeros ...
      IBUF2(1) = 5
      IBUF2(2) = 2H%
      NCH = 3
      CALL ADD_CLASS(IBUF2,-NCH,ICLASS,NREC)
C
      CALL RUN_MATCN(ICLASS,NREC,IP)
      CALL CLRCL(IP(1))
      IP(2)=0
      IF(IP(3).NE.0)  GO TO 800
C
C  5. Here we read the device to get current head positions.
C
500   CONTINUE
C
C turn on LVDT if we didn't earlier
C
      IF(IEQ.EQ.0) THEN
        CALL LVDONN('LOCK',IP)
        IF(IP(3).NE.0) GO TO 800
      ENDIF
C
C  read the postions
C
      CALL MIC_READ(3,IPASHD,PNOW,IP)
      IF(IP(3).NE.0) GOTO 800
C
C find the deltas
C
      DO I=1,2
        POFF(I) = PNOW(I) - POSNHD(I)
      ENDDO
C
C  Turn off LVDT Osillator
C
      CALL LVDOFN('UNLOCK',IP)
      IF(IP(3).NE.0) GO TO 990
C
C  6. Now we must prepare a response.
C
600   CONTINUE
      NCH = IEQ
      IF (NCH.EQ.0) NCH = NCHAR+1
      NCH = ICHMV(IBUF,NCH,2H/ ,1,1)
      DO I=1,2
        NCH = NCH+IB2AS(IPASHD(I),IBUF,NCH,100000B+2)
        NCH = MCOMA(IBUF,NCH)
      ENDDO
C
      DO I=1,2
        NCH = NCH+IR2AS(POSNHD(I),IBUF,NCH,8,1)
        NCH = MCOMA(IBUF,NCH)
      ENDDO
C
      DO I=1,2
        NCH = NCH+IR2AS(PNOW(I),IBUF,NCH,8,1)
        NCH = MCOMA(IBUF,NCH)
      ENDDO
C
      DO I=1,2
        NCH = NCH+IR2AS(POFF(I),IBUF,NCH,8,1)
        NCH = MCOMA(IBUF,NCH)
      ENDDO
C
      NCH = NCH-2
      CALL ADD_CLASS(IBUF ,-NCH,IOCLAS,NOREC)
      IP(3) = 0
      GOTO 990
C
C  7. Reset alarm or Test/Reset
C
700   CONTINUE
      IBUF2(2) = 2HHD
      ICLASS = 0
      NREC=0
      CALL ADD_CLASS(IBUF2,-4,ICLASS,NREC)
      CALL RUN_MATCN(ICLASS,NREC,IP)
      CALL CLASS_FRM(IBUF,NCHAR,IP)
      GOTO 999
C
C   turn off LVDT, for an error
C
800   CONTINUE
      CALL LVDOFN('UNLOCK',IP2)
      IF(IP2(3).NE.0) THEN
        CALL LOGIT(0,0,0,0,IP2(3),IP2(4),IP2(5))
        GOTO 999
      ENDIF
C
C  9. That's all for now.
C
990   IP(1) = IOCLAS
      IP(2) = NOREC
      IP(4) = 2HQ@
999   CONTINUE
      IF (ICHOLD.NE.-99) ICHK20 = ICHOLD
      IF (ICHOLD.GE.0) ICHK20 = MOD(ICHOLD,1000)+1
      RETURN
      END
