FTN77,I,Y  
$ALIAS /FSCOM/ , NOALLOCATE
$CDS ON
      SUBROUTINE STACK(IP)  ! TAPE HEAD CONTROL by micron position
C
C  STACK controls the position of the tape recorder head blocks
C
C  INPUT VARIABLES:
C
      DIMENSION IP(1),IP2(5)
C        IP(1) - class # of input parameter buffer
C
C  OUTPUT VARIABLES:
C
C        IP(1) - class #
C        IP(2) - # of records
C        IP(3) - error return
C        IP(4) - who we are
C
C  COMMON BLOCKS USED:
      INCLUDE /FS/INCLUDE/FSCOM.FTNI
C
C  CONTENTS:  ITAPOF(100)     TAPE HEAD OFFSETS FOR EACH PASS, IN MICRONS
C             POSNHD(2)       CURRENT HEAD POSITION  (OUTPUT)
C             IPASHD(2)       CURRENT PASS NUMBER  (OUTPUT)
C
C  LOCAL VARIABLES:
C
      REAL*4 PNOW(2),POFF(2),MICRONS(2)
      LOGICAL KMIC(2)
      DIMENSION IPARM(2),IREG(2),IBUF(40),IBUF2(40),IPAS(2)
      EQUIVALENCE (REG,IREG(1)),(PARM,IPARM(1))
C
      DATA ILEN /40/
C
C  HISTORY:
C
C  DATE  WHO  WHAT
C 900222 weh  created by cloning from new PASS command
C
C  1. Get class buffer and decide whether we have to move the heads,
C      or just monitor their position.
C
      ICHOLD = -99
      IOCLAS = 0
      NOREC = 0
C
      ICLCM = IP(1)
      IP(3) = 0
      IF (ICLCM.EQ.0) THEN                     ! ZERO CLASS NUMBER
        IP(3) = -1
        GOTO 990
      ENDIF
      REG = EXEC(21,ICLCM,IBUF,-ILEN)
      NCHAR = MIN0(IREG(2),ILEN)
      IEQ = ISCNC(IBUF,1,NCHAR,75B)
      IF (IEQ.EQ.0) THEN
        GOTO 500
      ELSE IF (JCHAR(IBUF,IEQ+1).EQ.77B) THEN
        GOTO 600
      ELSE IF (ICHCM(IBUF,IEQ+1,LALRM,1,ILENAL).EQ.0) THEN
        IBUF2(1) = 7
        GOTO 700
      ELSE IF (ICHCM(IBUF,IEQ+1,LTSRS,1,ILENTS).EQ.0) THEN
        IBUF2(1) = 6
        GOTO 700
      ENDIF
C
C  2. Step through buffer, getting each parameter and decoding it.
C
      ICH = IEQ+1
      ICS=ICH
      CALL GTPRM(IBUF,ICH,NCHAR,0,PARM)
      IF (JCHAR(PARM,1).EQ.54B) THEN
        KMIC(1)=.FALSE.
      ELSE IF(JCHAR(PARM,1).EQ.52B) THEN
        MICRONS(1)=POSNHD(1)
        KMIC(1)=.TRUE.
      ELSE
        CALL GTPRM(IBUF,ICS,NCHAR,2,PARM,IERR)
        IF(IERR.NE.0) THEN
          IP(3) = -211
          GOTO 990
        ENDIF
        MICRONS(1)=PARM
        KMIC(1)=.TRUE.
      ENDIF
C
C  2.2 Get requested micron position
C
      ICS=ICH
      CALL GTPRM(IBUF,ICH,NCHAR,0,PARM)
      IF (JCHAR(PARM,1).EQ.54B) THEN
        KMIC(2)=.FALSE.
      ELSE IF(JCHAR(PARM,1).EQ.52B) THEN
        MICRONS(2)=POSNHD(2)
        KMIC(2)=.TRUE.
      ELSE
        CALL GTPRM(IBUF,ICS,NCHAR,2,PARM,IERR)
        IF(IERR.NE.0) THEN
          IP(3) = -212
          GOTO 990
        ENDIF
        MICRONS(2)=PARM
        KMIC(2)=.TRUE.
      ENDIF
C
C  2.3 now get direction
C
      CALL GTPRM(IBUF,ICH,NCHAR,0,PARM)
      IF(ICHCM(PARM,1,2HU ,1,1).EQ.0) THEN
        IDIR=0
      ELSE IF(ICHCM(PARM,1,2HF ,1,1).EQ.0) THEN
        IDIR=-1
      ELSE IF(ICHCM(PARM,1,2HR ,1,1).EQ.0) THEN
        IDIR=-2
      ELSE IF (JCHAR(PARM,1).EQ.52B) THEN
        IDIR=IPASHD(1)
      ELSE IF (JCHAR(PARM,1).EQ.54B) THEN
        IDIR=0
      ELSE IF(KMIC(1)) THEN
        IP(3) = -213
        GOTO 990
      ENDIF
      IPAS(1)=IDIR
C
      CALL GTPRM(IBUF,ICH,NCHAR,0,PARM)
      IF(ICHCM(PARM,1,2HU ,1,1).EQ.0) THEN
        IDIR=0
      ELSE IF(ICHCM(PARM,1,2HF ,1,1).EQ.0) THEN
        IDIR=-1
      ELSE IF(ICHCM(PARM,1,2HR ,1,1).EQ.0) THEN
        IDIR=-2
      ELSE IF (JCHAR(PARM,1).EQ.52B) THEN
        IDIR=IPASHD(2)
      ELSE IF (JCHAR(PARM,1).EQ.54B) THEN
        IDIR=0
      ELSE IF(KMIC(2)) THEN
        IP(3) = -214
        GOTO 990
      ENDIF
      IPAS(2)=IDIR
C
      IHD=0
      IF(KMIC(1)) IHD=IHD+1
      IF(KMIC(2)) IHD=IHD+2
      IF(IHD.EQ.0) THEN
        IP(3)=-311
        GOTO 990
      ENDIF
C
C  3. Now handle head positioning
C
      ICHOLD = ICHK20
      ICHK20 = 0
C
      CALL LVDONN('LOCK',IP)
      IF(IP(3).NE.0) GOTO 800
C
C  save the results in common
C
      DO I=1,2
        IF(KMIC(I)) THEN
          POSNHD(I)=MICRONS(I)
          IPASHD(I)=IPAS(I)
          KPOSHD_FS(I)=.TRUE.
        ENDIF
      ENDDO
C
      CALL SET_MIC(IHD,IPAS ,MICRONS,IP,0.40)
      IF(IP(3).NE.0) GO TO 800
C
C  4. Put micron pos. into AUX data Field, IF WE SET UP THE WRITE HEAD
C
      IF(IHD.EQ.2) GO TO 500
      CALL FRMAUX(LAUXFM,NINT(POSNHD(1)),IPASHD(1))
      NREC=0
      ICLASS=0
C
      IBUF2(1) = 0
      IBUF2(2) = 2HFM
      IDUMM1 = ICHMV(IBUF2,5,LAUXFM,1,8)
      NCH = 12
      CALL ADD_CLASS(IBUF2,-NCH,ICLASS,NREC)
C                   Send out the first 8 chars ...
      IBUF2(1) = 5
      IBUF2(2) = 2H!
      NCH = 3
      CALL ADD_CLASS(IBUF2,-NCH,ICLASS,NREC)
C                   ... as ! type data
      IBUF2(1) = 0
      IBUF2(2) = 2HFM
      IDUMM1 = ICHMV(IBUF2,5,LAUXFM,9,4)
      IDUMM1 = ICHMV(IBUF2,9,4H0000,1,4)
      NCH = 12
      CALL ADD_CLASS(IBUF2,-NCH,ICLASS,NREC)
C                   Send out the last 4 chars and zeros ...
      IBUF2(1) = 5
      IBUF2(2) = 2H%
      NCH = 3
      CALL ADD_CLASS(IBUF2,-NCH,ICLASS,NREC)
C
      CALL RUN_MATCN(ICLASS,NREC,IP)
      CALL CLRCL(IP(1))
      IP(2)=0
      IF(IP(3).NE.0)  GO TO 800
C
C  5. Here we read the device to get current head positions.
C
500   CONTINUE
C
C turn on LVDT if we didn't earlier
C
      IF(IEQ.EQ.0) THEN
        CALL LVDONN('LOCK',IP)
        IF(IP(3).NE.0) GO TO 800
      ENDIF
C
C  read the postions
C
      CALL MIC_READ(3,IPASHD,PNOW,IP)
      IF(IP(3).NE.0) GOTO 800
C
C find the deltas
C
      DO I=1,2
        POFF(I) = PNOW(I) - POSNHD(I)
      ENDDO
C
C  Turn off LVDT Osillator
C
      CALL LVDOFN('UNLOCK',IP)
      IF(IP(3).NE.0) GO TO 990
C
C  6. Now we must prepare a response.
C
600   CONTINUE
      NCH = IEQ
      IF (NCH.EQ.0) NCH = NCHAR+1
      NCH = ICHMV(IBUF,NCH,2H/ ,1,1)
      DO I=1,2
        NCH = NCH+IR2AS(POSNHD(I),IBUF,NCH,8,1)
        NCH = MCOMA(IBUF,NCH)
      ENDDO
C
      DO I=1,2
        IF(IPASHD(I).EQ.0) THEN
          IDUM=2HU,
        ELSE IF(MOD(IPASHD(I),2).EQ.0) THEN
          IDUM=2HR,
        ELSE
          IDUM=2HF,
        ENDIF
        NCH = ICHMV(IBUF,NCH,IDUM,1,2)
      ENDDO
C
      DO I=1,2
        NCH = NCH+IR2AS(PNOW(I),IBUF,NCH,8,1)
        NCH = MCOMA(IBUF,NCH)
      ENDDO
C
      DO I=1,2
        NCH = NCH+IR2AS(POFF(I),IBUF,NCH,8,1)
        NCH = MCOMA(IBUF,NCH)
      ENDDO
C
      NCH = NCH-2
      CALL ADD_CLASS(IBUF,-NCH,IOCLAS,NOREC)
      IP(3) = 0
      GOTO 990
C
C  7. Reset alarm or Test/Reset
C
700   CONTINUE
      IBUF2(2) = 2HHD
      ICLASS = 0
      NREC=0
      CALL ADD_CLASS(IBUF2,-4,ICLASS,NREC)
      CALL RUN_MATCN(ICLASS,NREC,IP)
      CALL CLASS_FRM(IBUF,NCHAR,IP)
      GOTO 999
C
C   turn off LVDT, for an error
C
800   CONTINUE
      CALL LVDOFN('UNLOCK',IP2)
      IF(IP2(3).NE.0) THEN
        CALL LOGIT(0,0,0,0,IP2(3),IP2(4),IP2(5))
        GOTO 999
      ENDIF
C
C  9. That's all for now.
C
990   IP(1) = IOCLAS
      IP(2) = NOREC
      IP(4) = 2HQ@
999   CONTINUE
      IF (ICHOLD.NE.-99) ICHK20 = ICHOLD
      IF (ICHOLD.GE.0) ICHK20 = MOD(ICHOLD,1000)+1
      RETURN
      END
