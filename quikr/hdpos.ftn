FTN77,I,Y
$ALIAS /FSCOM/ , NOALLOCATE
$CDS ON
      SUBROUTINE HDPOS(I,IPASS,IP)   ! POSITION TAPE HEAD
C
C  INPUT PARAMETERS:
C     I:  NUMBER OF HEAD TO BE POSITIONED (1=WRITE, 2=READ)
C     IPASS:  TAPE PASS NUMBER
C
C  OUTPUT PARAMETERS:
      DIMENSION IP(5)     !  IP(3) IS USED TO RETURN ERROR NUMBERS TO CALLER
C 
C  CALLED SUBROUTINES:  POSIT (FIND CURRENT POSITION), HMOVE (MOVE HEAD)
C
C  COMMON BLOCKS USED:  /FSCOM/
      INCLUDE /FS/INCLUDE/FSCOM.FTNI
C       VARIABLES:  FASTFW, SLOWFW, FASTRV, SLOWRV:   TAPE SPEEDS
C                   ITAPOF:   DESIRED HEAD POSITION FOR THIS PASS NUMBER
C 
C  LOCAL VARIABLES:
C     PNOWX:  CURRENT HEAD POSITION
C     POFFX:  DIFFERENCE BETWEEN CURRENT AND REQUESTED HEAD POSITIONS
C     IDIRCT:  DIRECTION IN WHICH TAPE IS TO BE MOVED (1=FORWARD, 0=REVERSE)
C     FASTSP, SLOWSP:  TAPE SPEEDS FOR DESIRED DIRECTION
C     IDSPD:  DESIRED SPEED (1=FAST, 0=SLOW)
C     TMOVE:  ESTIMATE OF TIME REQUIRED TO MOVE HEAD (UNITS OF 40 MICROSEC)
C     NTRIES:  NUMBER OF ITERATION IN PNOWX
C
C  LOCAL CONSTANTS:
      PARAMETER (MAXTRY=20)     !  NUMBER OF TRIES AFTER WHICH TO GIVE UP
      PARAMETER (PTOLER=.5)     !  TOLERANCE IN POSX
C
      LOGICAL NEW
C
C  LAST MODIFIED:  LAR GETS POSITION REQUESTS FROM COMMON  <880826.2357>
C
D     WRITE(LU,*) 'HDPOS:I,IPASS= ',I,IPASS
C
      NEW=.TRUE.
      DO NTRIES=0,MAXTRY
        CALL POSIT(I,IPASS,PNOWX,IP,NEW)
D       WRITE(LU,9987) IP
D9987   FORMAT(" HDPOS: IP(1...5)= ",5I7)
        IF (IP(3).LT.0) RETURN         ! ERROR IN POSIT
        POFFX = PNOWX - ITAPOF(IPASS)
D       WRITE(LU,9002) ITAPOF(IPASS),PNOWX,POFFX
D9002   FORMAT("REQUESTED,ACTUAL POS,DELTA = "3F10.4)
        IF (ABS(POFFX).LE.PTOLER) RETURN         ! SUCCESSFUL TERMINATION
C
        IF (POFFX.LE.0.) THEN
          FASTSP = FASTRV(I)
          SLOWSP = SLOWRV(I)
        ELSE
          FASTSP = FASTFW(I)
          SLOWSP = SLOWFW(I)
        ENDIF
C
        TMOVE=ABS(POFFX/SLOWSP)
D       WRITE(1,*) 'TMOVE,POFFX,SLOWSP',TMOVE,POFFX,SLOWSP
        IF (TMOVE.GE.1.) THEN
          IHSPD = 1
          TMOVE = ABS(POFFX/FASTSP) * 25000.
D         WRITE(1,*) 'IHSPD,TMOVE,POFFX,FASTSP',IHSPD,TMOVE,POFFX,FASTSP
        ELSE
          IHSPD = 0
          TMOVE = ABS(POFFX/SLOWSP) * 25000.
D         WRITE(1,*) 'IHSPD,TMOVE,POFFX,SLOWSP',IHSPD,TMOVE,POFFX,SLOWSP
        ENDIF
C
        IF (POFFX.GT.0.) THEN
          IDIRCT = 1
        ELSE
          IDIRCT = 0
        ENDIF
C
        IF (TMOVE.GE.24000.) THEN
D         WRITE(1,*) 'IDIRCT',IDIRCT
          CALL HMOVE(I,IHSPD,IDIRCT,24000,IP)
          IF (IP(3).LT.0) RETURN         ! ERROR IN HMOVE
          CALL SUSP(2,1)
          CALL SUSP(1,5)
          NTRIES = NTRIES - 1
        ELSE
          IDUR = TMOVE
D         WRITE(1,*) 'IDUR,IDIRCT',IDUR,IDIRCT
          CALL HMOVE(I,IHSPD,IDIRCT,IDUR,IP)
          IF (IP(3).LT.0) RETURN         ! ERROR IN HMOVE
          IWAIT = TMOVE/250.
          IWAIT = IWAIT + 5
          CALL SUSP(1,IWAIT)
        ENDIF
      ENDDO
C
      IERR = -300-I
      RETURN
C
      END
