
/*
 * This routine opens the device driver for the ibcon routines.
 * It uses the configuration file defined in the dev.ctl file for the 
 * board located in /dev directory. This configuration file uses all
 * the default settings except for the DMA which should be 1 for on. 
   NRV 921124 Added external boardid for rddev to use.
 */
#include <memory.h>

#ifdef CONFIG_GPIB
#include <ib.h>
#include <ibP.h>
#else
extern int ibsta;
extern int iberr;
extern int ibcnt;
#endif

extern int ibser;
#include "sib.h"

#define NULLPTR (char *) 0
#define	IBCODE	300
#define IBSCODE 400

int ID_hpib;
int serial;

int opbrd_(dev,devlen,error,ipcode)

int *dev;
int *devlen;
int *error;
long *ipcode;

{
  char device[65];
  char *nameend;
  int ierr;

  *error=0;
  *ipcode = 0;

  if ((*devlen < 0) || (*devlen > 64))
  {
    *error = -3;
    memcpy((char *)ipcode,"BL",2);
    return -1;
  }

  nameend = memccpy(device, dev, ' ', *devlen);
  if (nameend != NULLPTR)
    *(nameend-1) = '\0';
  else 
    *(device + *devlen) = '\0';

  ID_hpib=-1;

/* find the device and assign a file descriptor */

#ifdef CONFIG_GPIB
/*
  ID_hpib = ibfind(device);
  if(ID_hpib < 0 && iberr!=ENSD) {
    *error = -(IBCODE + iberr);
    memcpy((char *)ipcode,"BF",2);
    return -1;
  }
*/
#endif
  if(ID_hpib < 0) {
    long baud;
    int len, parity, bits, stop;
    len = strlen(device);
    baud=9600;
    parity=0;
    bits=7;
    stop=1;
    ierr = portopen_(&ID_hpib,device,len,&baud,&parity,&bits,&stop);
    if(ierr <0) {
      *error=-(500+ierr);
      memcpy((char *)ipcode,"BP",2);
      return -1;
    }
    serial=1;
  } else
    serial=0;

/* put the hpib board 'on-line' and return ibsta as status */

  if(!serial) {
#ifdef CONFIG_GPIB
/*
    ierr=ibonl(IB_hpib);
*/
    ierr=0;
    if (ierr&ERR) {
      *error = -(IBCODE + iberr);
      memcpy((char *)ipcode,"BO",2);
      return -1;
    }
#else
    *error = -(IBCODE + 22);
    return -1;
#endif
  } else {
    ierr=sib(ID_hpib,"o\r",0,0,100);
    if(ierr<0) {
      *error = -520+ierr;
      memcpy((char *)ipcode,"BO",2);
      return -1;
    } else if (ibsta&S_ERR) {
      *error = -(IBSCODE + iberr);
      memcpy((char *)ipcode,"BO",2);
      return -1;
    }
  }

/* send an interface clear, making the hpib controller-in-chage */

  if (!serial) {
#ifdef CONFIG_GPIB
    if (ibsic(ID_hpib)&ERR) {
      *error = -(IBCODE + iberr);
      memcpy((char *)ipcode,"BS",2);
      return;
    }
#else
    *error = -(IBCODE + 22);
    return;
#endif
  } else {
    ierr=sib(ID_hpib,"si\r",0,0,100);
    if(ierr<0) {
      *error = -520+ierr;
      memcpy((char *)ipcode,"BS",2);
      return -1;
    } else if(ibsta&S_ERR) {
      *error = -(IBSCODE + iberr);
      memcpy((char *)ipcode,"BS",2);
      return -1;
    }
  }
  
  if(serial) {
    ierr=sib(ID_hpib,"eot 1\r",0,0,100);
      if(ierr<0) {
	*error = -520+ierr;
	memcpy((char *)ipcode,"BE",2);
	return -1;
      } else if(ibsta&(S_ERR|S_TIMO)) {
	*error = -(IBSCODE + iberr);
	memcpy((char *)ipcode,"BE",2);
	return -1;
      }
  }

  if (serial) {
    ierr=sib(ID_hpib,"eos D\r",0,0,100);
    if(ierr<0) {
      *error = -520+ierr;
      memcpy((char *)ipcode,"BT",2);
      return -1;
    } else if(ibsta&(S_ERR|S_TIMO)) {
      *error = -(IBSCODE + iberr);
      memcpy((char *)ipcode,"BT",2);
      return -1;
    }
  }

  if (serial) {
    ierr=sib(ID_hpib,"stat c n\r",0,0,100);
    if(ierr<0) {
      *error = -520+ierr;
      memcpy((char *)ipcode,"BN",2);
      return -1;
    } else if(ibsta&(S_ERR|S_TIMO)) {
      *error = -(IBSCODE + iberr);
      memcpy((char *)ipcode,"BN",2);
      return -1;
    }
  }

  return serial;
}
