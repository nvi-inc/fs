C vexf.f FORTRAN VEX library
C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012
C-----------------------------------------------------------------------
      integer function fvex_open(ptr_ch(name),
     &                           vex)
      implicit none
      character*(*) name
      integer vex
C
C
C opens a vex file and reads it into memory
C
C input:
C   character*(*) name      - pathname to file to be read in
C                             null terminated
C
C output:
C   integer vex             - vex file reference, for subsequent calls
C   integer (return value)  - error code
C                           - non-zero indicates error
C                             -1 = file could not be opened
C                             -2 = file did not parse succesfully
      return
      end
C-----------------------------------------------------------------------
      integer function fget_station_def(ptr_ch(station),len(station),
     &                                  vex)
      implicit none
      character*(*) station
      integer vex
C
C returns the station defs in the $STATION section of the vex file
C
C To retreive the list of station defs, call the this routine the first
C time with vex set to the value returned by open_vex, on susequent
C calls use 0. If fvex_len reports that the returned character string has
C zero length then al the stations have been returned.
C
C input:
C   integer vex             - vex file reference
C                             use value returned open_vex for first call
C                             use 0 for subsequent calls
C output:
C   character*(*) station   - station def name
C                             use fvex_len to determine useful length
C                             should be at least 1 character larger than
C                             longest possible value to hold null termination
C   integer (return value)  - error code, zero indicates no error
C                             -4 = station def name did not fit in station
C
      return
      end
C-----------------------------------------------------------------------
      integer function fget_mode_def(ptr_ch(mode),len(mode),
     &                               vex)
      implicit none
      character*(*) mode
      integer vex
C
C returns the mode def names from the $MODE section of the vex file
C
C To retreive the list of mode defs, call the this routine the first
C time with vex set to the value returned by open_vex, on susequent
C calls use 0. If fvex_len reports that the returned character string has
C zero length then al the stations have been returned.
C
C input:
C   integer vex             - vex file reference
C                             use value returned open_vex for first call
C                             use 0 for subsequent calls
C output:
C   character*(*) mode      - mode def name
C                             use fvex_len to determine useful length
C                             should be at least 1 character larger than
C                             longest possible value to hold null termination
C   integer (return value)  - error code, zero indicates no error
C                             -4 =  mode def name did not fit in mode
C
      return
      end
C-----------------------------------------------------------------------
      integer function fget_source_def(ptr_ch(source),len(source),
     &                                 vex)
      implicit none
      character*(*) source
      integer vex
C
C returns the source defs in the $SOURCE section of the vex file
C
C To retreive the list of source defs, call the this routine the first
C   time with vex set to the value returned by open_vex, on susequent calls
C   use 0. If fvex_len reports that the returned character string has zero
C   length then al the stations have been returned.
C
C input:
C   integer vex             - vex file reference
C                             use value returned open_vex for first call
C                             use 0 for subsequent calls
C output:
C   character*(*) source    - source def name
C                             use fvex_len to determine useful length
C                             should be at least 1 character larger than
C                             longest possible value to hold null termination
C   integer (return value)  - error code, zero indicates no error
C                             -4 = source def name did not fit in source
C
      return
      end
C-----------------------------------------------------------------------
      integer function fget_all_lowl(ptr_ch(station),
     &                               ptr_ch(mode),
     &                               ptr_ch(statement),
     &                               ptr_ch(primitive),
     &                               vex)
      implicit none
      character*(*) station,mode,statement,primitive
      integer vex
C      
C get the low-level statement associated with a mode for a given statement
C
C This routine can be used to retrieve all the low-level statememts
C   associated with a given mode for a given station. Call this routine
C   the first time with vex set to the value returned by open_vex, on
C   susequent calls use 0. The call with vex nonzero should specify
C   the station, mode, statement, and primitive block (containing the
C   statement). When vex is zero, station, mode, statement, and primitive
C   are ignored.
C
C When this routine does not return an error, the fields can be accessed
C   using fvex_field.
C
C   Statements are returned in order of $MODE, $STATION, $GLOBAL.
C
C input:
C   character*(*) station     - station def name, null terminated
C   character*(*) mode        - mode def name, null terminated
C   character*(*) statement   - the statement to be retrieved, null terminated
C   character*(*) primitive   - primitive block from which station
C                               should be retrieved. omit the leading "$"
C                               null terminated
C   integer vex               - vex file reference
C                               use value returned open_vex for first call
C                               use 0 for subsequent calls
C output:
C   integer (return value)    - error code, zero indicates no error
C                               -3 = no more statements to return
C
      return
      end
C-----------------------------------------------------------------------
      integer function fget_mode_lowl(ptr_ch(station),
     &                                ptr_ch(mode),
     &                                ptr_ch(statement),
     &                                ptr_ch(primitive),
     &                                vex)
      implicit none
      character*(*) station,mode,statement,primitive
      integer vex
C      
C get the low-level statement associated with a mode for a given statement
C
C This routine can be used to retrieve the $MODE specified low-level statememts
C associated with a given mode for a given station. Call this routine
C the first time with vex set to the value returned by open_vex, on
C susequent calls use 0. The call with vex nonzero should specify
C the station, mode, statement, and primitive block (containing the
C statement). When vex is zero, station, mode, statement, and primitive
C are ignored.
C
C When this routine does not return an error, the fields can be accessed
C   using fvex_field.
C
C Information specified in the $STATION and $GLOBAL blocks is not
C returned. In general this routine is not useful, get_all_lowl is
C usually what is wanted.
C
C  input:
C   character*(*) station     - station def name, null terminated
C   character*(*) mode        - mode def name, null terminated
C   character*(*) statement   - the statement to be retrieved, null terminated
C   character*(*) primitive   - primitive block from which station
C                               should be retrieved. omit the leading "$"
C                               null terminated
C  integer vex                - vex file reference
C                               use value returned open_vex for first call
C                               use 0 for subsequent calls
C  output:
C   integer (return value)    - error code, zero indicates no error
C                               -3 = no more statements to return
C
      return
      end
C-----------------------------------------------------------------------
      integer function fget_station_lowl(ptr_ch(station),
     &                                   ptr_ch(statement),
     &                                   ptr_ch(primitive),
     &                                   vex)
      implicit none
      character*(*) station,statement,primitive
      integer vex
C      
C get the low-level statement associated with a mode for a given statement
C
C This routine can be used to retrieve the $STATION specified low-level
C   statememts associated with a station. Call this routine the first time
C   with vex set to the value returned by open_vex, on susequent calls
C   use 0. The call with vex nonzero should specify the station, statement,
C   and primitive block (containing the statement). When vex is zero,
C   station, statement, and primitive are ignored.
C
C When this routine does not return an error, the fields can be accessed
C   using fvex_field.
C
C Information specified in the $MODE and $GLOBAL blocks is not
C   returned.
C
C  input:
C   character*(*) station     - station def name, null terminated
C   character*(*) statement   - the statement to be retrieved, null terminated
C   character*(*) primitive   - primitive block from which station
C                               should be retrieved. omit the leading "$"
C                               null terminated
C   integer vex               - vex file reference
C                               use value returned open_vex for first call
C                               use 0 for subsequent calls
C  output:
C   integer (return value)    - error code, zero indicates no error
C                               -3 = no more statements to return
C
      return
      end
C-----------------------------------------------------------------------
      integer function fget_global_lowl(ptr_ch(statement),
     &                                  ptr_ch(primitive),
     &                                  vex)
      implicit none
      character*(*) statement,primitive
      integer vex
C      
C get the low-level statement associated with a mode for a given statement
C
C This routine can be used to retrieve all the low-level statememts
C   global referenced. Call this routine the first time with vex set to the
C   value returned by open_vex, on susequent calls use 0. The call with vex
C   nonzero should specify the statement  and primitive block (containing
C   the statement). When vex is zero statement and primitive are ignored.
C
C When this routine does not return an error, the fields can be accessed
C   using fvex_field.
C
C Information specified in the $MODE and $STATION blocks is not
C   returned.
C
C  input:
C   character*(*) statement   - the statement to be retrieved, null terminated
C   character*(*) primitive   - primitive block from which station
C                               should be retrieved. omit the leading "$"
C                               null terminated
C  integer vex                - vex file reference
C                               use value returned open_vex for first call
C                               use 0 for subsequent calls
C  output:
C   integer (return value)    - error code, zero indicates no error
C                               -3 = no more statements to return
C
      return
      end
C-----------------------------------------------------------------------
      integer function fget_scan_station(ptr_ch(start),len(start),
     &                                   ptr_ch(mode),len(mode),
     &                                   ptr_ch(station),
     &                                   vex)
      implicit none
      character*(*) start,mode,station
      integer vex
C
C This routine can be used to retrieve all of the station statments
C   associated with a station. Call this routine the first time with vex set
C   to the value returned by open_vex, on susequent calls use 0. When vex
C   is zero, station is ignored. The call with vex nonzero should specify
C   the station. When vex is zero station is ignored.
C
C When this routine does not return an error, the fields can be accessed
C   using fvex_field.
C
C When this routine does not return an error, the source names can be
C   accessed using fvex_scan_source.
C
C  input:
C   character*(*) station     - the station to return statements for
C                               null terminated
C   integer vex               - vex file reference
C                               use value returned open_vex for first call
C                               use 0 for subsequent calls
C  output:
C   character*(*) start       - nominal start time for this scan
C                               use fvex_len to determine useful length
C                               should be at least 1 character larger than
C                               longest possible value to hold null
C                               termination
C   character*(*) mode        - mode for this scan
C                               use fvex_len to determine useful length
C                               should be at least 1 character larger than
C                               longest possible value to hold null
C                               termination
C   integer (return value)    - error code, zero indicates no error
C                               -3 = no more station statements
C                               -4 = start time did not fit in start
C                               -5 = mode did not fit in mode
C
      return
      end
C-----------------------------------------------------------------------
      integer function fget_source_lowl(ptr_ch(source),
     &                                  ptr_ch(statement),
     &                                  vex)
      implicit none
      character*(*) source,statement
      integer vex
C      
C get the low-level statement associated with a source
C
C This routine can be used to retrieve the $SOURCE low-level statements
C   associated with a given source def. Call
C   this routine the first time with vex set to the value returned by
C   open_vex, on subsequent calls use 0. The call with vex nonzero should
C   specify the source and the statement. When vex is zero, source and
C   statement are ignored are ignored.
C
C When this routine does not return an error, the fields can be accessed
C   using fvex_field.
C
C input:
C   character*(*) source      - source def name, null terminated
C   character*(*) statement   - the statement to be retrieved, null terminated
C   integer vex               - vex file reference
C                               use value returned open_vex for first call
C                               use 0 for subsequent calls
C output:
C   integer (return value)    - error code, zero indicates no error
C                               -3 = no more statements to return
C
      return
      end
C-----------------------------------------------------------------------
      integer function fvex_len(ptr_ch(field))
      implicit none
      character*(*) field
C
C Returns the number of useful characters in a vex field
C
C input:
C   character*(*) field      - vex field to be examined, null terminated
C
C output:
C   integer (return value)   - number of useful characters in field
C                              0 <= (return value) <= (*)
C
      return
      end
C-----------------------------------------------------------------------
      integer function fvex_field(n,ptr_ch(field),len(field))
      implicit none
      integer n
      character*(*) field
C
C Returns the field from a statement located using get_*_lowl*() routine.
C
C input:
C   integer n                - field to return
C
C output:
C   character*(*) field      - returned field, use fvex_len to get useful
C                              length
C                              should be at least 1 character larger than
C                              longest possible value to hold null
C                              termination
C
C output:
C   integer (return value)    - error code, zero indicates no error
C                               -4 = field did not fit in field variable
C                               -6 = n out of range
C                               -9 = no statement available
C
      return
      end
C-----------------------------------------------------------------------
      integer function fvex_units(ptr_ch(units),len(units))
      implicit none
      character*(*) units
C
C Returns the units from the most recently accessed field by fget_field().
C
C input:
C   none
C
C output:
C   character*(*) units      - returned units, use fvex_len to get useful
C                              length, zero length means no units
C                              should be at least 1 character larger than
C                              longest possible value to hold null
C                              termination
C
C output:
C   integer (return value)    - error code, zero indicates no error
C                                -4 = units did not fit in units variable
C
      return
      end
C-----------------------------------------------------------------------
      integer function fvex_scan_source(n,ptr_ch(src),len(src))
      implicit none
      integer n
      character*(*) src
C
C Returns the n-th source from the scan that includes the most recently
C   returned station statement by fget_scan_station().
C
C input:
C   integer n                - source field to return
C
C output:
C   character*(*) src        - returned field, use fvex_len to get useful
C                              length
C                              should be at least 1 character larger than
C                              longest possible value to hold null
C                              termination
C
C output:
C   integer (return value)    - error code, zero indicates no error
C                               -4 = source did not fit in src variable
C                               -6 = n out of range
C
      return
      end
C-----------------------------------------------------------------------
      integer function fvex_double(ptr_ch(field),ptr_ch(units),double)
      implicit none
      character*(*) field,units
      double precision double
C
C Will convert the ASCII representation of a number in field to
C MKS units according to the units specified in units.
C
C input:
C   character*(*) field      - vex fields to be examined, null terminated
C   character*(*) units      - units to used in conversion, null terminated
C
C output:
C   double precision double   - converted value
C   integer (return value)    - error code, zero indicates no error
C                               -7 = field was not a valid number
C                               -8 = units contained unknown units
C
      return
      end
C-----------------------------------------------------------------------
      integer function fvex_int(ptr_ch(field),int)
      implicit none
      character*(*) field
      integer int
C
C Will convert the ASCII representation of a number into int.
C
C input:
C   character*(*) field      - vex fields to be examined, null terminated
C
C output:
C   integer int               - converted value
C   integer (return value)    - error code, zero indicates no error
C                               -7 = field was not a valid int
C
      return
      end
C-----------------------------------------------------------------------
      integer function fvex_date(ptr_ch(field),iarray,seconds)
      implicit none
      character*(*) field
      integer iarray(4)
      double precision seconds
C
C Will convert the ASCII representation of a date field to an integer array
C and double precision variable.
C
C input:
C   character*(*) field       - field to be converted, null terminated
C
C output:
C   integer iarray(4)         - year,day of year,hour,and minutes
C           iarray(1)           year
C           iarray(2)           day of year
C           iarray(3)           hour
C           iarray(4)           minutes
C   double precision seconds  - seconds portion of date
C   integer (return value)    - error code, zero indicates no error
C                               -7 = error in date field
C
      return
      end
C-----------------------------------------------------------------------
      integer function fvex_ra(ptr_ch(field),ra)
      implicit none
      character*(*) field
      double precision ra
C
C Convert a Right Ascenion field to radians
C
C input:
C   character*(*) field       - field to be converted, null terminated
C
C output:
C   double precision ra       - Right Ascenion value in radians
C   integer (return value)    - error code, zero indicates no error
C                               -7 = error in ra field
C
      return
      end
C-----------------------------------------------------------------------
      integer function fvex_dec(ptr_ch(field),dec)
      implicit none
      character*(*) field
      double precision dec
C
C Convert a Decliniation field to radians
C
C input:
C   character*(*) field       - field to be converted, null terminated
C
C output:
C   double precision dec      - Declination value in radians
C   integer (return value)    - error code, zero indicates no error
C                               -7 = error in dec field
C
      return
      end
      integer ptr_ch(var)
      implicit none
      character*(*) var
C
C returns the address of a character variable in a form that can be
C   passed directly to C routine
C
C input:
C   character*(*) var         - character variable to take the address of
C
C output:
C   integer (return value)    - address
C                               when passed to C routine as an argument in
C                               of subroutine in FORTRAN, the C routine should
C                               treat it as a (char **) because FORTRAN always
C                               passes data by address
C
      return
      end
