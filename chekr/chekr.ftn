FTN77,I,Y
$ALIAS /FSCOM/ , NOALLOCATE
$CDS ON
      PROGRAM CHEKR(3,1000)   !  CHECK MARK III MODULES <910607.0446>
C 
C     This program steps through all of the Mark III modules
C     and checks their settings against those sent out by commands
C     or expected values.  All monitor-only values are updated in COMMON. 
C     Those modules specified in the ICHECK array in COMMON 
C     are processed.
C 
      INCLUDE /FS/INCLUDE/FSCOM.FTNI
C 
C  INPUT: 
C 
C     RMPAR - NOT USED
C 
C  SUBROUTINES CALLED:
C 
C     MATCN - to get data from the modules
C     BOSS  - to report error messages
C     LOGIT - to log and display the error
C     MA2VC - decode the MATCN buffers for VC 
C     MA2IF - decode the MATCN buffers for IF 
C     MA2FM - decode the MATCN buffers for FM 
C     MA2RP - decode the first MATCN buffer for the tape
C     MA2EN - decode the second MATCN buffer for the tape 
C     MA2TP - decode the third MATCN buffer for the tape
C     MA2MV - decode the fourth MATCN buffer for the tape 
C     MA2RX - decode
C     RXVTOT- convert MAT voltage reading to temperature
C 
C  LOCAL VARIABLES: 
      parameter (twarn=30.0)       !  temperature in K
      PARAMETER (IAGAIN=20)      ! repeat period for CHEKR (seconds)
C 
C     TIMHP1,TIMHP2 - two readings of computer time 
C     TIMEFM - reading of formatter clock time
C     TIMTOL - tolerance on comparison between formatter and HP 
C     IDAREF - reference day number, from HP, re-set every loop 
      LOGICAL KALARM
C      - true for alarm ON, i.e. NAK response from MAT
C     I - major loop counter for module number 1 to NMOD
      DIMENSION IP(5)
C      - for RMPAR
      DIMENSION POFFX(2),PNOW(2)
      REAL*4 SCALE,VOLT
C      -  for Head Position Read-out
      DIMENSION IBUF1(40),IBUF2(5),IBUF3(5),IBUF4(5)
C      - the buffers from MATCN
      DIMENSION LMODNA(18), NBUFS(18), ICODES(4,18)
C      - MODule NAmes, 2-char codes
C      - Number of BUFfers for each module
C      - Integer CODES for MATCN for each buffer
      DIMENSION INERR(15),ICHERR(169),ICHECKS(18)
C      - Arrays for recording identified error conditions
C     LWHO - mnemonic for CHEKR
      DIMENSION LFR(3),IT(28),LGEN(2)
C      - dummy arrays for checking
      DIMENSION IREG(2)
      INTEGER*2 ID,GETFATHERIDNUM
      EQUIVALENCE (IREG(1),REG)
C
C  INITIALIZED:
C
      DATA TIMTOL/1.0/
C                   Set time tolerance to 1 second
      DATA LWHO /2HCH/
      DATA LMODNA /2HV1,2HV2,2HV3,2HV4,2HV5,2HV6,2HV7,2HV8,2HV9,2HVA,
     /             2HVB,2HVC,2HVD,2HVE,2HVF,2HIF,2HFM,2HTP/
      DATA NBUFS/15*2,2,2,4/
      DATA ICODES/-1,-2,0,0,-1,-2,0,0,-1,-2,0,0,
     .            -1,-2,0,0,-1,-2,0,0,-1,-2,0,0,
     .            -1,-2,0,0,-1,-2,0,0,-1,-2,0,0,
     .            -1,-2,0,0,-1,-2,0,0,-1,-2,0,0,
     .            -1,-2,0,0,-1,-2,0,0,-1,-2,0,0,
     .            -1,-2,0,0,-3,-4,0,0,-1,-2,-3,-4/
      DATA NMOD/18/
      DATA NVERR,NIFERR,NFMERR,NTPERR,MAXERR /9,8,11,15,15/
      DATA ICHECKS/18*0/,ICHK19S/0/,ICHK20S/0/
      DATA ICHERR/169*0/
C
C   LAST MODIFIED    LAR  880301      USE HEAD PASS NUMBERS FROM /FSCOM/
C  WHO  WHEN    DESCRIPTION
C  GAG  910204  Changed LFEET to LFEET_FS in call to MA2TP.
C
C     1. First get our input parameters.
C
      CALL RMPAR(IP)
C                   We make no use of RMPAR parameters
C
C
C
C     2. Now set up the loop over the to-be-checked modules.
C     Fill up classes with requests to MATCN for data, and
C     send them out.  Do only one module at a time so as not to
C     tie up the communications.  If there is an error in MATCN
C     log it, and go on to the next module.
C
200   CONTINUE
      CALL EXEC(11,IBUF1)
      IDAREF = IBUF1(5)
C                   Get and store reference day number for comparing
C                   with formatter
C
      DO 699 I=1,NMOD
C
        IF (ICHECK(I).LE.0.OR.ICHECKS(I).NE.ICHECK(I)) GOTO 699
C
        DO J=1,MAXERR
          INERR(J) = 0
        ENDDO
          DO JJ=1,2
            IBUF1(2) = LMODNA(I)
            CALL LOCK_MATCN
            ICLASS = 0
            DO J=1,NBUFS(I)
              IBUF1(1) = ICODES(J,I)
              CALL EXEC(20,0,IBUF1,-4,2HFS,0,ICLASS)
            ENDDO
C
            IBUF1(1) = 8
            IBUF1(3) = 2H'
            CALL EXEC(20,0,IBUF1,-5,2HFS,0,ICLASS)
C                   Finally, get alarm status
C
            IF(I.EQ.17) CALL EXEC(11,IBUF3)
            CALL EXEC(23,6HMATCN ,ICLASS,NBUFS(I)+1)
C                   Send our requests to MATCN for the data
            IF(I.EQ.17) CALL EXEC(11,IBUF4)
C                   Get computer time if we're checking the formatter
C
            CALL RMPAR(IP)
            CALL UNLOCK_MATCN
            ICLASS = IP(1)
            NREC = IP(2)
            IERR = IP(3)
C
            IF (IERR.GE.0) GOTO 300
            CALL CLRCL(ICLASS)
          ENDDO
          CALL LOGIT(0,0,0,0,IERR,LWHO,LMODNA(I))
          GOTO 699
C                   There was an error in MATCN.  Log it and go on
C                   to the next module.
C
C
C
C     3. This is the VC section.
C
300   CONTINUE
C
      IF (I.GT.15) GOTO 400
C
      CALL EXEC(21,ICLASS,IBUF1,-10)
      CALL EXEC(21,ICLASS,IBUF2,-10)
      CALL MA2VC(IBUF1,IBUF2,LFR,IBW,ITP,IA1,IA2,
     .           IREMVC(I),ILOKVC(I),TPIVC(I),IALARM)
      IF(IREMVC(I).NE.0) INERR(1) = INERR(1) + 1
      IF (ICHCM(LFR,1,LFREQV(1,I),1,6).NE.0) INERR(2)=INERR(2)+1
      IF (IBW.NE.IBWVC(I)) INERR(3)=INERR(3)+1
      IF (ITP.NE.ITPIVC(I)) INERR(4)=INERR(4)+1
      IF (IA1.NE.IATUVC(I)) INERR(5)=INERR(5)+1
      IF (IA2.NE.IATLVC(I)) INERR(6)=INERR(6)+1
      IF (ILOKVC(I).NE.0) INERR(7)=INERR(7)+1
      IF (TPIVC(I).EQ.65535.0) INERR(8)=INERR(8)+1
      CALL EXEC(21,ICLASS,IBUF1,-10)
      KALARM = ICHCM(IBUF1,3,3HNAK,1,3).EQ.0
      IF (KALARM) THEN
        CALL EXEC(21,ICLASS,IBUF1,-10)
        INERR(9)=INERR(9)+1
      ENDIF
C
      DO JJ=1,NVERR
        INDX=(I-1)*NVERR+JJ
        ICHERR(INDX)=INERR(JJ)
      ENDDO
      GO TO 699
C
C     4. This is the IF distributor section.
C
400   IF (I.NE.16) GOTO 500
C
      CALL EXEC(21,ICLASS,IBUF1,-10)
      CALL EXEC(21,ICLASS,IBUF2,-10)
      CALL MA2IF(IBUF2,IBUF1,IA1,IA2,IN1,IN2,TP1IFD,TP2IFD,IREMIF)
      IF(IREMIF.NE.1) INERR(1)=INERR(1)+1
      IF (IA1.NE.IAT1IF) INERR(2)=INERR(2)+1
      IF (IA2.NE.IAT2IF) INERR(3)=INERR(3)+1
      IF (IN1.NE.INP1IF) INERR(4)=INERR(4)+1
      IF (IN2.NE.INP2IF) INERR(5)=INERR(5)+1
      IF (TP1IFD.EQ.65535.0) INERR(6)=INERR(6)+1
      IF (TP2IFD.EQ.65535.0) INERR(7)=INERR(7)+1
      CALL EXEC(21,ICLASS,IBUF1,-10)
      KALARM = ICHCM(IBUF1,3,3HNAK,1,3).EQ.0
      IF (KALARM) THEN
        CALL EXEC(21,ICLASS,IBUF1,-10)
        INERR(8)=INERR(8)+1
      ENDIF
      DO JJ=1,NIFERR
        INDX=15*NVERR+JJ
        ICHERR(INDX)=INERR(JJ)
      ENDDO
      GO TO 699
C
C
C     5. This is the Formatter section.
C
500   IF (I.NE.17) GOTO 600
C
      CALL EXEC(21,ICLASS,IBUF2,-10)
      CALL EXEC(21,ICLASS,IBUF1,-10)
      CALL MA2FM(IBUF1,IN,IM,IR,ISYN,ITSTFM,ISGNFM,IRUNFM,
     .           IREMFM,IPWRFM,IALARM)
      IF(IREMFM.NE.0) INERR(1)=INERR(1)+1
      IF (IN.NE.INPFM) INERR(2)=INERR(2)+1
      IF (IM.NE.IMODFM) INERR(3)=INERR(3)+1
      IF (IR.NE.IRATFM) INERR(4)=INERR(4)+1
      IF (ISYN.NE.ISYNFM) INERR(5)=INERR(5)+1
      IF (ITSTFM.NE.0) INERR(6)=INERR(6)+1
      IF (IPWRFM.NE.0) INERR(7)=INERR(7)+1
      IF (IRUNFM.NE.0) INERR(8)=INERR(8)+1
      TIMHP1 = (IBUF3(5)-IDAREF)*86400.0+IBUF3(4)*3600.0+
     .         IBUF3(3)*60.0+IBUF3(2)
      TIMHP2 = (IBUF4(5)-IDAREF)*86400.0+IBUF4(4)*3600.0+
     .         IBUF4(3)*60.0+IBUF4(2)
      TIMEFM = (IAS2B(IBUF1,5,3)-IDAREF)*86400.0+
     .         IAS2B(IBUF2,3,2)*3600.0+IAS2B(IBUF2,5,2)*60.0+
     .         IAS2B(IBUF2,7,2)
      IF(TIMHP2-TIMHP1.GT.2.0*TIMTOL) THEN
        INERR(9)=INERR(9)+ICHERR(15*NVERR+NIFERR+9)+1
      ELSE
        IF(TIMEFM.LT.TIMHP1-TIMTOL.OR.TIMEFM.GT.TIMHP2+TIMTOL)
     .    INERR(10)=INERR(10)+1
      ENDIF
      CALL EXEC(21,ICLASS,IBUF1,-10)
      KALARM = ICHCM(IBUF1,3,3HNAK,1,3).EQ.0
      IF (KALARM) THEN
        CALL EXEC(21,ICLASS,IBUF1,-10)
        INERR(11)=INERR(11)+1
      ENDIF
      DO JJ=1,NFMERR
        INDX=15*NVERR+NIFERR+JJ
        ICHERR(INDX)=INERR(JJ)
      ENDDO
      GO TO 699
C
C
C     6. This is the tape section.
C
600   IF (I.NE.18) GOTO 699
C
      CALL EXEC(21,ICLASS,IBUF1,-10)
      CALL EXEC(21,ICLASS,IBUF2,-10)
      CALL EXEC(21,ICLASS,IBUF3,-10)
      CALL EXEC(21,ICLASS,IBUF4,-10)
      CALL MA2RP(IBUF1,IREMTP,IBY,IEQ,IBW,ITA,ITB,IALARM)
      CALL MA2EN(IBUF2,IENA  ,IT,NT)
      CALL MA2TP(IBUF3,ILOWTP,LFEET_FS,IFASTP,ICAPTP,ISTPTP,ITACTP,
     .           IRDYTP)
      CALL MA2MV(IBUF4,IDIR,ISP,LGEN)
      IERR = 0
      NTRKS = 0
      DO K=1,28
        IF (IT(K).EQ.ITRKEN(K)) THEN
          IF (IT(K).EQ.1) NTRKS=NTRKS+1
        ELSE
          IERR = -1
        ENDIF
      ENDDO
      IF(IREMTP.NE.0) INERR(1)=INERR(1)+1
      IF (KMVTP_FS) THEN
        IF (ISP.NE.ISPEED) THEN
          IF (ISPEED.EQ.0) INERR(2)=INERR(2)+1
          IF (ISPEED.GT.0) INERR(3)=INERR(3)+1
        ELSE IF (ISP.NE.0.AND.IDIR.NE.IDIRTP) THEN
          INERR(4)=INERR(4)+1
        ENDIF
        IF (.NOT.KHALT.AND.IRDYTP.NE.0) INERR(11)=INERR(11)+1
        IF (ICHCM(LGEN,1,3H720,1,3).NE.0.AND.
     .      ICHCM(LGEN,1,3H880,1,3).NE.0) INERR(12)=INERR(12)+1
      ENDIF
      IF(KENTP_FS.OR.KMVTP_FS) THEN
        IF (IENATP.NE.IENA) INERR(15)=INERR(15)+1
        IF (IERR.NE.0) INERR(5)=INERR(5)+1
      ENDIF
      IF(KENTP_FS.AND.KMVTP_FS) THEN
        IF (ISPEED.NE.0.AND.IENATP.NE.0.AND.NTRKS.EQ.0)
     &    INERR(13)=INERR(13)+1
      ENDIF
      IF (KRPTP_FS) THEN
        IF (IBW.NE.IBWTAP) INERR(6)=INERR(6)+1
        IF (IEQ.NE.IEQTAP) INERR(7)=INERR(7)+1
        IF (IBY.NE.IBYPAS) INERR(8)=INERR(8)+1
        IF (ITA.NE.ITRAKA) INERR(9)=INERR(9)+1
        IF (ITB.NE.ITRAKB) INERR(10)=INERR(10)+1
      ENDIF
      CALL EXEC(21,ICLASS,IBUF1,-10)
      KALARM = ICHCM(IBUF1,3,3HNAK,1,3).EQ.0
      IF (.NOT.KALARM) GOTO 635
        CALL EXEC(21,ICLASS,IBUF1,-10)
        INERR(14)=INERR(14)+1
635   DO JJ=1,NTPERR
        INDX=15*NVERR+NIFERR+NFMERR+JJ
        ICHERR(INDX)=INERR(JJ)
      ENDDO
      GOTO 699
C
690   CONTINUE
      GOTO 699
C
C
C      This is the end of the checking loop over modules. 
C 
695   CALL CLRCL(ICLASS)
699   CONTINUE
C
C     7. This is the error-reporting section.  The array ICHERR is
C     examined to determine which error messages, if any, should
C     be logged and displayed.
C
C  VC error reporting
C
      DO 720 I=1,15
        INDX=(I-1)*NVERR+1
        IF(ICHECK(I).LE.0.OR.ICHECKS(I).NE.ICHECK(I))GOTO 720
        IF(ICHERR(INDX).NE.0) THEN
          CALL LOGIT(0,0,0,0,-301,LWHO,LMODNA(I))
          GO TO 720
        ENDIF
        NERR=0
        DO J=1,NVERR-1
          IF(ICHERR(INDX+J).GT.0)NERR=NERR+1
        ENDDO
        IF(NERR.GT.NVERR/2) THEN
          CALL LOGIT(0,0,0,0,-310,LWHO,LMODNA(I))
          GO TO 720
        ENDIF
        DO J=1,NVERR-1
          IF(ICHERR(INDX+J).GT.0)
     .      CALL LOGIT(0,0,0,0,-301-J,LWHO,LMODNA(I))
        ENDDO
720   CONTINUE
C
C  IFD error reporting
C
      INDX=INDX+NVERR
      IF(ICHECK(16).LE.0.OR.ICHECKS(16).NE.ICHECK(16)) GOTO 750
      IF(ICHERR(INDX).NE.0) THEN
        CALL LOGIT(0,0,0,0,-311,LWHO,LMODNA(16))
        GO TO 750
      ENDIF
      NERR=0
      DO J=1,NIFERR-1
        IF(ICHERR(INDX+J).GT.0) NERR=NERR+1
      ENDDO
      IF(NERR.GT.NIFERR/2) THEN
        CALL LOGIT(0,0,0,0,-319,LWHO,LMODNA(16))
        GO TO 750
      ENDIF
      DO J=1,NIFERR-1
        IF(ICHERR(INDX+J).GT.0)
     .  CALL LOGIT(0,0,0,0,-311-J,LWHO,LMODNA(16))
      ENDDO
C
C  Formatter error reporting
C
750   CONTINUE
      INDX=INDX+NIFERR
      IF(ICHECK(17).LE.0.OR.ICHECKS(17).NE.ICHECK(17)) GOTO 780
      IF(ICHERR(INDX).NE.0) THEN
        CALL LOGIT(0,0,0,0,-320,LWHO,LMODNA(17))
        GO TO 780
      ENDIF
      NERR=0
      DO J=1,NFMERR-1
        IF(ICHERR(INDX+J).GT.0) NERR=NERR+1
      ENDDO
      IF(NERR.GT.NFMERR/2) THEN
        CALL LOGIT(0,0,0,0,-331,LWHO,LMODNA(17))
        GO TO 780
      ENDIF
      DO J=1,NFMERR-1
        IF((J.NE.8.AND.ICHERR(INDX+J).GT.0).OR.
     &     (J.EQ.8.AND.ICHERR(INDX+J).GT.1)    )
     .  CALL LOGIT(0,0,0,0,-320-J,LWHO,LMODNA(17))
      ENDDO
C
C  Tape drive error reporting
C
780   CONTINUE
      IF(ICHECK(18).LE.0.OR.ICHECKS(18).NE.ICHECK(18)) GOTO 800
      INDX=INDX+NFMERR
      IF(ICHERR(INDX).NE.0) THEN
        CALL LOGIT(0,0,0,0,-332,LWHO,LMODNA(18))
        GO TO 800
      ENDIF
      NERR=0
      DO J=1,NTPERR-1
        IF(ICHERR(INDX+J).GT.0) NERR=NERR+1
      ENDDO
      IF(NERR.GT.NTPERR/2) THEN
        CALL LOGIT(0,0,0,0,-347,LWHO,LMODNA(18))
        GO TO 800
      ENDIF
      DO J=1,NTPERR-1
        IF(ICHERR(INDX+J).GT.0)
     .  CALL LOGIT(0,0,0,0,-332-J,LWHO,LMODNA(18))
      ENDDO
C
C     8. Now we're going to check out the receiver.
C********************************************************************
C**NOTE: THIS SECTION IS USED ONLY AT STATIONS USING NEW COOLED RECEIVERS
C*********************************************************************
800    CONTINUE
       IF(ICHK19.LE.0.OR.ICHK19S.NE.ICHK19) GOTO 1000
       DO 805 I=1,3
         INERR(I) = 0
805    CONTINUE
C
       CALL LOCK_MATCN
C
       IBUF1(1) = 0
       IBUF1(2) = 2HRX
       CALL RX2MA(IBUF1(3),LSWCAL,0,IDCHRX,IBXHRX,IFAMRX,2H1E)
       ICLASS = 0
       CALL EXEC(20,0,IBUF1,-12,2HFS,0,ICLASS)
       IBUF1(1)=-1
       CALL EXEC(20,0,IBUF1,-4,2HFS,0,ICLASS)
       IBUF1(1)=0
       CALL RX2MA(IBUF1(3),LSWCAL,0,IDCHRX,IBXHRX,IFAMRX,2H1F)
       CALL EXEC(20,0,IBUF1,-12,2HFS,0,ICLASS)
       IBUF1(1)=-1
       CALL EXEC(20,0,IBUF1,-4,2HFS,0,ICLASS)
C
       CALL EXEC(23,6HMATCN ,ICLASS,4)
       CALL RMPAR(IP)
       CALL UNLOCK_MATCN
       ICLASS = IP(1)
       IERR = IP(3)
C
       IF(IERR.GE.0) GOTO 810
         CALL CLRCL(ICLASS)
         CALL LOGIT(0,0,0,0,IERR,LWHO,2HRX)
         GOTO 880
 810   CONTINUE
       CALL EXEC(21,ICLASS,IBUF3,-10)
       CALL EXEC(21,ICLASS,IBUF3,-10)
       CALL EXEC(21,ICLASS,IBUF2,-10)
       CALL EXEC(21,ICLASS,IBUF2,-10)
       CALL MA2RX(IBUF3(2),IDUM,IDUM,IDUM,IDUM,IDUM,V20K)
       CALL MA2RX(IBUF2(2),ILO,IDUM,IDUM,IDUM,IDUM,V70K)
       CALL RXVTOT(31,V20K,T20K)
       CALL RXVTOT(32,V70K,T70K)
D     WRITE(LU,9001)ILO,T70K,T20K
D9001 FORMAT("ILO,T70K,T20K = "I3,2F10.4)
C
C   Now compare values with acceptable limits
       IF(ILO.NE.1) INERR(1) = INERR(1)+1
       IF(T70K.GT.I70KCH) INERR(2) = INERR(2)+1
       IF(T20K.GT.I20KCH) INERR(3) = INERR(3)+1
C
       IF(ICHK19.LE.0.OR.ICHK19S.NE.ICHK19) GOTO 880
       DO 899 I=1,3
         IF(I.EQ.1) ITEM=0
         IF(I.EQ.2) ITEM=I70KCH
         IF(I.EQ.3) ITEM=I20KCH
         IF(INERR(I).GE.1) CALL LOGIT(0,0,0,1,-347-I,LWHO,ITEM)
 899   CONTINUE
 880   IBUF1(1)=0
       CALL RX2MA(IBUF1(3),LSWCAL,0,IDCHRX,IBXHRX,IFAMRX,IADCRX)
       CALL LOCK_MATCN
       ICLASS=0
       CALL EXEC(20,0,IBUF1,-12,2HFS,0,ICLASS)
       CALL EXEC(23,6HMATCN ,ICLASS,1)
       CALL RMPAR(IP)
       CALL UNLOCK_MATCN
       ICLASS=IP(1)
       CALL CLRCL(ICLASS)
C
C    10. Check tape head positioning.
C
1000   CONTINUE
       IF (ICHK20.LE.0.OR.ICHK20S.NE.ICHK20) GOTO 900
C
1005   CONTINUE
       CALL LOCK_MATCN
       CALL LVDONN('LOCK',IP)
       IF (IP(3).NE.0) THEN
         CALL LOGIT(0,0,0,0,IP(3),LWHO,2HHD)
         GOTO 1091
       ENDIF
       DO 1090 I=1,2
         IF(KPOSHD_FS(I)) THEN
           INERR = 0
             CALL VLT_HEAD(I,VOLT,IP)
             IF (IP(3).NE.0) THEN
               CALL LOGIT(0,0,0,0,IP(3),LWHO,2HHD)
               GOTO 1091
             ENDIF
             CALL VLT2MIC(I,IPASHD(I),VOLT,PNOW(I),IP)
             IF (IP(3).NE.0) THEN
               CALL LOGIT(0,0,0,0,IP(3),LWHO,2HHD)
               GOTO 1091
             ENDIF
             POFFX(I) = PNOW(I) - POSNHD(I)
             IF(VOLT.LT.-0.010) THEN
               SCALE=RSLOPE(I)
             ELSE IF(VOLT.GT.0.010)THEN
               SCALE=PSLOPE(I)
             ELSE
               SCALE=MAX(PSLOPE(I),RSLOPE(I))
             ENDIF
             IF (ABS(POFFX(I)).GT.((ILVTL_FS+2)*0.0049+0.0026)*SCALE)
     &          INERR = INERR+1
           IF(ICHK20.GT.0.AND.ICHK20S.EQ.ICHK20) THEN
             IF (INERR.GE.1) CALL LOGIT(0,0,0,0,-350-I,LWHO,2HHD)
           ENDIF
         ENDIF
1090   CONTINUE
C
C  Turn off LVDT Oscillator
C
1091  CONTINUE
      CALL LVDOFN('UNLOCK',IP)
      CALL UNLOCK_MATCN
      IF(IP(3).GE.0) GO TO 1092
      CALL LOGIT(0,0,0,0,IP(3),LWHO,2HHD)
1092  CONTINUE
C
C     9. Once we are finished, take a breather for 20 seconds.
C
900   CONTINUE
      DO I=1,18
        ICHECKS(I)=ICHECK(I)
      ENDDO
      ICHK19S=ICHK19
      ICHK20S=ICHK20
      CALL EXEC(12,6HCHEKR ,2,0,-IAGAIN)
      CALL EXEC(6,0,1)
      IF(GETFATHERIDNUM().NE.0) THEN
        DO I=1,18
          ICHECKS(I)=ICHECK(I)
        ENDDO
        ICHK19S=ICHK19
        ICHK20S=ICHK20
      ENDIF
      GOTO 200
C
      END
