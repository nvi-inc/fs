#!/usr/bin/perl
# Usage: ifvlbafix station_code schedule [IF_pairs] ...

if ($#ARGV < 0) {
    print "Usage: ifvlbafix station_code schedule_file [IF_pairs]\n";
    print "\n";
    print "Changes the IF designations in a '.skd' or '.drg' file for a station\n";
    print "from Mark III designations to VLBA designations. This is useful for\n";
    print "fixing a schedule that was written for a Mark III rack to work with a\n";
    print "VLBA rack. For example, the default behavior (no IF_pairs specifed)\n";
    print "is to map 'IF1/2/3/' to 'IFA/B/C' any trailing non-blank characater,\n";
    print "like 'A' or 'N', on a designator is removed as well.\n";
    print "\n";
    print "station_code  is the one or two character station code whose\n";
    print "              IF designators will be changed\n";
    print "              one character codes are case sensitve, two are not\n";
    print "schedule_file is the schedule file to be fixed, specified with or without\n";
    print "              a '.skd', '.drg', or other extension, but the file itself\n";
    print "              must have some extension\n";
    print "IF_pairs      are pairs of characters of IF channel designations\n";
    print "              designators that use the first character in the pair are\n";
    print "              are changed to use the second\n";
    print "              first character in a pair must one of [123]\n";
    print "              second character in a pair must one of [abcd]\n";
    print "              at most three pairs can be specified\n";
    print "              default pairs are 1a 2b 3c\n";
    print "\n";
    print "the original file is renamed with a '.bak' extension\n";

    exit -1;
}

if  ($#ARGV < 1 || $#ARGV >4) {
    print "incorrect number of arguments\n";
    print "Try 'ifvlbafix' for more information.\n";
    exit -1;
}

# get the station code

$code = $ARGV[0];

if (length($code) != 1 && length($code) !=2) {
    print "first argument must be one or two characters\n";
    print "Try 'ifvlbafix' for more information.\n";
    exit -1;
} elsif (length($code) == 1 && $code !~ /[a-z]/i) {
    print "one character first argument must be one of a-zA-Z\n";
    print "Try 'ifvlbafix' for more information.\n";
    exit -1;
} elsif (length($code) ==2 && $code !~ /[a-z0-9]/i) {
    print "two character first argument contain two of a-zA-Z0-9\n";
    print "Try 'ifvlbafix' for more information.\n";
    exit -1;
}
    

# get the letter pairs

if ($#ARGV < 2) {
    @old=('1','2','3');
    @new=('A','B','C');
    @change=('0','0','0');
} else {
    for ($i=2; $i <= $#ARGV; $i++) {
	if (length($ARGV[$i]) > 2) {
	    die "letter_pair argument $ARGV[i] has more than 2 characters";
	}

	push(@old,substr($ARGV[$i],0,1));
	push(@new,substr($ARGV[$i],1,1));
	$new[$#new]=~tr/a-z/A-Z/;
	push(@change,'0');

	if ($old[$#old] !~ /[123]/) {
	    die "first character in each pair must be one of 1-3\n";
	}
	if ($new[$#new] !~ /[ABCD]/) {
	    die "second character in each pair must be one of a-d\n";
	}
        for ($j=0; $j < $#old; $j++) {
	    if ($old[$j] eq $old[$#old]) {
		die "duplicate first character in a pair\n";
	    }
	    if ($new[$j] eq $new[$#old]) {
		die "duplicate second character in a pair\n";
	    }
	}

    }
}

# get the file names

$name=$ARGV[1];

if ($name =~ /(.*)\.(skd|drg|[^\.]*)$/ ) {
    $bak = $1 . ".bak";
    $out = $name;
    if (!-e $out) {
	die "Can't find $out. Quitting.\n";
    }
} else {
    $bak= $name . ".bak";
    $drg = $name . ".drg";
    $skd = $name . ".skd";
    if (-e $skd && -e $drg) {
	die "Both $skd and $drg exist, please specify one explicitly. Quitting.\n";
    } elsif (-e $skd) {
	$out=$skd;
    } elsif (-e $drg) {
	$out=$drg;
    } else {
	die "Couldn't find $skd or $drg. Quitting.\n";
    }
}

# rename the original if we can and open the files

if (-e $bak) {
    die "Backup-file $bak already exists, giving up.\n";
}

rename ($out,$bak) ||die "renaming $out to $bak failed: $!, giving up.\n";
 
if(!open(BAK,$bak)) {
    $|=1;
    print "Failed to open $bak: $!\n";
    if(!rename($bak,$out)) {
	print "Unable to rename $bak to $out: $!\n";
	die "Please fix whatever the problem is and rename it yourself.\n";
    } else {
	die "I renamed $bak to $out for you.\n";
    }
}

if(!open(OUT,">" . $out)) {
    $|=1;
    print "Failed to open $out: $!\n";
    if((!close(BAK)) || (!rename($bak,$out))) { 
	print "Unable to rename $bak to $out: $!\n";
	die "Please fix whatever the problem is and rename it yourself.\n";
    } else {
	die "I renamed $bak to $out for you.\n";
    }
}

#if we got a two character code find the corresponding one character code

$section=' ';

if(length($code)==2) {
    $code =~ tr/A-Z/a-z/;
    while(<BAK>) {
	if($section eq "stations" && /^A/) {
	    @fields=split;
	    $fields[14] =~ tr/A-Z/a-z/;
	    if($fields[14] eq $code) {
		$code=$fields[1];
		goto pre_done;
	    }
	}
	if (/^\$([^ \n]*).*/) {
	    ($section=$1) =~ tr/A-Z/a-z/;
	    next;
	}
    }
    $|=1;
    print "Could find station code $code\n";
    if(!rename($bak,$out)) { 
	print "Unable to rename $bak to $out: $!\n";
	die "Please fix whatever the problem is and rename it yourself.\n";
    } else {
	die "I renamed $bak to $out for you.\n";
    }

  pre_done:
    
    seek(BAK,0,0);
}

#okay now process the file

$section=' ';

$some=0;

while(<BAK>) {
    if ($section ne "codes" || (/^\$.*/ || !/^L[ ]*$code/)) {
	print OUT;
    }
    if (/^\$([^ \n]*).*$/) {
	($section=$1) =~ tr/A-Z/a-z/;
	next;
    }
    if ($section eq "codes" && /^L[ ]*$code.*/) {
	$some=1;
	for ($i=0; $i <= $#old; $i++) {
	    if(s/(if)$old[$i]./\1$new[$i] /i) {
		$change[$i]=1;
	    }
	}
	print OUT;
    }
}

# follow-up warnings

if (!$some) {
    $|=1;
    print "Warning: IF designators for station $code not found, no changes made.\n";
    if(unlink($bak)==1) {
	die "I deleted back-up file $bak for you.\n";
    } else {
	print "Deleting back-up file $bak failed: $!\n";
	die "Please fix the problem and delete it yourself\n";
    }
} else {
    $at_least_one=0;
    for ($i=0; $i <= $#change; $i++) {
	if(!$change[$i]) {
	    push(@list,$old[$i].$new[$i]);
	} else {
	    $at_least_one=1;
	}
    }
    if ($#list > -1) {
       $|=1;
       print "Warning: No match for IF_pair";
       if ($#list > 0) {
	   print "s";
       }
       print ":";
       foreach $pair (@list) {
	   print " ",$pair;
       }
       if ($at_least_one) {
	   print ", but at least one other pair matched.\n";
       } else {
	   print ".\n No pairs matches, so no changes were made.\n";
	   if(unlink($bak)==1) {
	       print "I deleted back-up file $bak for you.\n";
	   } else {
	       die "Deleting back-up file $bak failed: $!\n";
	       die "Please fix the problem and delete it yourself\n";
	   }
       }
   }
}

