FTN4,X
C@WVPDS 
      SUBROUTINE WVPDS(IP,ICLCM),WVR POINTING DISPLAY C#870115:04:46# 
C 
C   WVPDS gets pointing data from a WVR and displays it.
C 
C     INPUT VARIABLES:
C 
      DIMENSION IP(1) 
C        IP(1)  - class number of buffer from MATCN 
C        IP(2)  - # records in class
C        IP(3)  - error return from MATCN 
C        IP(4)  - who, or 77B (?) 
C        IP(5)  - class with command
C 
C     OUTPUT VARIABLES: 
C 
C        IP(1) - error
C        IP(2) - class
C        IP(3) - number of records
C        IP(4) - who we are 
C 
C   COMMON BLOCKS USED
C 
      INCLUDE #FSCOM::FS
C 
C   SUBROUTINE INTERFACE: 
C 
C     CALLING SUBROUTINES: WVPNT
C     CALLED SUBROUTINES: character utilities 
C                         WV2PT - decode WVR response into pointing info
C 
C   LOCAL VARIABLES 
C 
      DIMENSION IBUF1(40),IBUF2(30) 
C               - input class buffer, output display buffer 
C     ILEN,ILEN2   - length of buffers, chars 
C        NCH    - character counter 
      LOGICAL KCOM,KDATA
      DIMENSION IREG(2) 
C               - registers from EXEC 
      EQUIVALENCE (REG,IREG(1)) 
C 
C   INITIALIZED VARIABLES 
C 
      DATA ILEN/80/,ILEN2/60/ 
C 
C   PROGRAMMER: RBM 
C   LAST MODIFIED: 810404 BY NRV
C 
C 
C     1. Determine whether parameters from COMMON wanted and skip to
C     response section. 
C     Get RMPAR parameters and check for errors from our I/O request. 
C 
      KCOM = IP(4).EQ.77B 
C 
      ICLASS = IP(1)
      NCREC = IP(2) 
      IERR = IP(3)
C 
      IF (KCOM) GOTO 200
      IF (IERR.LT.0) GOTO 990 
      IF (ICLASS.EQ.0.OR.ICLCM.EQ.0) GOTO 990 
C 
C 
C     2. Get class buffer with command in it.  Set up first part
C     of output buffer. 
C 
200   REG = EXEC(21,ICLCM,IBUF2,-ILEN2) 
      NCHAR = MIN0(IREG(2),ILEN2) 
      NCH = ISCNC(IBUF2,1,NCHAR,75B)
C                   Scan for "="
      KDATA = NCH.EQ.0
C                   If our command was only "device" we are waiting for 
C                   data and know what to expect. 
      IF (NCH.EQ.0) NCH = NCHAR+1 
C                   If no "=" found, position after last character
      NCH = ICHMV(IBUF2,NCH,2H/ ,1,1) 
C                   Put / to indicate a response
C 
      IF (KCOM) GOTO 260
      IF (KDATA) GOTO 230 
C 
C     2.1 The response was simply an acknowledgement. 
C     Move response directly into output buffer.
C 
      DO 220 I=1,NCREC
        IF (I.NE.1) NCH=MCOMA(IBUF2,NCH)
C                   If not first parm, put comma before 
        REG = EXEC(21,ICLASS,IBUF1,-ILEN) 
        NCHAR = IREG(2) 
        NCH = ICHMV(IBUF2,NCH,IBUF1(2),1,NCHAR-2) 
C                   Move buffer contents into output list 
220     CONTINUE
      NCH = NCH - 1 
      GOTO 500
C 
C     2.3 Get the WVR response.  Check for an error return. 
C     If ok, decode the buffer holding response from WVR. 
C 
230   CONTINUE
      DO 231 I=1,NCREC
231     REG = EXEC(21,ICLASS,IBUF1,-ILEN) 
C                   Read out all class buffers: keep only the last one
      NCHAR = MIN0(IREG(2),ILEN)
      IF (ICHAR(IBUF1,3).NE.77B) GOTO 240 
      NCH = ICHMV(IBUF2,NCH,IBUF1,3,NCHAR-2)-1
      GOTO 500
C 
240   CALL WV2PT(IBUF1,NCHAR) 
C                   Decode the buffer the stash the az and el in common 
      EL = ELEVWV 
      AZ = AZIMWV 
      GOTO 300
260   EL = ELCMWV 
      AZ = AZCMWV 
C 
C 
C     3. Now the buffer contains: WVPOINT/, and we want to add the data.
C 
300   NCH=NCH+IR2AS(AZ,IBUF2,NCH,6,1) 
      NCH=MCOMA(IBUF2,NCH)
      NCH=NCH+IR2AS(EL,IBUF2,NCH,5,1) 
      NCH = NCH - 1 
C 
C 
C     5. Now log the response and we're done. 
C 
500   ICLASS = 0
      CALL EXEC(20,0,IBUF2,-NCH,2HFS,0,ICLASS)
      NREC = 1
      IERR = 0
C 
      IP(1) = ICLASS
      IP(2) = NREC
      IP(3) = IERR
      IP(4) = 2HQW
      IP(5) = 0 
990   RETURN
      END 
