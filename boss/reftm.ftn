FTN77,I,Y
$ALIAS /FSCOM/ , NOALLOCATE
$CDS ON
C 
      SUBROUTINE REFTM(ITREF,ITIME,JCHAR)  !  HANDLE REFERENCE TIMES
C 
C     MANIPULATES REFERENCE TIME AND TIME OFFSETS 
C 
C  INPUT: 
C 
D     INCLUDE /FS/INCLUDE/FSCOM.FTNI
      DIMENSION ITREF(3)
C     - current reference time
      DIMENSION ITIME(3)
C     - time array from parsing routine 
C     JCHAR  - control character
C            - R (122B) set ITREF to ITIME
C            - * (52B) add ITIME to ITREF and replace in ITIME
C            - ! (41B) add ITIME to current time and replace ITIME
C 
C  OUTPUT:
C 
C     New values of ITREF and ITIME depending on JCHAR
C 
C  LOCAL: 
C 
      DIMENSION INOW(6) 
C     - holds current time
  
C     IT1,IT2,IT3 - current time in SNAP units
C 
C  SUBROUTINES CALLED:
C 
C     TWRAP - unwraps ITIME if any part overflows 
C     EXEC(11) - to get current time
C 
C  PROGRAMMER: NRV            FILE CREATED 791010
C  LAST MODIFIED:  LAR  <890123.1909>
C 
C 
C     1. First get the current time in case we need it later. 
C 
      CALL EXEC(11,INOW,INOW(6))
      IT1 = (INOW(6)-1970)*1024 + INOW(5)
      IT2 = INOW(4)*60 + INOW(3)
      IT3 = INOW(2)*100 + INOW(1)
D     WRITE(LU,9901) ITREF,ITIME
C
C     2. First for JCHAR=R, establish ITIME as the new ITREF.
C
      IF (JCHAR.EQ.122B) THEN
        IF (ITIME.EQ.-1) THEN
          ITREF(1) = IT1
          ITREF(2) = IT2
          ITREF(3) = IT3
        ELSE
          ITREF(1) = ITIME(1)
          ITREF(2) = ITIME(2)
          ITREF(3) = ITIME(3)
        ENDIF
C
C     3. For JCHAR=*, replace ITIME with ITIME+ITREF.
C
      ELSE IF (JCHAR.EQ.52B) THEN
        ITIME(1) = ITREF(1)
        ITIME(2) = ITIME(2) + ITREF(2)
        ITIME(3) = ITIME(3) + ITREF(3) + 1
        CALL TWRAP(ITIME)
      ELSE
C
C     4. Finally, for JCHAR=!, replace ITIME with ITIME+current time.
C
        ITIME(1) = IT1
        ITIME(2) = ITIME(2) + IT2
        ITIME(3) = ITIME(3) + IT3 + 1
        CALL TWRAP(ITIME)
      ENDIF
C
D     WRITE(LU,9901) ITREF,ITIME
D9901 FORMAT("ITREF,ITIME="6I10)
      RETURN
      END
