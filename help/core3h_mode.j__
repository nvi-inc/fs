core3h_mode - Core3H board mode (DBBC3 rack)

Syntax:   core3h_mode=state,force,okay
          core3h_mode=n,mask2,mask1,decimation,sample,force,okay
          core3h_mode=n
          core3h_mode

Response: core3h_mode/n,mask2,mask1,decimation,sample,clock,split,input,channels,width,payload,format,sync

Settable parameters:

state:      'begin' or 'end'. No default, see 'Comments' section for
            the details.

force:      force setup: literal 'force', '$', or null. See comments.

okay        override to allow command while recording, literal text:
            'disk_record_ok'

n           board number: integers 1 to 8, but is limited to the
            number of IF boards specified in 'dbbc3.ctl'

mask2:      VSI2 input bit-stream mask, usually hex, 32-bit maximum
            width, for example: 0xf, default 0. Must be null for
            DDC_V. See the 'Comments' section for the details of
            the display values.

mask1:      VSI1 input bit-stream mask, usually hex, 32-bit maximum
            width, for example: 0xf, default 0xffffffff. See the
            'Comments' section for the details of the display values.

decimation: decimation factor: integers 1-255. Default is inferred
            from 'sample' (next parameter). For DDC_V, only '1' and
            '2' are permitted.

sample:     sample rate in Ms/s. For DDC_U, the value divided into the
            maximum DDC_U sample rate, 256 Ms/s, must yield a valid
            integer decimation factor. For DDC_V, only 128 and 64 are
            accepted. Unless a decimation factor was specified, the
            default for DDC_U is 256 (decimation 1); for DDC_V, 64
            (decimation 2). In response, since the sample rate is not
            reported by the board, the reported 'decimation' implied
            sample rate is shown in parenthesizes for reference.

Monitor only parameter:

clock       input clock rate in Hz

split       split mode: 'on' or 'off'

input       VSI input: 'tvg','vsi1','vsi2','vsi1-2','vsi1-2-3-4','gps'

channels    VDIF channels: only powers of two, range 1-16

width       VDIF channel width in bits: 1 or 2

payload     VDIF payload size in bytes, typically 8000, but other
            multiples of eight are possible, range 8-8192

format      data transmission format: 'stopped', 'vdif', 'mk5b', or
            'raw'. 'stopped' means no data is being sent

sync        whether the board is synced: 'synced' or 'unsynced'

Comments:

This command is unusual as a FS command in two ways. First, instead of
two Forms, Command and Monitor, it has three:

1. Command Form -- This Form, invoked as 'core3h_mde=n,...,force', is
   similar in function to the Command Form of the commands for other
   devices. It commands the Core3H board specified by 'n' with the
   configuration specified by the remaining parameters when 'force' is
   included as the sixth parameter. The Command Form also updates the
   FS's model of the device's configuration. The use of the 'force'
   parameter is unusual for a Command Form; it is used in this case to
   distinguish it from the Checking Form (see below). Any errors
   reported indicate there was a problem configuring the board.

   The 'core3h_mode=end,force' command is also a Command Form. It sets
   the transmission state for each board.

2. Checking Form -- This Form is unique to 'core3h_mode'. Its use is
   similar to the Command Form (see above), but the sixth parameter is
   null (or '$'). In this case, the board is not commanded. Instead,
   only the FS's model of the board's configuration is updated, each
   deviation of the board's actual configuration from the model is
   reported as an error, and the board's actual configuration is
   reported. If there are any deviations, a summary error message is
   printed after the actual configuration so that the command ends
   with an error.

   The 'core3h_mode=end' command, without 'force' is also a Checking
   Form. It reports any deviations from what is expected for which
   boards are transmitting data. The transmission states themselves
   are not reported, but are available in the Monitor Form for the
   boards (see below). If there were any transmission state errors, a
   final summary error is produced. Otherwise, no news is good news.

3. Monitor Form -- This Form is similar in function to the Monitor
   Form of the commands for other devices. It returns the current
   state of the device. The board to query is specified by 'n' with no
   other parameters, e.g., 'core3h_mode=1'. All the boards can be
   monitored with a single 'core3h_mode' command (no parameters). The
   only errors reported are for problems communicating with the
   device.

   There is no Monitor Form for 'core3h_mode=end'. The transmission
   state is reported by the Monitor Form for the boards.

The second unusual aspect of 'core3h_mode' is that in
'core3h_mode=state,...', the 'state' values of 'begin' and 'end' are
used to mark the beginning and end of the Core3H board configurations
for a mode. For example:

   core3h_mode=begin,force
   core3h_mode=1,...,force
   ...
   core3h_mode=end,force

Up to the total number of Core3H boards in the rack (the maximum is
set in 'dbbc3.ctl') can be setup between the 'begin' and 'end'. Any
boards that are not setup will have their output disabled (stopped) by
the 'end,force' (which will also start the output of boards that are
setup). This is to make sure only the setup boards will send data.

Once a command with 'begin' has been executed, the FS's model is not
well defined until the matching command with 'end' has been executed.
No commands other than 'core3h_mode=n,...' command should be executed
between them. If there are other commands, the results may be
incorrect, particularly for 'mk5c_mode'/'fb_mode' and 'tpicd'.

Accepting '$' for the sixth parameter for the Monitor Form is to
support allowing the operator to use 'force' as the argument for a
setup procedure from 'drudg' to force setup, while making only
checking the default for schedules. The 'drudg' generated setup
procedures are called from schedules with no argument, for example:

    setup01

This only checks the setups of the Core3H boards (and sets up the rest
of the mode configuration).

Although it is not recommended at this time, the operator can in
principle use the same procedure with 'force' as its argument to setup
the Core3H boards (and the rest of the mode configuration):

    setup01=force

The 'force' will be passed to Core3H setup sub-procedure, 'core3h01'
in this case, which will pass it to the Core3H setup commands. Due to
the structure of SNAP, if no argument is given, a '$' will appear as
the value of the 'force' parameter in Core3H setup commands. Hence the
commands accept '$' in place of the 'force' parameter to preserve the
checking functionality.

This approach is used to provide a means to configure the Core3H
boards, while avoiding having a schedule configure them. When they are
configured, with 'force', the operator must sync them, which is not an
automated process that can done by the schedule. Once they are synced,
the operator can start the data transmission for the boards used by
the mode (and make sure those not used are disabled), by executing the
command:

    core3h_mode=end,force

Using a setup procedure with 'force' will also execute this command,
but it will fail with an error message for the first board to be
started because the Core3H boards have not been synced. That error
message can serve as reminder to the operator to sync the boards and
then execute the above command with 'end,force'.

The 'core3_mode=end' command, with or without 'force', checks the
DBBC3 firmware version for agreement with the FS control files. This
is intended to be the primary DBBC3 version check for the
'core3h_mode' command since it is:

- part of both a complete setup or check of a mode; at least the
  latter should be executed by the operator as part of verifying the
  setup for normal operations

- the final command of such a setup/check, which should make the error
  more visible

The 'core3h_mode=n,...,force' commands also check the DBBC3 firmware
version.

If a '?' parameter is included just after 'n', e.g.,
'core3h_mode=1,?', the FS's model for that board's configuration is
reported. The model for all boards can be reported with
'core3h_mode=?'.

The decimation factor can be specified in the SNAP command either
explicitly with the 'decimation' parameter or implicitly with the
'sample' parameter. Only one of 'decimation' and 'sample' may be
specified. The boards do not respond with the effective sample rate.
In the monitor response for 'core3h_mode', the implied sample rate is
shown in parentheses for information purposes only.

To use a non-zero 'mask2', the personality must be DDC_U.
Additionally, there can't be bits turned on for BBCs in 'mask2' that
exceed the number available as set by the number of BBCs per IF in
'dbbc3.ctl'.

There are five requirements for correct mask values:

  1. For a non-zero mask, the number of channels must be a power of
     two.

  2. All selected channels must have the same width (bits/channel):
     one-bit or two-bits.

  3. If both masks are non-zero, they must have the same number of
     channels and width.

  4. For DDC_V, 'mask1' must be non-zero and 'mask2' cannot be
     non-zero.

  5. For DDC_U, at least one of 'mask1' and 'mask2' must be non-zero.

For DDC_U, if only one of the masks in a 'core3h_mode=n,...,'force'
command is non-zero, the FS will command the board as though the other
mask had the same value. (You will see the additional mask displayed
in the monitor response for the board.) This is done to satisfy the
Core3H board requirement that both masks must have the same number of
channels and width (bits/channel). As a consequence of this, if you
want to record data from only the first or second Core3H board output
(that is to say only 'mask1' or 'mask2' is commanded as non-zero in
the 'core3h_mode' command), you will need to disable the other output
with the Core3H board command 'destination 0 none' (or 'destination 1
none', as appropriate). (The monitor value for a mask with the
destination set to 'none' will be display in curly braces, '{...}',
see below.) The FS commanding the non-zero mask in place of the zero
one has no impact on what channels are used by the FS internally,
e.g., for Tsys monitoring. That is controlled entirely by what masks
were specified in the 'core3h_mode' command.

For DDC_V, the board's 'destination 1' does not need to be set to
'none' because that output is disabled by the firmware.

The monitor display values for 'mask2' or 'mask1' will be followed by
the Core3H board values of 'mask4' or 'mask3', respectively, in square
brackets, '[...]', _if_ they do not have the expected values. For
DDC_U, the value of 'mask4' is expected to agree with 'mask2' and
'mask3' is expected to agree with 'mask1'. For the DDC_V personality,
'mask4' and 'mask3' (and additionally 'mask2') are expected to be
zero. If the masks do not have the expected values they are not
configured correctly. It is a requirement for DDC_U operation that the
'mask4' and 'mask3' agree with 'mask2' and 'mask1', respectively. For
DDC_V, only 'mask1' should be non-zero.

The display values for the masks are enclosed in curly braces,
'{...}', if they are non-zero and the corresponding output destination
('0' for 'mask1'/'mask3', '1' for 'mask2'/'mask4') is set to 'none'.
This indicates that there is no output for that mask even though it is
non-zero. The destination is not set by 'core3h_mode'. It must be set
by other means, usually the boot configuration or low-level
'core3h=...' SNAP commands. For DDC_V, curly braces are always used
for 'mask2'/'mask4' (if non-zero) since that output is inherently
disabled.

The meaning of the bits in the mask are given in the following table
starting with the least significant bit. Mask1 represents the first
eight BBCs for a Core3H board; Mask2, the second eight. In the table,
the first eight BBCs for a board are generically numbered 1-8; the
second eight, 9-16.

 Bit   Mask2  Mask1
  1     9US    1US
  2     9UM    1UM
  3     9LS    1LS
  4     9LM    1LM
  5    10US    2US
  6    10UM    2UM
  7    10LS    2LS
  8    10LM    2LM
  9    11US    3US
 10    11UM    3UM
 11    11LS    3LS
 12    11LM    3LM
 13    12US    4US
 14    12UM    4UM
 15    12LS    4LS
 16    12LM    4LM
 17    13US    5US 
 18    13UM    5UM 
 19    13LS    5LS 
 20    13LM    5LM 
 21    14US    6US
 22    14UM    6UM
 23    14LS    6LS
 24    14LM    6LM
 25    15US    7US
 26    15UM    7UM
 27    15LS    7LS
 28    15LM    7LM
 29    16US    8US
 30    16UM    8UM
 31    16LS    8LS
 32    16LM    8LM

The number of BBCs available per board may be 8, 12, or 16 depending
on the hardware configuration. If the number of BBCs available per
board is 12, they are the eight of Mask1 and the first four of Mask2.
The BBCs for each mask for each board are:

Board  Mask2  Mask1
  1   65- 72   1- 8
  2   73- 80   9-16
  3   81- 88  17-24
  4   89- 96  25-32
  5   97-104  33-40
  6  105-112  41-48
  7  113-120  49-56
  8  121-128  57-64
