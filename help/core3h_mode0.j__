core3h_modex - set core3h mode (DBBC3 rack)

Syntax:   core3h_mode0=state,force,okay
          core3h_modeX=mask2,mask1,decimation,sample,force,okay

Response: core3h_modeX/mask2,mask1,decimation,sample,clock,split,input
          core3h_modeX/stopped

Settable parameters:

state:      begin or end. No default, see 'Comments' section for more
            details.

force:      force setup: literal 'force', '$', nor null. See comments.

X           1 to 8, but is limited to the number of IFs boards
            specified in dbbc3.ctl

mask2:      VSI2 input bit-stream mask, usually hex, 32-bit wide
            maximum, for example: 0xf, default 0, null on display if
            zero. See the 'Comments' section for more details.

mask1:      VSI1 input bit-stream mask, usually hex, non-zero 32-bit
            wide maximum, for example: 0xf, default 0xffffffff

decimation: decimation factor: 1-255. No default unless 'sample' (next
            parameter) is specified. For DDC_V, only '2' is permitted.

sample:     sample rate in Ms/s: must be greater than 0.499. The value
            divided into the maximum data rate (256 Ms/s) for DDC_U
            must yield a valid decimation factor. For DDC_V, only 64
            Ms/s is accepted. Unless a decimation factor was
            specified, the default for DDC_U is 256 Ms/s (decimation
            1); for DDC_V, 64 Ms/s (decimation 2). For response, since
            the sample rate is not reported by the device, the
            reported 'decimation' implied sample rate is shown in
            parenthesizes for reference.

okay        override to allow command while recording, literal text:
            'disk_record_ok'

Monitor only parameter:

stopped     literal 'stopped' if board output has been stopped

clock       input clock rate in Hz

split       split mode: 'on' or 'off'

input       VSI input: 'tvg','vsi1','vsi2','vsi1-2','vsi1-2-3-4','gps'

Comments:

Beware that some of these commands can take several seconds to
execute. This particularly true for 'core3h_mode=end' (no 'force'),
which can take 20 seconds.

The state values of 'begin' and 'end' mark the beginning and end of
Core3H configuration for a mode. For example:

   core3h_mode0=begin,force
   core3h_mode1=...,force
   ...
   core3h_mode0=end,force

Up to the total number of Core3h boards in the rack (the maximum is
set in dbbc3.ctl) can be set-up between the 'begin' and 'end'. Any
boards that are not set-up will have their output disabled (stopped)
by the 'end,force' (which will also start the output of boards that
are set-up). This is to make sure only the set-up boards will send
data.

These commands, in their command form, i.e., with '=', update the FS's
model of Core3H boards' state, with or without 'force'. Once a 'begin'
has been executed, the FS's model is not well defined until the
matching 'end' has been executed. No commands other than other
'core3h_modeX' command should be executed between them. If there are
other commands, the results may not be well defined, particularly for
'mk5c_mode'/'fb_mode' and 'tpicd'.

By default, the command forms of these commands only check the state
of the Core3H board. This occurs if the 'force' parameter is '$' or
null. If it is literal 'force', the board will be configured. Using
'$' as a synonym for null is to support allowing the operator to use
'force' as the argument for a setup procedure from 'drudg' to force
setup, while making only checking the default for schedules. The
'drudg' generated setup procedures will be called from schedules with
no argument, for example:

    setup01

To setup the Core3H boards, the operator can use the same procedure
with 'force' as its argument:

    setup01=force

The 'force' will be passed to Core3H setup sub-procedure, which will
pass it to the Core3H setup commands. Due to the structure of SNAP, if
no argument is given, a '$' will appear as the value of the 'force'
parameter in Core3H set-up commands. Hence the commands accept '$' in
place of the 'force' parameter to preserve the checking functionality.

This approach is used because after the Core3H boards are configured,
the operator must sync them. Once that is completed, the operator will
need to start/stop the data transmission for the mode, by executing
the command:

    core3h_mode0=end,force

Using the setup procedure with 'force' will also execute this command,
but it will fail for the first board to be started because the Core3H
boards have not been synced. This error can serve as reminder to the
operator to sync the boards and execute the above 'end,force' again.

The 'core3_mode0=end' command, with or without 'force', checks the
DBBC3 firmwware version for agreement with the FS control files. This
is intended to be the primary DBBC3 version check since this command
is:

- part of both a complete set-up and check of a mode, both of which
  should executed by the operator as part of normal operations

- the final command of such a set-up/check, so an error should be more
  visible

The 'core3h_modeX=...,force' command, 'x' not equal to '0', also
checks in DBBC3 firmware version in case it is used by itself.

The effective sample rate can be specified in the SNAP command either
explicitly with the 'sample' parameter or implicitly with the
'decimation' parameter. Only one of 'sample' and 'decimation' may be
specified. The device does not respond with the commanded effective
sample rate. In the query response for this command, the implied
sample rate is shown in parentheses for informational purposes only.

For a DBBC3 DDC_V personality only a decimation of '2' or sample rate
of '64' are allowed.

To use a non-zero 'mask2', the DBBC3 personality must be DDC_U.
Additionally, there can't be bits turned on for BBCs in 'mask2' that
exceed the number available as set by the number of BBCs per IF in
'dbbc3.ctl'.

The meaning of the bits in the mask are given in the following table.
Mask1 represents the first eight BBCs for a Core3h board; mask2, the
second eight. In the table, the first eight BBCs for a board are
generically numbered 1-8; the second eight, 9-16.

 Bit   Mask2  Mask1
  1     9US    1US
  2     9UM    1UM
  3     9LS    1LS
  4     9LM    1LM
  5    10US    2US
  6    10UM    2UM
  7    10LS    2LS
  8    10LM    2LM
  9    11US    3US
 10    11UM    3UM
 11    11LS    3LS
 12    11LM    3LM
 13    12US    4US
 14    12UM    4UM
 15    12LS    4LS
 16    12LM    4LM
 17    13US    5US 
 18    13UM    5UM 
 19    13LS    5LS 
 20    13LM    5LM 
 21    14US    6US
 22    14UM    6UM
 23    14LS    6LS
 24    14LM    6LM
 25    15US    7US
 26    15UM    7UM
 27    15LS    7LS
 28    15LM    7LM
 29    16US    8US
 30    16UM    8UM
 31    16LS    8LS
 32    16LM    8LM

The number of BBCs available per board may be 8, 12, or 16 depending
on the hardware configuration. The BBCs for each mask for each board
are:

Board  Mask2  Mask1
  1   65- 72   1- 8
  2   73- 80   9-16
  3   81- 88  17-24
  4   89- 96  25-32
  5   97-104  33-40
  6  105-112  41-48
  7  113-120  49-56
  8  121-128  57-64
