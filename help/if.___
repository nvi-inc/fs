		      if - conditional execution

            Syntax:     if=condition,true-command,false-command

            Response:   none


Settable parameters:
          condition     condition to test, see list in comments, lower
                        case only, leading and trailing spaces are trimmed,
                        no default
          true-command  SNAP command to execute if condition is true,
                        leading spaces are trimmed, default is null
          false-command SNAP command to execute if condition is false,
                        leading spaces are trimmed, default is null

Comments:
This command provides conditional execution of SNAP commands based on
whether the "condition" is True or False.  If the value of the
"condition" is True, the "true-command" is executed; if False, the
"false-command" is executed.  If the command that would be executed is
null (empty), the "if" command is essentially a no-op.o  The
"true-command" and "false-command" can be procedures. Nesting of "if"
commands is supported and described farther below.

The available "condition"s and their values are given in the following
tables.  All DBBC rack types include those with or without a FiLa10G.

condition       value
---------       -----
true            always True
false           always False

condition       True iff (if and only if)
---------       -----
ddc             a DBBC_DDC rack is in use
pfb             a DBBC_PFB rack is in use
cont_cal        DBBC/DBBC3 continuous cal is selected
bbcNN           DBBC_DDC BBCNN  is selected for recording
bbcNNN          DBBC3    BBCNNN is selected for recording
schedule:string string matches the leading substring of the schedule, see below

condition       True iff any channels from a ... are selected for recording
---------       -----
core1           DBBC_PFB core1
core2           DBBC_PFB core2
core3           DBBC_PFB core3
core4           DBBC_PFB core4
ifa             DBBC/DBBC3 ifa
ifb             DBBC/DBBC3 ifb
ifc             DBBC/DBBC3 ifc
ifd             DBBC/DBBC3 ifd
ife             DBBC3 ife
iff             DBBC3 iff
ifg             DBBC3 ifg
ifh             DBBC3 ifh

If the "schedule:string" condition, the string is compare to the
leading characters of the current schedule name.  If and only if (iff)
they match, the condition is true. For example:

  if=schedule:r1,yes,no

executes "yes" if the schedule name starts with "r1".  If ":" or
":string" is omitted, the command is true iff any schedule is
executing.  Trailing spaces in "string" are ignored unless they are
followed by a colon (which is discarded).  If no schedule is executing
(schedule=) all of the follow lines will all execute "no":

  if=schedule,yes,no
  if=schedule:none,no,yes
  if=schedule=:none    :,no,yes

Please note that if a schedule named "none" is executing
(schedule=none), the above commands will also all execute "no".

It is necessary to use backslash ("\") to "escape" any commas (",")
and at-signs ("@") within the "true-command" and "false-command".  For
example to set the gain to AGC for IFA *if* IFA is in use without
changing the value of other parameters, use:

  if=ifa,ifa=*\,agc\,*\,*

For nested "if" commands, multiple backslashes must be used to escape
commas and at-signs.  The progression of the number of backslashes
needed for each level of nesting (start with no nesting) is 1 (see
example above), 3, 7, 15, 31, etc.  In other words, to escape an
existing escape (of a single backslash) in a not nested "if" for use
in a nest "if", add two more backslashes.  To escape an escape with
three backslashes for another level of nesting add four more, and so
on, doubling the number to add at each level of nesting. More than one
level of nesting gets very complicated.  Executing a procedure that
executes another "if" may be better.

A method to construct a nested "if" is to start with the final command
to be executed.  When you add an "if=..."  in front of it, add a back
slash in front of each comma or at-sign.  If you add another "if=..."
in front of that "if=..." command, add two backslashes before any
single backslashes and a single backslash before any not backslashed
commas or at-signs.  On the next iteration use the same rule, but add
four backslashes before any triple backslashes.  Continue in this
fashion for each level of "if", doubling the number of backslashes
added before the previous level's greatest number of backslashes.

Here is an example of using backslashes in nested "if"s.  The goal for
this example is to construct a command that will execute:

 bbc_gain=all,agc

only if the DBBC personality is "ddc" and the calibration mode is NOT
continuous cal. The steps are:

1. Start with desired command:

     bbc_gain=all,agc

2, Add an "if" for "ddc", escaping the existing comma:

     if=ddc,bbc_gain=all\,agc

3. Add an enclosing "if" for NOT continuous cal.  This requires adding
   a backslash before the previously not escaped comma and adding two
   before the one previously escaped:

     if=cont_cal,,if=ddc\,bbc_gain=all\\\,agc

   The above is the resulting command. Please also note the empty
   "true-command" for the outer "if".
