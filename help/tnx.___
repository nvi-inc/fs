                tnx - thanks for the error report

            Syntax:     tnx=code,number,off/on,#num

            Response:   tnx/code,number,off/on,#num,string,example


Settable parameters:
          code        Two character error code, e.g., 'sp'.
          number      Error message number, e.g., '-999'.
          off/on      Display status on or off (default).
          #num        literal '#' followed by an integer associated
                      with the error "string". Default is '#1' if only
                      one instance of error "code,number" has
                      occurred, but null if there has been more than
                      one. '#-1' matches all instances of a
                      "code,number".

Monitor-only parameters:
          string      the error message instance associated with
                      code,number and "#num". This is null if the
                      code,number is not defined in "fserr.ctl",
                      "sterr.ctl", or the list of OS error messages.
          example     example of message if not defined in "fserr.ctl"
                      or "sterr.ctl"

Comments:
This command is intended to provide a way to silence (turn-off)
display of specific error messages if the operator determines that
nothing can be done to correct the problem.  For example, if one
parameter of a module's set-up is wrong or is reported incorrectly by
the hardware and the operator has determined that nothing can be done,
the operator can silence that one error message rather than unchecking
the entire module.  Even if the error message is silenced for display,
it is still written to the log.

Use of the "previous value" symbol '*' is not supported for any
parameters of 'tnx'.
 
The listing form of the command, i.e., just 'tnx', displays errors
that have been silenced.  Each error is listed in a separate log
entry.

If the "off/on" parameter is 'on' display of the message is
re-enabled.

The '#num' parameter is only needed if more than instance of an error
with the specified "code,number" combination has occurred.  If there
is more than one instance and '#num' is not specified, all instances
that have occurred so far are displayed with their corresponding
"#num" values along with a suggestion to use the '#num' form.  If
'#num' is specified as "#-1" (or any other negative value except
'-32768'), it will match all instances of the "code,number" that have
occurred so far.  In this case only, the FS will not complain if the
display status of any of the "code,number" errors are already in the
requested state.

If the displayed error string is null (empty) but when the error
occurs a string is displayed that may because the programmer is
supplying the string in a call to 'logite()' along with the error
'code,number'.  This may be because the string contents are variable.
Note that in this case 'tnx' will not distinguish between such
variable strings.  It will silence all errors with that error
"code,number".  This is different from how it handles different error
strings from "fserr.ctl" and "sterr.ctl", all of which are
individually suppressible, but have a more limited range of variation.
For "code,number" errors with completely variable strings, the 'tnx'
command prints an example string to help identify it.  This is most
helpful if all the errors for the "code,number" are related, maybe
only differing by a specific value in an otherwise fixed string.

This command must be used with great care. If misused it may silence
important error messages that the operator needs to know about.
Consequently, it is not possible to silence error messages until they
occurred.  The list of silenced error messages is cleared every time
the FS is started.  Silencing an error message is not the same as
correcting the underlying problem, which is the preferred method of
dealing with an error message.
