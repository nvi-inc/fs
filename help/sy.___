                    sy - send a system command

            Syntax:     sy=command

            Response:   none


Settable parameters:
              command       The command to be sent to the system. 

Comments: 

This command is used to execute a UNIX program from within the Field
System.  The UNIX program is executed by using the system() call,
which executes 'command' by calling

    /bin/sh -c command

See 'man system' for more details.  Any response or error from the
command will be displayed on the terminal that the FS run on, usually
the Field System Log and Display widow, the response will not go in
the log.

Normally if you need to execute a UNIX program, use the operator menu
to open a new window temporarily and type your commands and see the
output there.  The 'sy=...' command should be used only if there is a
need for a system command in a procedure or schedule.

Any valid '/bin/sh' command that does not require input may be used.
There is no facility for accepting user input when you use the
'sy=...'  command.

Since a UNIX program could take some time to execute and therefore tie
up the Field System, it is recommended that the commands used with
'sy=...' be executed in the background by appending an '&' to the
line.  If you do want to wait until the command finishes, do not use
the '&'.  That may be necessary if some action needs to be completed
before schedule execution can continue.  However, if the command
blocks for an extended period of time, the schedule may be delayed.

Output from the command can be included in the log by using the FS
utility program, 'popen' (pronounced "p-open"), which uses the
'popen()' system call, in the 'sy=...' command.  It accepts options:

  -c command   command to send, default is the first non-option argument
  -n name      name to use for log entries, default 'popen'
  -t time-out  time-out in seconds, default is none
  -l           suppress display of output, it will only be logged

Quotes around the 'command' to be executed and its arguments are
required unless there are no interior spaces, i.e., there is a single
token.

Any errors reported to 'stderr' can be written to the log by including
'2>&1' in the command, inside the quotes around the command, usually
at the end. If this is omitted, any errors will just be displayed, not
logged. Generally speaking it is desirable to log errors. Note that if
the command is UNIX pipeline command (two or more commands separated
by "pipe" ('|'), the '2>&1' would need to be included for each
separate command.

An example of 'popen' usage:

  sy=popen 'uptime -p 2>&1' -n uptime &

In this case, the 'popen' program executes the 'uptime' command with
option '-p' in background (due to the trailing '&'), reads the
command's _stdout_ output, and logs it in the FS log. Any output to
_stderr_ would also be logged. All log entries will start with
'uptime/'. An example display result is:

21:46:20;sy=popen 'uptime -p 2>&1' -n uptime &
21:46:20#popen#uptime/up 7 hours, 19 minutes

The '-t' option can be used to set a time-out. This can be especially
useful to prevent an 'sy=...' command without an ampersand from
blocking execution indefinitely. If the command being run by 'popen'
has its own time-out facility, it is recommended that it be used
instead.

If python 2.7 is available, an external program 's_client' can be used
in 'sy=...' commands for simple ASCII transactions with devices over
Ethernet sockets. It accepts options:

  -h host      host or IP to access, default 127.0.0.1
  -p port      port to access, default 5000
  -t time-out  time-out in seconds, default 1
  -c command   command to send, default 'dbe_atten?;'
  -n name      name for error reports, default program name, typically 's_client'

The following is an example of using 's_client' with 'popen' to log
command results (and errors):

sy=popen 's_client -h hubpc -c "mci_data? pmc_vacuum" -t 20 2>&1' -n hpccn &
