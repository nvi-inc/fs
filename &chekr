FTN4,X
C@CHEKR 
      PROGRAM CHEKR(3,1000),CHECK MARK III MODULES C#881012:16:32#
C 
C     This program steps through all of the Mark III modules
C     and checks their settings against those sent out by commands
C     or expected values.  All monitor-only values are updated in COMMON. 
C     Those modules specified in the ICHECK array in COMMON 
C     are processed.
C 
      INCLUDE #FSCOM::FS
C 
C  INPUT: 
C 
C     RMPAR - NOT USED
C 
C  SUBROUTINES CALLED:
C 
C     MATCN - to get data from the modules
C     BOSS  - to report error messages
C     LOGIT - to log and display the error
C     MA2VC - decode the MATCN buffers for VC 
C     MA2IF - decode the MATCN buffers for IF 
C     MA2FM - decode the MATCN buffers for FM 
C     MA2RP - decode the first MATCN buffer for the tape
C     MA2EN - decode the second MATCN buffer for the tape 
C     MA2TP - decode the third MATCN buffer for the tape
C     MA2MV - decode the fourth MATCN buffer for the tape 
C 
C  LOCAL VARIABLES: 
C 
C     TIMHP1,TIMHP2 - two readings of computer time 
C     TIMEFM - reading of formatter clock time
C     TIMTOL - tolerance on comparison between formatter and HP 
C     IAGAIN - repeat period for CHEKR
C     IDAREF - reference day number, from HP, re-set every loop 
      LOGICAL KALARM
C      - true for alarm ON, i.e. NAK response from MAT
C     I - major loop counter for module number 1 to NMOD
      DIMENSION IP(5) 
C      - for RMPAR
      DIMENSION POFFX(2)
C      -  for Head Position Read-out
      DIMENSION IBUF1(40),IBUF2(5),IBUF3(5),IBUF4(5)
C      - the buffers from MATCN 
      DIMENSION LMODNA(18), NBUFS(18), ICODES(4,18) 
C      - MODule NAmes, 2-char codes 
C      - Number of BUFfers for each module
C      - Integer CODES for MATCN for each buffer
      DIMENSION INERR(14),ICHERR(168) 
C      - Arrays for recording identified error conditions 
C     LWHO - mnemonic for CHEKR 
      DIMENSION LFR(3),IT(28),LGEN(2) 
C      - dummy arrays for checking
      DIMENSION IREG(2) 
      EQUIVALENCE (IREG(1),REG) 
C 
C  INITIALIZED: 
C 
      DATA TIMTOL/1.0/
C                   Set time tolerance to 1 second
      DATA IAGAIN/20/ 
C                   Set repeat time to 20 sec 
      DATA LWHO /2HCH/
      DATA LMODNA /2HV1,2HV2,2HV3,2HV4,2HV5,2HV6,2HV7,2HV8,2HV9,2HVA, 
     /             2HVB,2HVC,2HVD,2HVE,2HVF,2HIF,2HFM,2HTP/ 
      DATA NBUFS/15*2,2,2,4/
      DATA ICODES/-1,-2,0,0,-1,-2,0,0,-1,-2,0,0,
     .            -1,-2,0,0,-1,-2,0,0,-1,-2,0,0,
     .            -1,-2,0,0,-1,-2,0,0,-1,-2,0,0,
     .            -1,-2,0,0,-1,-2,0,0,-1,-2,0,0,
     .            -1,-2,0,0,-1,-2,0,0,-1,-2,0,0,
     .            -1,-2,0,0,-4,-3,0,0,-1,-2,-3,-4/
      DATA NMOD/18/ 
      DATA NVERR,NIFERR,NFMERR,NTPERR,MAXERR /9,8,11,14,14/ 
      DATA HDTOL /5.0/
C       - tolerance for tape head position, um. 
C HISTORY 
C 880615 NRV CHANGED CALL TO POSIT PER LAR'S CHANGES
C 
C 
C     1. First get our input parameters.
C 
      CALL RMPAR(IP)
C                   We make not use of RMPAR parameters 
100   CONTINUE
C 
C 
C 
C     2. Now set up the loop over the to-be-checked modules.
C     Fill up classes with requests to MATCN for data, and
C     send them out.  Do only one module at a time so as not to 
C     tie up the communications.  If there is an error in MATCN 
C     log it, and go on to the next module. 
C 
200   CONTINUE
      CALL EXEC(11,IBUF1) 
      IDAREF = IBUF1(5) 
C                   Get and store reference day number for comparing
C                   with formatter
C 
      DO 699 I=1,NMOD 
C 
        IF (ICHECK(I).LE.0) GOTO 699
C 
        DO 205 J=1,MAXERR 
          INERR(J) = 0
205     CONTINUE
        DO 690 II=1,3 
          DO 220 JJ=1,2 
            IBUF1(2) = LMODNA(I)
            ICLASS = 0
            DO 210 J=1,NBUFS(I) 
              IBUF1(1) = ICODES(J,I)
              CALL EXEC(20,0,IBUF1,-4,2HFS,0,ICLASS)
210         CONTINUE
C 
            IBUF1(1) = 8
            IBUF1(3) = 2H'
            CALL EXEC(20,0,IBUF1,-5,2HFS,0,ICLASS)
C                   Finally, get alarm status 
C 
            IF(I.EQ.17) CALL EXEC(11,IBUF3) 
            CALL EXEC(23,6HMATCN ,ICLASS,NBUFS(I)+1)
C                   Send our requests to MATCN for the data 
            IF(I.EQ.17) CALL EXEC(11,IBUF4) 
C                   Get computer time if we're checking the formatter 
C 
            CALL RMPAR(IP)
            ICLASS = IP(1)
            NREC = IP(2)
            IERR = IP(3)
C 
            IF (IERR.GE.0) GOTO 300 
            CALL CLRCL(ICLASS)
220       CONTINUE
          CALL LOGIT(0,0,0,0,IERR,LWHO,LMODNA(I)) 
          GOTO 699
C                   There was an error in MATCN.  Log it and go on
C                   to the next module. 
C 
C 
C 
C     3. This is the VC section.
C 
300   IF (ICHECK(I).LE.0) GOTO 695
C 
      IF (I.GT.15) GOTO 400 
C 
      CALL EXEC(21,ICLASS,IBUF1,-10)
      CALL EXEC(21,ICLASS,IBUF2,-10)
      IF (ICHECK(I).LE.0) GOTO 699
      CALL MA2VC(IBUF1,IBUF2,LFR,IBW,ITP,IA1,IA2, 
     .           IREMVC(I),ILOKVC(I),TPIVC(I),IALARM) 
      IF(IREMVC(I).NE.0) INERR(1) = INERR(1) + 1
      IF (ICHCM(LFR,1,LFREQV(1,I),1,6).NE.0) INERR(2)=INERR(2)+1
      IF (IBW.NE.IBWVC(I)) INERR(3)=INERR(3)+1
      IF (ITP.NE.ITPIVC(I)) INERR(4)=INERR(4)+1 
      IF (IA1.NE.IATUVC(I)) INERR(5)=INERR(5)+1 
      IF (IA2.NE.IATLVC(I)) INERR(6)=INERR(6)+1 
      IF (ILOKVC(I).NE.0) INERR(7)=INERR(7)+1 
      IF (TPIVC(I).EQ.65535.0) INERR(8)=INERR(8)+1
      CALL EXEC(21,ICLASS,IBUF1,-10)
      KALARM = ICHCM(IBUF1,3,3HNAK,1,3).EQ.0
      IF (.NOT.KALARM) GOTO 310 
        CALL EXEC(21,ICLASS,IBUF1,-10)
        INERR(9)=INERR(9)+1 
C 
310   DO 320 JJ=1,NVERR 
        IF((INERR(JJ).GT.0.AND.II.EQ.1).OR.II.EQ.2) GOTO 690
320   CONTINUE
      DO 340 JJ=1,NVERR 
        INDX=(I-1)*NVERR+JJ 
        IF(INERR(JJ).LT.2) GOTO 330 
          ICHERR(INDX)=ICHERR(INDX)+1 
          GO TO 340 
330     ICHERR(INDX)=0
340   CONTINUE
      GO TO 699 
C 
C     4. This is the IF distributor section.
C 
400   IF (I.NE.16) GOTO 500 
C 
      CALL EXEC(21,ICLASS,IBUF1,-10)
      CALL EXEC(21,ICLASS,IBUF2,-10)
      IF (ICHECK(I).LE.0) GOTO 699
      CALL MA2IF(IBUF2,IBUF1,IA1,IA2,IN1,IN2,TP1IFD,TP2IFD,IREMIF)
      IF(IREMIF.NE.1) INERR(1)=INERR(1)+1 
      IF (IA1.NE.IAT1IF) INERR(2)=INERR(2)+1
      IF (IA2.NE.IAT2IF) INERR(3)=INERR(3)+1
      IF (IN1.NE.INP1IF) INERR(4)=INERR(4)+1
      IF (IN2.NE.INP2IF) INERR(5)=INERR(5)+1
      IF (TP1IFD.EQ.65535.0) INERR(6)=INERR(6)+1
      IF (TP2IFD.EQ.65535.0) INERR(7)=INERR(7)+1
      CALL EXEC(21,ICLASS,IBUF1,-10)
      KALARM = ICHCM(IBUF1,3,3HNAK,1,3).EQ.0
      IF (.NOT.KALARM) GOTO 410 
        CALL EXEC(21,ICLASS,IBUF1,-10)
        INERR(8)=INERR(8)+1 
410   DO 420 JJ=1,NIFERR
        IF((INERR(JJ).GT.0.AND.II.EQ.1).OR.II.EQ.2) GOTO 690
420   CONTINUE
      DO 440 JJ=1,NIFERR
        INDX=15*NVERR+JJ
        IF(INERR(JJ).LT.2) GOTO 430 
          ICHERR(INDX)=ICHERR(INDX)+1 
          GO TO 440 
430     ICHERR(INDX)=0
440   CONTINUE
      GO TO 699 
C 
C 
C     5. This is the Formatter section. 
C 
500   IF (I.NE.17) GOTO 600 
C 
      CALL EXEC(21,ICLASS,IBUF1,-10)
      CALL EXEC(21,ICLASS,IBUF2,-10)
      CALL MA2FM(IBUF1,IN,IM,IR,ISYN,ITSTFM,ISGNFM,IRUNFM,
     .           IREMFM,IPWRFM,IALARM)
      IF(IREMFM.NE.0) INERR(1)=INERR(1)+1 
      IF (IN.NE.INPFM) INERR(2)=INERR(2)+1
      IF (IM.NE.IMODFM) INERR(3)=INERR(3)+1 
      IF (IR.NE.IRATFM) INERR(4)=INERR(4)+1 
      IF (ISYN.NE.ISYNFM) INERR(5)=INERR(5)+1 
      IF (ITSTFM.NE.0) INERR(6)=INERR(6)+1
      IF (IPWRFM.NE.0) INERR(7)=INERR(7)+1
      IF (IRUNFM.NE.0) INERR(8)=INERR(8)+1
      TIMHP1 = (IBUF3(5)-IDAREF)*86400.0+IBUF3(4)*3600.0+ 
     .         IBUF3(3)*60.0+IBUF3(2) 
      TIMHP2 = (IBUF4(5)-IDAREF)*86400.0+IBUF4(4)*3600.0+ 
     .         IBUF4(3)*60.0+IBUF4(2) 
      TIMEFM = (IAS2B(IBUF1,5,3)-IDAREF)*86400.0+ 
     .         IAS2B(IBUF2,3,2)*3600.0+IAS2B(IBUF2,5,2)*60.0+ 
     .         IAS2B(IBUF2,7,2) 
      IF(TIMHP2-TIMHP1.LE.2.0*TIMTOL) GOTO 510
        INERR(9)=INERR(9)+1 
        GO TO 520 
510   IF(TIMEFM.LT.TIMHP1-TIMTOL.OR.TIMEFM.GT.TIMHP2+TIMTOL)
     .INERR(10)=INERR(10)+1 
520   CALL EXEC(21,ICLASS,IBUF1,-10)
      KALARM = ICHCM(IBUF1,3,3HNAK,1,3).EQ.0
      IF (.NOT.KALARM) GOTO 530 
        CALL EXEC(21,ICLASS,IBUF1,-10)
        INERR(11)=INERR(11)+1 
530   DO 540 JJ=1,NFMERR
        IF((INERR(JJ).GT.0.AND.II.EQ.1).OR.II.EQ.2) GOTO 690
540   CONTINUE
      DO 560 JJ=1,NFMERR
        INDX=15*NVERR+NIFERR+JJ 
        IF(INERR(JJ).LT.2) GOTO 550 
          ICHERR(INDX)=ICHERR(INDX)+1 
          GO TO 560 
550     ICHERR(INDX)=0
560   CONTINUE
      GO TO 699 
C 
C 
C     6. This is the tape section.
C 
600   IF (I.NE.18) GOTO 699 
C 
      CALL EXEC(21,ICLASS,IBUF1,-10)
      CALL EXEC(21,ICLASS,IBUF2,-10)
      CALL EXEC(21,ICLASS,IBUF3,-10)
      CALL EXEC(21,ICLASS,IBUF4,-10)
      CALL MA2RP(IBUF1,IREMTP,IBY,IEQ,IBW,ITA,ITB,IALARM) 
      CALL MA2EN(IBUF2,IENATP,IT,NT)
      CALL MA2TP(IBUF3,ILOWTP,LFEET,IFASTP,ICAPTP,ISTPTP,ITACTP,IRDYTP) 
      CALL MA2MV(IBUF4,IDIR,ISP,LGEN) 
      IERR = 0
      NTRKS = 0 
      DO 610 K=1,28 
        IF (IT(K).EQ.ITRKEN(K)) GOTO 609
        IERR = -1 
        GOTO 610
609     IF (IT(K).EQ.1) NTRKS=NTRKS+1 
610   CONTINUE
      IF(IREMTP.NE.0) INERR(1)=INERR(1)+1 
      IF (ISP.NE.ISPEED.AND.ISPEED.EQ.0) INERR(2)=INERR(2)+1
      IF (ISP.NE.ISPEED.AND.ISPEED.GT.0) INERR(3)=INERR(3)+1
      IF (ISPEED.NE.0.AND.IDIR.NE.IDIRTP) INERR(4)=INERR(4)+1 
      IF (IERR.NE.0) INERR(5)=INERR(5)+1
      IF (IBW.NE.IBWTAP) INERR(6)=INERR(6)+1
      IF (IEQ.NE.IEQTAP) INERR(7)=INERR(7)+1
      IF (IBY.NE.IBYPAS) INERR(8)=INERR(8)+1
      IF (ITA.NE.ITRAKA) INERR(9)=INERR(9)+1
      IF (ITB.NE.ITRAKB) INERR(10)=INERR(10)+1
      IF (.NOT.KHALT.AND.IRDYTP.NE.0) INERR(11)=INERR(11)+1 
      IF (ICHCM(LGEN,1,3H720,1,3).NE.0.AND. 
     .    ICHCM(LGEN,1,3H960,1,3).NE.0) INERR(12)=INERR(12)+1 
      IF ((ISP.GT.0.AND.ISP.NE.7).AND.
     .    (IENATP.EQ.0.OR.NTRKS.EQ.0)) INERR(13)=INERR(13)+1
      CALL EXEC(21,ICLASS,IBUF1,-10)
      KALARM = ICHCM(IBUF1,3,3HNAK,1,3).EQ.0
      IF (.NOT.KALARM) GOTO 615 
        CALL EXEC(21,ICLASS,IBUF1,-10)
        INERR(14)=INERR(14)+1 
615   GO TO (620,690,635) II
620   DO 630 JJ=1,NTPERR
        IF(INERR(JJ).EQ.0) GOTO 630 
          IF(JJ.LE.4) CALL SUSP(2,3)
          GO TO 690 
630   CONTINUE
635   DO 650 JJ=1,NTPERR
        INDX=15*NVERR+NIFERR+NFMERR+JJ
        IF(INERR(JJ).LT.2) GOTO 640 
          ICHERR(INDX)=ICHERR(INDX)+1 
          GO TO 650 
640     ICHERR(INDX)=0
650   CONTINUE
      GOTO 699
C 
690   CONTINUE
      GOTO 699
C 
C 
C      This is the end of the checking loop over modules. 
C 
695   CALL CLRCL(ICLASS)
699   CONTINUE
C 
C     7. This is the error-reporting section.  The array ICHERR is
C     examined to determine which error messages, if any, should
C     be logged and displayed.
C 
C  VC error reporting 
C 
      DO 720 I=1,15 
        INDX=(I-1)*NVERR+1
        IF(ICHECK(I).LE.0)GOTO 720
        IF(ICHERR(INDX).EQ.0) GOTO 705
          IF(ICHERR(INDX).GE.5) CALL LOGIT(0,0,0,0,-347,LWHO,LMODNA(I)) 
          CALL LOGIT(0,0,0,0,-301,LWHO,LMODNA(I)) 
          GO TO 720 
705   NERR=0
      DO 710 J=1,NVERR-1
        IF(ICHERR(INDX+J).GT.0)NERR=NERR+1
710   CONTINUE
      IF(NERR.LE.NVERR/2) GOTO 715
        CALL LOGIT(0,0,0,0,-310,LWHO,LMODNA(I)) 
        GO TO 720 
715   DO 718 J=1,NVERR-1
        IF(ICHERR(INDX+J).GE.5) 
     .  CALL LOGIT(0,0,0,0,-347,LWHO,LMODNA(I)) 
        IF(ICHERR(INDX+J).GT.0) 
     .  CALL LOGIT(0,0,0,0,-301-J,LWHO,LMODNA(I)) 
718    CONTINUE 
720   CONTINUE
C 
C  IFD error reporting
C 
      INDX=INDX+NVERR 
      IF(ICHECK(16).LE.0) GOTO 750
      IF(ICHERR(INDX).EQ.0) GOTO 725
        IF(ICHERR(INDX).GE.5) CALL LOGIT(0,0,0,0,-347,LWHO,LMODNA(16))
        CALL LOGIT(0,0,0,0,-311,LWHO,LMODNA(16))
        GO TO 750 
725   NERR=0
      DO 730 J=1,NIFERR-1 
        IF(ICHERR(INDX+J).GT.0) NERR=NERR+1 
730   CONTINUE
      IF(NERR.LE.NIFERR/2) GOTO 735 
        CALL LOGIT(0,0,0,0,-319,LWHO,LMODNA(16))
        GO TO 750 
735   DO 740 J=1,NIFERR-1 
        IF(ICHERR(INDX+J).GE.5) 
     .  CALL LOGIT(0,0,0,0,-347,LWHO,LMODNA(16))
        IF(ICHERR(INDX+J).GT.0) 
     .  CALL LOGIT(0,0,0,0,-311-J,LWHO,LMODNA(16))
740   CONTINUE
C 
C  Formatter error reporting
C 
750   CONTINUE
      INDX=INDX+NIFERR
      IF(ICHECK(17).LE.0) GOTO 780
      IF(ICHERR(INDX).EQ.0) GOTO 755
        IF(ICHERR(INDX).GE.5) 
     .  CALL LOGIT(0,0,0,0,-347,LWHO,LMODNA(17))
        CALL LOGIT(0,0,0,0,-320,LWHO,LMODNA(17))
        GO TO 780 
755   NERR=0
      DO 760 J=1,NFMERR-1 
        IF(ICHERR(INDX+J).GT.0) NERR=NERR+1 
760   CONTINUE
      IF(NERR.LE.NFMERR/2) GOTO 765 
        CALL LOGIT(0,0,0,0,-331,LWHO,LMODNA(17))
        GO TO 780 
765   DO 770 J=1,NFMERR-1 
        IF(ICHERR(INDX+J).GE.5) 
     .  CALL LOGIT(0,0,0,0,-347,LWHO,LMODNA(17))
        IF(ICHERR(INDX+J).GT.0) 
     .  CALL LOGIT(0,0,0,0,-320-J,LWHO,LMODNA(17))
770   CONTINUE
C 
C  Tape drive error reporting 
C 
780   CONTINUE
      IF(ICHECK(18).LE.0) GOTO 800
      INDX=INDX+NFMERR
      IF(ICHERR(INDX).EQ.0) GOTO 785
        IF(ICHERR(INDX).GE.5) 
     .  CALL LOGIT(0,0,0,0,-347,LWHO,LMODNA(18))
        CALL LOGIT(0,0,0,0,-332,LWHO,LMODNA(18))
        GO TO 800 
785   NERR=0
      DO 790 J=1,NTPERR-1 
        IF(ICHERR(INDX+J).GT.0) NERR=NERR+1 
790   CONTINUE
      IF(NERR.LE.NTPERR/2) GOTO 795 
        CALL LOGIT(0,0,0,0,-346,LWHO,LMODNA(18))
        GO TO 800 
795   DO 799 J=1,NTPERR-1 
        IF(ICHERR(INDX+J).GE.5) 
     .  CALL LOGIT(0,0,0,0,-347,LWHO,LMODNA(18))
        IF(ICHERR(INDX+J).GT.0) 
     .  CALL LOGIT(0,0,0,0,-332-J,LWHO,LMODNA(18))
799   CONTINUE
C 
C     8. Now we're going to check out the receiver. 
C******************************************************************** 
C**NOTE: THIS SECTION IS USED ONLY AT STATIONS USING NEW COOLED RECEIVERS 
C*********************************************************************
800    CONTINUE 
       DO 805 I=1,3 
         INERR(I) = 0 
805    CONTINUE 
       DO 890 I=1,3 
       IF(ICHK19.LE.0) GOTO 1000
       IBUF1(1) = 0 
       IBUF1(2) = 2HRX
       CALL RX2MA(IBUF1(3),LSWCAL,0,IDCHRX,IBXHRX,IFAMRX,2H1E)
       ICLASS = 0 
       CALL EXEC(20,0,IBUF1,-12,2HFS,0,ICLASS)
       IBUF1(1)=-1
       CALL EXEC(20,0,IBUF1,-4,2HFS,0,ICLASS)   
       IBUF1(1)=0 
       CALL RX2MA(IBUF1(3),LSWCAL,0,IDCHRX,IBXHRX,IFAMRX,2H1F)  
       CALL EXEC(20,0,IBUF1,-12,2HFS,0,ICLASS)  
       IBUF1(1)=-1  
       CALL EXEC(20,0,IBUF1,-4,2HFS,0,ICLASS) 
C 
       CALL EXEC(23,6HMATCN ,ICLASS,4)  
       CALL RMPAR(IP) 
       ICLASS = IP(1) 
       IERR = IP(3) 
       IF(IERR.GE.0) GOTO 810 
         CALL CLRCL(ICLASS) 
         CALL LOGIT(0,0,0,0,IERR,LWHO,2HRX) 
         GOTO 880 
 810   CONTINUE 
       CALL EXEC(21,ICLASS,IBUF3,-10) 
       CALL EXEC(21,ICLASS,IBUF3,-10) 
       CALL EXEC(21,ICLASS,IBUF2,-10) 
       CALL EXEC(21,ICLASS,IBUF2,-10) 
       CALL MA2RX(IBUF3(2),IDUM,IDUM,IDUM,IDUM,IDUM,V20K) 
       CALL MA2RX(IBUF2(2),ILO,IDUM,IDUM,IDUM,IDUM,V70K)
       CALL RXV2T(31,V20K,T20K,IER) 
       CALL RXV2T(32,V70K,T70K,IER) 
D     WRITE(LU,9001)ILO,T70K,T20K 
D9001 FORMAT("ILO,T70K,T20K = "I3,2F10.4) 
C 
C   Now compare values with acceptable limits 
       IF(ILO.NE.1) INERR(1) = INERR(1)+1 
       IF(T70K.GT.I70KCH) INERR(2) = INERR(2)+1 
       IF(T20K.GT.I20KCH) INERR(3) = INERR(3)+1 
C          -these values represent the voltages for 60K & 30K respectively
C 
       DO 850 J=1,3 
         IF(INERR(J).GT.0) GOTO 890 
 850   CONTINUE 
       IF(I.EQ.1) GOTO 880
 890   CONTINUE 
       DO 899 I=1,3 
         IF (I.EQ.1) ITEM=0 
         IF (I.EQ.2) ITEM=I70KCH
         IF (I.EQ.3) ITEM=I20KCH
         IF(INERR(I).GE.2) CALL LOGIT(0,0,0,1,-347-I,LWHO,ITEM) 
 899   CONTINUE 
 880   IBUF1(1)=0 
       CALL RX2MA(IBUF1(3),LSWCAL,0,IDCHRX,IBXHRX,IFAMRX,IADCRX)  
       ICLASS=0 
       CALL EXEC(20,0,IBUF1,-12,2HFS,0,ICLASS)  
       CALL EXEC(23,6HMATCN ,ICLASS,1)  
       CALL RMPAR(IP) 
       ICLASS=IP(1) 
       CALL CLRCL(ICLASS) 
C 
C    10. Check tape head positioning. 
C 
1000   IF (ICHK20.LE.0) GOTO 900
C 
C  TURN ON LVDT OSCILLATOR
C 
       I=1
       CALL POSIT(I,IPASHD(I),PNOWX,IP) 
       IF(IP(3).GE.0) GO TO 1005
       CALL LOGIT(0,0,0,0,IP(3),LWHO,2HHD)
       GOTO 1091
C 
1005   CONTINUE 
       CALL SUSP(1,25)
       DO 1090 I=1,2
         INERR = 0
         DO 1050 J=1,3
           CALL POSIT(I,IPASHD(I),PNOWX,IP) 
           IF (IP(3).GE.0) GOTO 1010
             CALL LOGIT(0,0,0,0,IP(3),LWHO,2HHD)
             GOTO 1091
1010       POFFX(I) = PNOWX - POSNHD(I) 
           IF (ABS(POFFX(I)).GT.HDTOL) INERR = INERR+1  
           IF (INERR.GT.0) GOTO 1050
           IF (J.EQ.1) GOTO 1090
1050     CONTINUE 
         IF (INERR.GE.2) CALL LOGIT(0,0,0,0,-350-I,LWHO,2HHD) 
1090   CONTINUE 
C 
C  Turn off LVDT Oscillator 
C 
1091  CONTINUE
      CALL LVDOF(IP)
      IF(IP(3).GE.0) GO TO 1092 
C     CALL LOGIT(0,0,0,0,IP(3),LWHO,2HHD) 
1092  CONTINUE
C 
C     9. Once we are finished, take a breather for 20 seconds.
C 
900   CONTINUE
      CALL EXEC(12,6HCHEKR ,2,1,-IAGAIN)
      CALL EXEC(6,0,1)
      GOTO 200
C 
      END 
