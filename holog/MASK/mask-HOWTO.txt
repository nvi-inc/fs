1. Make measurements with HOLOG program

   Make sure to get some data where Tsys will be "normal".

   A suitable set-up for a horizon mask might be:

     source=azel,180d,12d
     holog=360,16,73,-17,,mask

       Please be sure that offsets +/ half the span values in the
       holog=... command can reached from the position commanded with
       source=... command. Use positive spans and azimuth points for
       agreement with later processing.

   with SNAP procedures for RDBEs like:

     maski (set RDBE gain levels):

       track
       onsource
       xlog=on
       " initialization $
       xlog=off
       azeloff=0d,25d
       onsource=30
       track
       rdbe_atten=auto
       raw
       azeloff=0d,0d
       onsource=30
       track
       sy=go holog &
       
     maskp:

       xlog=on
       " position $
       xlog=off
       !+1s
       rdbe=dbe_tsys?0;
       sy=go holog &

   You an replace these procedures for ones that use other detectors.

2. Process log with holog_rdbe:

     holog_rdbe input band output

       input  is the input log
       band   is the RDBE designation 'a', 'b', 'c' or 'd';
       output is the output

       The output file will be contain space delimited columns of the
       RDBE Tsys data in the order it was sampled by HOLOG, one row per
       position.

   This script can be replaced with one that will place data from
   other detectors collected into the same output format.
     
3. Read processed data into MATLAB with holog.m

     grid=holog('file',detector,columns)

       grid     is the result rectangular matrix
       file     is the output from the previous step
       detector is the column number in the file (starting with 1) for the
                  data to be extracted
       columns  is the number of azimuth points from the holog=... command,
                
    The result is a matrix of the data with azimuth increasing along
    the columns, lowest azimuth data in column one, elevation increasing up
    the rows, lowest elevation data in row one. It can be plotted with:

      contour_holog(gird,azc,azs,elc,els,levels)

        grid   is the rectangular matrix of data
        azc    is the center of the scan in azimuth, 180 from the example above
        azs    is the azimuth step size span/(points-1), 5 from the example
                  above
        elc    is the center of the scan in elevation, 12 from the example above
        els    is the elevation step size span/(points-1), 5 from the example
                  above
        levels is an optipnal argument that can be used to specify contour
                  levels, otherwise the MATLAB default levels are used

4. Look at rectangular matrix to find normal Tsys levels.

   This can usually be found from the matrix in an area away from
   obstruction. If the highest elevation row is only seeing "blank"
   sky, then a reasonable value may be:

     tsys=mean(grid(end,:))

   Scaling the holog matrix by "tsys" can useful to represent make contour
   levels as mutiples of "tsys"

5. Pick factor N, where N*Tsys is the threshold for level for the mask. N=3
   may be a reasonable choice depending on the data and application. The value
   N does not have to be an integer.

   Other tools:

     Find factor "m" times Tsys that produces factor "n" of SEFD:

       m=n2m(n,Tblock,Tr,Ts)

       m  is corresponding factor for Tsys
       n  is the specified increase factor in SEFD
       Tb is the noise temperature of the blocking object, usually 300 (K)
       Tr is the noise temperature of the receiver, maybe ~40 (K)
       Ts is the noise temperature of the sky, maybe 10 (k)
 
     Find  factor "n" of SEFD that produces factor "m" times Tsys:

       n=m2n(m,Tblock,Tr,Ts)

       n  is corresponding factor for SEFD
       m  is the specified increase factor in Tsys
       Tb is the noise temperature of the blocking object, usually 300 (K)
       Tr is the noise temperature of the receiver, maybe ~40 (K)
       Ts is the noise temperature of the sky, maybe 10 (k)
 
6. Use find_mask with N*Tsys to generate mask:

     mask=find_mask(grid,N*Tsys,azc,azs,elc,els)

       mask is the resulting mask
       grid is the rectangular matrix of data
       azc  is the center of the scan in azimuth, 180 from the example above
       azs  is the azimuth step size span/(points-1), 5 from the example above
       elc  is the center of the scan in elevation, 12 from the example above
       els  is the elevation step size span/(points-1), 5 from the example above

    The resulting mask is vector with az-el pairs and a file azimith
    value that define "step heights" between the azomuth values.

7. Adjust mask for local issues and merge with other measurements. You can plot
   a mask with 

     plot_mask(mask,new,elev,azmin,azmax)

       mask  is the mask to be plotted
       new   is 1 to start a new plot, 0 to overlay on a existing plot, the
                latter is useful for comparing different masks on the same
                plot, if value is one, the following optional arguments
                have meaning
       elev  is an optional argument to specify the elevation at the top of
                the plot, otherwise the maximum elevation in the mask is
                used
       azmin is an optional argument to specify the azimuth at the left edge
                of the plot, otherwise the minimum azimuth in the mask is
                used
       azmax is an optional argument to specify the azimuth at the right edge
                of the plot, otherwise the maximum azimuth in the mask is
                used

       This routine can also plot a mask of an even mumber points that define
       a mask as line segments between az-el positions.

8. Use your mask
