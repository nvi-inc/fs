#!/usr/bin/python
"""application that starts a thread that receives the output from 'tail -f'. """

from Tkinter import *
import sys
import time
import threading
import os
import popen2
import tkMessageBox

class MainGui:
	filename = ''
	pid = 0
	
	def __init__(self, title = 'monpcal'):
		#handle arguments:
		geom = None
		if len(sys.argv)>2:
			if sys.argv[1]=='-geometry':
				geom = sys.argv[2]
		global master
		#make Tk object:
		master = Tk(className = title, baseName = title)

		#make tools, make it global so object has the same reference to all classes
		global tools
		tools = Tools()
		master.title(title)
		#master.wm_positionfrom('program')
		#name is title
		#set geometry:
		try:
			master.geometry(geom)
		except TclError:
			print 'Incorrect Geometry Setting'
		

		master.protocol('WM_DELETE_WINDOW', lambda:tools.exitProg())		



		self.popup = Menu(master, tearoff = 0)
		#runmenu.add_command(label='Read file', command = tools.startUp)
		self.popup.add_command(label='Stop reading', command = lambda: tools.stop())
		self.popup.add_command(label='Start Reading', command = lambda: tools.findFile())
		self.popup.add_command(label='Clear', command = lambda:tools.clearTable())
		self.popup.add_separator()
		self.popup.add_command(label='Log Info', command = lambda: tools.infoBox())
		self.popup.add_separator()
		self.popup.add_command(label="Quit", command=tools.exitProg)

		#master frame:
		frame = Frame(master)
		frame.pack()

		w = []
		global label
		label=[None]*15
		_label=[None]*3
		#create labels
		for i in range(15):
			label[i]=_label[:]
		
		#Create a UNIQUE! stringVar at every index/subindex
		for i in range(15):
			for j in range(3):
				label[i][j] = StringVar()
		
		#setting header labels
		k=0
		for i in ['Amp', 'Phase', 'Time']:
			label[0][k].set(i)
			k+=1
		#create table
		labelcol1 = []
		labelcol2 = []
		labelcol3 = []
		labelcol4 = []
		for i in range(15):
			w.append(Frame(frame, borderwidth = 0))
			w[i].pack(side = TOP, fill = X, expand = 0)
			w[i].bind('<Motion>', self.rightClick)
			if i == 0:
				labelcol1.append(Label(w[i], text = '', width = 2, pady = 0, bd = 0, anchor = E))
				labelcol1[-1].pack(side=LEFT)
				labelcol1[-1].bind('<Button-3>', self.rightClick)
			else:
				labelcol1.append(Label(w[i], text = i, width = 2, pady = 0, bd = 0, anchor = E))
				labelcol1[-1].pack(side=LEFT)
				labelcol1[-1].bind('<Button-3>', self.rightClick)
			labelcol2.append(Label(w[i], textvariable = label[i][0], width = 4, pady = 0, bd = 0, anchor = E))
			labelcol2[-1].pack(side=LEFT)
			labelcol2[-1].bind('<Button-3>', self.rightClick)
			labelcol3.append(Label(w[i], textvariable = label[i][1], width = 6, pady = 0,bd = 0, anchor = E))
			labelcol3[-1].pack(side=LEFT)
			labelcol3[-1].bind('<Button-3>', self.rightClick)
			labelcol4.append(Label(w[i], textvariable = label[i][2], width = 9, pady = 0, bd = 0))
			labelcol4[-1].pack(side=LEFT)
			labelcol4[-1].bind('<Button-3>', self.rightClick)

		
		#start log reading automatically
		tools.findFile()
		
		master.mainloop()

	def rightClick(self,event):
		#self.popup is menu
		try:
			self.popup.tk_popup(event.x_root, event.y_root, 0)
		finally:
			self.popup.grab_release()
		

class Tools:
	def __init__(self):
		self.status = StringVar()
		self.status.set('No file opened')
		self.first_run = 1
	def startUp(self):
		#initiate thread if file chosen
		if MainGui.filename:
			self.status.set('reading file: '+MainGui.filename)
			t1 = FileReader()
			t1.setDaemon(1) #Makes thread Daemonic, i.e sys.exit w.o errors possible
			t1.start()
		else: 
			self.message('Pick a log file')

	def infoBox(self):
		tkMessageBox.showinfo(title='Log File Info', message=self.status.get())
		
	def message(self, text):
		win = Toplevel()
		Label(win, text=text).pack()
		Button(win, text='OK', command = win.destroy).pack()

	def qmessage(self, label, text):
		x = tkMessageBox.askokcancel(label,text)
		# x=1 : ok, x=0 : Cancel
		return x


	def exitFileReader(self):
		#kills the thread of the FileReader if there is one
		if(MainGui.pid):
			os.popen('kill ' + str(MainGui.pid))
			#reset pid
			MainGui.pid = 0

	def exitProg(self):
		self.exitFileReader()
		master.destroy()
		sys.exit()

	def openLog(self):
		import tkFileDialog
		MainGui.filename = tkFileDialog.askopenfilename()


	def findFile(self):
		self.clearTable()
		MainGui.filename = ''
		lf = LogFinder()
		lf.setDaemon(1)
		lf.start()

	def stop(self):
		#stops FileReader from reading, sets status to idle and clears the table
		#
		self.status.set('No file opened')
		self.exitFileReader()
		#do not clear table
		#self.clearTable()
		

	def clearTable(self):
		for i in range(1,15):
			for j in range(3):
				label[i][j].set('')


class FileReader(threading.Thread):
	def run(self):
		lr = LineReader()
		#try to open file, on fail, display error
		try:
			child = popen2.Popen3('tail -f '+ MainGui.filename)
			output = child.fromchild
			MainGui.pid = child.pid
		#in case of an error:
		except:
			tools.stop()
			tools.message("Failed to run tail!")
		else: #if no error
		# child.poll() returns the exit status of child... -1 for running
			while child.poll() == -1:
				position = -1
				line = output.readline()
				l1 = lr.getData(line)			
				if l1: #if we got a list back, else None => l1 => false
					label[l1[0]][0].set(l1[2][0]) #amplitude
					label[l1[0]][1].set(l1[2][1]) #phase
					label[l1[0]][2].set(l1[3]) #date of measurement


			


class LogFinder(threading.Thread):
	def run(self):
		while 1:
			try:
				_child = popen2.Popen3('lognm')
			except:
				tools.message('Could not run lognm')
				break
			else:
				logfile = _child.fromchild
				_filename = logfile.read().rstrip()
				_child.wait()
				filename = "%s%s%s" % ('/usr2/log/',_filename,'.log')
				if _filename=='': #no log, quit, remove """ to get question
					"""
					_answer = tools.qmessage("No log file found", "Quit?")
					if _answer:
						tools.exitProg()
					else:
						tools.exitFileReader()
						tools.status.set('idle')
						#if cancel, stop thread:
						break
					"""
					if tools.first_run == 1:
						tkMessageBox.showinfo(title='No Log found', message='Field System not running\n Press OK to exit')
					tools.exitProg()
				elif not filename==MainGui.filename: #change of logfile!
					tools.first_run = 0
					#give MainGui the new filename
					MainGui.filename = filename
					#kill the Filereader thread if there is one:
					tools.exitFileReader()
					#start new thread with new filename
					tools.startUp()
				#re-check every 1s
				time.sleep(1)
		
class LineReader:

#constructor receives the line that is to be analyzed. 

	def __init__(self):
		#usbxy channels
		self.xchannel = 0
		self.ychannel = 0
		self.initiate = 1
		self.firstday = 0

	def getData(self, line):
		identification_table = ['usbx', 'usby', '/vsi4=', '/pcalports=']
		for match in identification_table:
			listpos = 0
			position = line.find(match)
			if (position !=-1):
				position += len(match)
				if (match == '/vsi4='):
					#might be '/vsi4=geo'
					if line[position]==',':
						_nfind = line[position+1:-1].split(',')
						xchannel = _nfind[0]
						ychannel = _nfind[1]
						self.setChannel([xchannel, ychannel])
				elif (match == '/pcalports='):
					_nfind = line[position:-1].split(',')
					xchannel = _nfind[0]
					ychannel = _nfind[1]
					self.setChannel([xchannel, ychannel])
				#check if xy channels are set
				elif (self.xchannel and self.ychannel): 
					data = ''
					#check if xy channels are set
					if (match == 'usbx'):
						listpos = self.xchannel
						#record amp and phase
						_d1 = line[position+1:-1].split(' ')
						if len(_d1)<4:
							_d1 = ['*']*4
						data = [_d1[2], _d1[3]]
					if (match == 'usby'):
						listpos = self.ychannel
						#record amp and phase
						_d1 = line[position+1:-1].split(' ')
						if len(_d1)<4:
							_d1 = ['*']*4
						data = [_d1[2], _d1[3]]
					date = self.fixDate(line[0:20])
					return [int(listpos), match, data,date]
					#return listpos
			

	def setChannel(self, channel): 
		self.xchannel = channel[0]
		self.ychannel = channel[1]


	def fixDate(self,date):
		_date = date[9:-3]
		return _date

			


def main():
	#run in background
	pid = os.fork()
	if pid != 0:
		pass
	else:
		startProg = MainGui()	


if __name__ == "__main__":
	sys.exit(main())


			
#By Tomas Gille - 2008


