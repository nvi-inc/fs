FTN4,X
C@REPDS 
C 
      SUBROUTINE REPDS(IP,ICLCM),REPRODUCE DISPLAY C#870115:04:40#
C 
C    REPDS gets data about the reproduce tracks and displays it 
C 
C     INPUT VARIABLES:
C 
      DIMENSION IP(1) 
C        IP(1)  - class number of buffer from MATCN 
C        IP(2)  - number of records in class
C        IP(3)  - error return from MATCN 
C 
C     OUTPUT VARIABLES: 
C 
C        IP(1) - CLASS
C        IP(2) - # REC
C        IP(3) - ERROR
C        IP(4) - who we are 
C 
C     COMMON BLOCKS USED
C 
      INCLUDE #FSCOM::FS
C 
C     CALLING SUBROUTINES: SLOWP
C 
C     CALLED SUBROUTINES: character utilities 
C 
C    LOCAL VARIABLES
C 
      DIMENSION IBUF(20),IBUF2(40)
C               - input class buffer, output display buffer 
      DIMENSION LBY(4)
C        ILEN   - length of buffers, chars
C        NCH    - character counter 
      DIMENSION BWS(8)
C                   Bandwidth choices, convert to ASCII 
      LOGICAL KCOM,KDATA
C              - true if COMMON variables wanted
C 
      DIMENSION IREG(2) 
C               - registers from EXEC 
      EQUIVALENCE (REG,IREG(1)) 
C 
C    INITIALIZED VARIABLES
C 
      DATA ILEN/40/ 
      DATA LBY/2HRA,2HW ,2HBY,2HP / 
      DATA BWS/0.0,0.0625,0.125,0.25,0.5,1.0,2.0,4.0/ 
C 
C 
C    PROGRAMMER: NRV
C     LAST MODIFIED: 800829 
C 
C 
C     1. First check error return from MATCN.  If not 0, get out
C     immediately.  If setup data wanted ( ? ), skip class read.
C 
      KCOM = IP(4).EQ.77B 
C 
      ICLASS = IP(1)
      NCREC = IP(2) 
      IERR = IP(3)
      NREC = 0
C 
      IF (KCOM) GOTO 200
      IF (IERR.LT.0) GOTO 990 
      IF (ICLASS.EQ.0.OR.ICLCM.EQ.0) GOTO 990 
C 
C 
C     2. Get class buffer with command in it.  Set up first part
C     of output buffer.  Get first buffer from MATCN. 
C 
200   REG = EXEC(21,ICLCM,IBUF2,-ILEN)
C 
      NCHAR = MIN0(IREG(2),ILEN)
      NCH = ISCNC(IBUF2,1,NCHAR,75B)
C                   Scan for "="
      KDATA = NCH.EQ.0
C                   If our command was only "device" we are waiting for 
C                   data and know what to expect. 
      IF (NCH.EQ.0) NCH = NCHAR+1 
C                   If no "=" found, position after last character
      NCH = ICHMV(IBUF2,NCH,2H/ ,1,1) 
C                   Put / to indicate a response
C 
      IF (KCOM) GOTO 310
      IF (KDATA) GOTO 230 
C 
      DO 220 I=1,NCREC
        IF (I.NE.1) NCH=ICHMV(IBUF2,NCH,2H, ,1,1) 
C                   If not first parm, put comma before 
        REG = EXEC(21,ICLASS,IBUF,-ILEN)
        NCHAR = IREG(2) 
        NCH = ICHMV(IBUF2,NCH,IBUF(2),1,NCHAR-2)
C                   Move buffer contents into output list 
220     CONTINUE
      GOTO 500
C 
230   REG = EXEC(21,ICLASS,IBUF,-ILEN)
C                   Read record into display buffer 
C 
C 
C     3.  Format of data received from tape controller: 
C 
C                  ! data in IBUF:   TPrdebtbta 
C 
      CALL MA2RP(IBUF,IREMTP,IBY,IEQ,IBW,ITA,ITB,IAL) 
      GOTO 320
310   ITA = ITRAKA
      ITB = ITRAKB
      IBW = IBWTAP
      IEQ = IEQTAP
      IBY = IBYPAS
320   IERR = 0
      NCH = ICHMV(IBUF2,NCH,LBY(IBY*2+1),1,3) 
C                   Bypass or not 
      IF (IBY.NE.IBYPAS) IERR = -301
      NCH = MCOMA(IBUF2,NCH)
C 
      NCX = IB2AS(ITA,IBUF2,NCH,100000B+2)
C                   Encode the A track
      IF (ITA.NE.ITRAKA) IERR = -302
      NCH = MCOMA(IBUF2,NCH+NCX)
C 
      NCX = IB2AS(ITB,IBUF2,NCH,100000B+2)
C                   Encode the B track
      IF (ITB.NE.ITRAKB) IERR = -303
      NCH = MCOMA(IBUF2,NCH+NCX)
C 
      NCX = IR2AS(BWS(IBW+1),IBUF2,NCH,6,4) 
C                   The bandwidth for reproduce 
      IF (IBW.NE.IBWTAP) IERR = -304
      NCH = MCOMA(IBUF2,NCH+NCX)
C 
      NCH = NCH + IR2AS(BWS(IEQ+2),IBUF2,NCH,6,4) 
C                   The equalizer selection 
      IF (IEQ.NE.IEQTAP) IERR = -305
C 
C 
C 
C     4. Now send the buffer to SAM.
C 
500   ICLASS = 0
      NCH = NCH - 1 
      CALL EXEC(20,0,IBUF2,-NCH,2HFS,0,ICLASS)  
C                   Send buffer starting with TP to display 
      IF (.NOT.KCHECK) IERR = 0 
C 
      IP(1) = ICLASS
      IP(2) = 1 
      IP(3) = IERR
      IP(4) = 2HQR
990   RETURN
      END 
